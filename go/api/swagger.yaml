---
swagger: "2.0"
info:
  version: "v1beta1"
  title: "Harvester APIs"
paths:
  /api/v1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/persistentvolumeclaims:
    get:
      tags:
      - "Volumes"
      description: "Get a list of PersistentVolumeClaim objects in a namespace."
      operationId: "listNamespacedPersistentVolumeClaim"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaimList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "Volumes"
      description: "Create a PersistentVolumeClaim object."
      operationId: "createNamespacedPersistentVolumeClaim"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaim"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaim"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaim"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaim"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /api/v1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/persistentvolumeclaims/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "Volumes"
      description: "Get a PersistentVolumeClaim object."
      operationId: "readNamespacedPersistentVolumeClaim"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaim"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "Volumes"
      description: "Update a PersistentVolumeClaim object."
      operationId: "replaceNamespacedPersistentVolumeClaim"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaim"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaim"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaim"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "Volumes"
      description: "Delete a PersistentVolumeClaim object."
      operationId: "deleteNamespacedPersistentVolumeClaim"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "Volumes"
      description: "Patch a PersistentVolumeClaim object."
      operationId: "patchNamespacedPersistentVolumeClaim"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaim"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /api/v1/persistentvolumeclaims:
    get:
      tags:
      - "Volumes"
      description: "Get a list of all PersistentVolumeClaim objects."
      operationId: "listPersistentVolumeClaimForAllNamespaces"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaimList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/keypairs:
    get:
      tags:
      - "SSH Keys"
      description: "Get a list of all KeyPair objects."
      operationId: "listKeyPairForAllNamespaces"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPairList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/keypairs:
    get:
      tags:
      - "SSH Keys"
      description: "Get a list of KeyPair objects in a namespace."
      operationId: "listNamespacedKeyPair"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPairList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "SSH Keys"
      description: "Create a KeyPair object."
      operationId: "createNamespacedKeyPair"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPair"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPair"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPair"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPair"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/keypairs/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "SSH Keys"
      description: "Get a KeyPair object."
      operationId: "readNamespacedKeyPair"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPair"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "SSH Keys"
      description: "Update a KeyPair object."
      operationId: "replaceNamespacedKeyPair"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPair"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPair"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPair"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "SSH Keys"
      description: "Delete a KeyPair object."
      operationId: "deleteNamespacedKeyPair"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "SSH Keys"
      description: "Patch a KeyPair object."
      operationId: "patchNamespacedKeyPair"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPair"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/supportbundles:
    get:
      tags:
      - "Support Bundles"
      description: "Get a list of SupportBundle objects in a namespace."
      operationId: "listNamespacedSupportBundle"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundleList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "Support Bundles"
      description: "Create a SupportBundle object."
      operationId: "createNamespacedSupportBundle"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundle"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundle"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundle"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundle"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/supportbundles/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "Support Bundles"
      description: "Get a SupportBundle object."
      operationId: "readNamespacedSupportBundle"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundle"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "Support Bundles"
      description: "Update a SupportBundle object."
      operationId: "replaceNamespacedSupportBundle"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundle"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundle"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundle"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "Support Bundles"
      description: "Delete a SupportBundle object."
      operationId: "deleteNamespacedSupportBundle"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "Support Bundles"
      description: "Patch a SupportBundle object."
      operationId: "patchNamespacedSupportBundle"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundle"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/upgrades:
    get:
      tags:
      - "Upgrades"
      description: "Get a list of Upgrade objects in a namespace."
      operationId: "listNamespacedUpgrade"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.UpgradeList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "Upgrades"
      description: "Create a Upgrade object."
      operationId: "createNamespacedUpgrade"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.Upgrade"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.Upgrade"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.Upgrade"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.Upgrade"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/upgrades/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "Upgrades"
      description: "Get a Upgrade object."
      operationId: "readNamespacedUpgrade"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.Upgrade"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "Upgrades"
      description: "Update a Upgrade object."
      operationId: "replaceNamespacedUpgrade"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.Upgrade"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.Upgrade"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.Upgrade"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "Upgrades"
      description: "Delete a Upgrade object."
      operationId: "deleteNamespacedUpgrade"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "Upgrades"
      description: "Patch a Upgrade object."
      operationId: "patchNamespacedUpgrade"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.Upgrade"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachinebackups:
    get:
      tags:
      - "Backups"
      description: "Get a list of VirtualMachineBackup objects in a namespace."
      operationId: "listNamespacedVirtualMachineBackup"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackupList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "Backups"
      description: "Create a VirtualMachineBackup object."
      operationId: "createNamespacedVirtualMachineBackup"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackup"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackup"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackup"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackup"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachinebackups/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "Backups"
      description: "Get a VirtualMachineBackup object."
      operationId: "readNamespacedVirtualMachineBackup"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackup"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "Backups"
      description: "Update a VirtualMachineBackup object."
      operationId: "replaceNamespacedVirtualMachineBackup"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackup"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackup"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackup"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "Backups"
      description: "Delete a VirtualMachineBackup object."
      operationId: "deleteNamespacedVirtualMachineBackup"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "Backups"
      description: "Patch a VirtualMachineBackup object."
      operationId: "patchNamespacedVirtualMachineBackup"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackup"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachineimages:
    get:
      tags:
      - "Images"
      description: "Get a list of VirtualMachineImage objects in a namespace."
      operationId: "listNamespacedVirtualMachineImage"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImageList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "Images"
      description: "Create a VirtualMachineImage object."
      operationId: "createNamespacedVirtualMachineImage"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImage"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImage"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImage"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImage"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachineimages/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "Images"
      description: "Get a VirtualMachineImage object."
      operationId: "readNamespacedVirtualMachineImage"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImage"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "Images"
      description: "Update a VirtualMachineImage object."
      operationId: "replaceNamespacedVirtualMachineImage"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImage"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImage"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImage"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "Images"
      description: "Delete a VirtualMachineImage object."
      operationId: "deleteNamespacedVirtualMachineImage"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "Images"
      description: "Patch a VirtualMachineImage object."
      operationId: "patchNamespacedVirtualMachineImage"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImage"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachinerestores:
    get:
      tags:
      - "Restores"
      description: "Get a list of VirtualMachineRestore objects in a namespace."
      operationId: "listNamespacedVirtualMachineRestore"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestoreList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "Restores"
      description: "Create a VirtualMachineRestore object."
      operationId: "createNamespacedVirtualMachineRestore"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestore"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestore"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestore"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestore"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachinerestores/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "Restores"
      description: "Get a VirtualMachineRestore object."
      operationId: "readNamespacedVirtualMachineRestore"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestore"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "Restores"
      description: "Update a VirtualMachineRestore object."
      operationId: "replaceNamespacedVirtualMachineRestore"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestore"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestore"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestore"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "Restores"
      description: "Delete a VirtualMachineRestore object."
      operationId: "deleteNamespacedVirtualMachineRestore"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "Restores"
      description: "Patch a VirtualMachineRestore object."
      operationId: "patchNamespacedVirtualMachineRestore"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestore"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachinetemplates:
    get:
      tags:
      - "Virtual Machine Templates"
      description: "Get a list of VirtualMachineTemplate objects in a namespace."
      operationId: "listNamespacedVirtualMachineTemplate"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "Virtual Machine Templates"
      description: "Create a VirtualMachineTemplate object."
      operationId: "createNamespacedVirtualMachineTemplate"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplate"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplate"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplate"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplate"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachinetemplates/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "Virtual Machine Templates"
      description: "Get a VirtualMachineTemplate object."
      operationId: "readNamespacedVirtualMachineTemplate"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplate"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "Virtual Machine Templates"
      description: "Update a VirtualMachineTemplate object."
      operationId: "replaceNamespacedVirtualMachineTemplate"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplate"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplate"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplate"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "Virtual Machine Templates"
      description: "Delete a VirtualMachineTemplate object."
      operationId: "deleteNamespacedVirtualMachineTemplate"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "Virtual Machine Templates"
      description: "Patch a VirtualMachineTemplate object."
      operationId: "patchNamespacedVirtualMachineTemplate"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplate"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachinetemplateversions:
    get:
      tags:
      - "Virtual Machine Templates"
      description: "Get a list of VirtualMachineTemplateVersion objects in a namespace."
      operationId: "listNamespacedVirtualMachineTemplateVersion"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersionList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "Virtual Machine Templates"
      description: "Create a VirtualMachineTemplateVersion object."
      operationId: "createNamespacedVirtualMachineTemplateVersion"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersion"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersion"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersion"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersion"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  ? /apis/harvesterhci.io/v1beta1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachinetemplateversions/{name:[a-z0-9][a-z0-9\-]*}
  : get:
      tags:
      - "Virtual Machine Templates"
      description: "Get a VirtualMachineTemplateVersion object."
      operationId: "readNamespacedVirtualMachineTemplateVersion"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersion"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "Virtual Machine Templates"
      description: "Update a VirtualMachineTemplateVersion object."
      operationId: "replaceNamespacedVirtualMachineTemplateVersion"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersion"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersion"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersion"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "Virtual Machine Templates"
      description: "Delete a VirtualMachineTemplateVersion object."
      operationId: "deleteNamespacedVirtualMachineTemplateVersion"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "Virtual Machine Templates"
      description: "Patch a VirtualMachineTemplateVersion object."
      operationId: "patchNamespacedVirtualMachineTemplateVersion"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersion"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/supportbundles:
    get:
      tags:
      - "Support Bundles"
      description: "Get a list of all SupportBundle objects."
      operationId: "listSupportBundleForAllNamespaces"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundleList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/upgrades:
    get:
      tags:
      - "Upgrades"
      description: "Get a list of all Upgrade objects."
      operationId: "listUpgradeForAllNamespaces"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.UpgradeList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/virtualmachinebackups:
    get:
      tags:
      - "Backups"
      description: "Get a list of all VirtualMachineBackup objects."
      operationId: "listVirtualMachineBackupForAllNamespaces"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackupList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/virtualmachineimages:
    get:
      tags:
      - "Images"
      description: "Get a list of all VirtualMachineImage objects."
      operationId: "listVirtualMachineImageForAllNamespaces"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImageList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/virtualmachinerestores:
    get:
      tags:
      - "Restores"
      description: "Get a list of all VirtualMachineRestore objects."
      operationId: "listVirtualMachineRestoreForAllNamespaces"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestoreList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/virtualmachinetemplates:
    get:
      tags:
      - "Virtual Machine Templates"
      description: "Get a list of all VirtualMachineTemplate objects."
      operationId: "listVirtualMachineTemplateForAllNamespaces"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/harvesterhci.io/v1beta1/virtualmachinetemplateversions:
    get:
      tags:
      - "Virtual Machine Templates"
      description: "Get a list of all VirtualMachineTemplateVersion objects."
      operationId: "listVirtualMachineTemplateVersionForAllNamespaces"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersionList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/k8s.cni.cncf.io/v1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/network-attachment-definitions:
    get:
      tags:
      - "Networks"
      description: "Get a list of NetworkAttachmentDefinition objects in a namespace."
      operationId: "listNamespacedNetworkAttachmentDefinition"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.cni.cncf.io.v1.NetworkAttachmentDefinitionList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "Networks"
      description: "Create a NetworkAttachmentDefinition object."
      operationId: "createNamespacedNetworkAttachmentDefinition"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.cni.cncf.io.v1.NetworkAttachmentDefinition"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.cni.cncf.io.v1.NetworkAttachmentDefinition"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/k8s.cni.cncf.io.v1.NetworkAttachmentDefinition"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/k8s.cni.cncf.io.v1.NetworkAttachmentDefinition"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/k8s.cni.cncf.io/v1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/network-attachment-definitions/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "Networks"
      description: "Get a NetworkAttachmentDefinition object."
      operationId: "readNamespacedNetworkAttachmentDefinition"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.cni.cncf.io.v1.NetworkAttachmentDefinition"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "Networks"
      description: "Update a NetworkAttachmentDefinition object."
      operationId: "replaceNamespacedNetworkAttachmentDefinition"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.cni.cncf.io.v1.NetworkAttachmentDefinition"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.cni.cncf.io.v1.NetworkAttachmentDefinition"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/k8s.cni.cncf.io.v1.NetworkAttachmentDefinition"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "Networks"
      description: "Delete a NetworkAttachmentDefinition object."
      operationId: "deleteNamespacedNetworkAttachmentDefinition"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "Networks"
      description: "Patch a NetworkAttachmentDefinition object."
      operationId: "patchNamespacedNetworkAttachmentDefinition"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.cni.cncf.io.v1.NetworkAttachmentDefinition"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/k8s.cni.cncf.io/v1/network-attachment-definitions:
    get:
      tags:
      - "Networks"
      description: "Get a list of all NetworkAttachmentDefinition objects."
      operationId: "listNetworkAttachmentDefinitionForAllNamespaces"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.cni.cncf.io.v1.NetworkAttachmentDefinitionList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/kubevirt.io/v1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachineinstancemigrations:
    get:
      tags:
      - "Migrations"
      description: "Get a list of VirtualMachineInstanceMigration objects in a namespace."
      operationId: "listNamespacedVirtualMachineInstanceMigration"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigrationList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "Migrations"
      description: "Create a VirtualMachineInstanceMigration object."
      operationId: "createNamespacedVirtualMachineInstanceMigration"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigration"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigration"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigration"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigration"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/kubevirt.io/v1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachineinstancemigrations/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "Migrations"
      description: "Get a VirtualMachineInstanceMigration object."
      operationId: "readNamespacedVirtualMachineInstanceMigration"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigration"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "Migrations"
      description: "Update a VirtualMachineInstanceMigration object."
      operationId: "replaceNamespacedVirtualMachineInstanceMigration"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigration"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigration"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigration"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "Migrations"
      description: "Delete a VirtualMachineInstanceMigration object."
      operationId: "deleteNamespacedVirtualMachineInstanceMigration"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "Migrations"
      description: "Patch a VirtualMachineInstanceMigration object."
      operationId: "patchNamespacedVirtualMachineInstanceMigration"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigration"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/kubevirt.io/v1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachineinstances:
    get:
      tags:
      - "Virtual Machines"
      description: "Get a list of VirtualMachineInstance objects in a namespace."
      operationId: "listNamespacedVirtualMachineInstance"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/kubevirt.io/v1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachineinstances/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "Virtual Machines"
      description: "Get a VirtualMachineInstance object."
      operationId: "readNamespacedVirtualMachineInstance"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstance"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/kubevirt.io/v1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachines:
    get:
      tags:
      - "Virtual Machines"
      description: "Get a list of VirtualMachine objects in a namespace."
      operationId: "listNamespacedVirtualMachine"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "Virtual Machines"
      description: "Create a VirtualMachine object."
      operationId: "createNamespacedVirtualMachine"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachine"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachine"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachine"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachine"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/kubevirt.io/v1/namespaces/{namespace:[a-z0-9][a-z0-9\-]*}/virtualmachines/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "Virtual Machines"
      description: "Get a VirtualMachine object."
      operationId: "readNamespacedVirtualMachine"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachine"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "Virtual Machines"
      description: "Update a VirtualMachine object."
      operationId: "replaceNamespacedVirtualMachine"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachine"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachine"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachine"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "Virtual Machines"
      description: "Delete a VirtualMachine object."
      operationId: "deleteNamespacedVirtualMachine"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "Virtual Machines"
      description: "Patch a VirtualMachine object."
      operationId: "patchNamespacedVirtualMachine"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachine"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/kubevirt.io/v1/virtualmachineinstancemigrations:
    get:
      tags:
      - "Migrations"
      description: "Get a list of all VirtualMachineInstanceMigration objects."
      operationId: "listVirtualMachineInstanceMigrationForAllNamespaces"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigrationList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/kubevirt.io/v1/virtualmachineinstances:
    get:
      tags:
      - "Virtual Machines"
      description: "Get a list of all VirtualMachineInstance objects."
      operationId: "listVirtualMachineInstanceForAllNamespaces"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/kubevirt.io/v1/virtualmachines:
    get:
      tags:
      - "Virtual Machines"
      description: "Get a list of all VirtualMachine objects."
      operationId: "listVirtualMachineForAllNamespaces"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/network.harvesterhci.io/v1beta1/clusternetworks:
    get:
      tags:
      - "Networks"
      description: "Get a list of ClusterNetwork objects in a namespace."
      operationId: "listNamespacedClusterNetwork"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.ClusterNetworkList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "Networks"
      description: "Create a ClusterNetwork object."
      operationId: "createNamespacedClusterNetwork"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/network.harvesterhci.io.v1beta1.ClusterNetwork"
        x-exportParamName: "Body"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.ClusterNetwork"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.ClusterNetwork"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.ClusterNetwork"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/network.harvesterhci.io/v1beta1/clusternetworks/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "Networks"
      description: "Get a ClusterNetwork object."
      operationId: "readNamespacedClusterNetwork"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.ClusterNetwork"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "Networks"
      description: "Update a ClusterNetwork object."
      operationId: "replaceNamespacedClusterNetwork"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/network.harvesterhci.io.v1beta1.ClusterNetwork"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.ClusterNetwork"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.ClusterNetwork"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "Networks"
      description: "Delete a ClusterNetwork object."
      operationId: "deleteNamespacedClusterNetwork"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "Networks"
      description: "Patch a ClusterNetwork object."
      operationId: "patchNamespacedClusterNetwork"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.ClusterNetwork"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/network.harvesterhci.io/v1beta1/nodenetworks:
    get:
      tags:
      - "Networks"
      description: "Get a list of NodeNetwork objects in a namespace."
      operationId: "listNamespacedNodeNetwork"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "continue"
        in: "query"
        description: "The continue option should be set when retrieving more results\
          \ from the server. Since this value is server defined, clients may only\
          \ use the continue value from a previous query result with identical query\
          \ parameters (except for the value of continue) and the server may reject\
          \ a continue value it does not recognize. If the specified continue value\
          \ is no longer valid whether due to expiration (generally five to fifteen\
          \ minutes) or a configuration change on the server the server will respond\
          \ with a 410 ResourceExpired error indicating the client must restart their\
          \ list without the continue field. This field is not supported when watch\
          \ is true. Clients may start a watch from the last resourceVersion value\
          \ returned by the server and not miss any modifications."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "Continue_"
        x-optionalDataType: "String"
      - name: "fieldSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ fields. Defaults to everything."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "FieldSelector"
        x-optionalDataType: "String"
      - name: "includeUninitialized"
        in: "query"
        description: "If true, partially initialized resources are included in the\
          \ response."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "IncludeUninitialized"
        x-optionalDataType: "Bool"
      - name: "labelSelector"
        in: "query"
        description: "A selector to restrict the list of returned objects by their\
          \ labels. Defaults to everything"
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "LabelSelector"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit is a maximum number of responses to return for a list\
          \ call. If more items exist, the server will set the `continue` field on\
          \ the list metadata to a value that can be used with the same initial query\
          \ to retrieve the next set of results. Setting a limit may return fewer\
          \ than the requested amount of items (up to zero items) in the event all\
          \ requested objects are filtered out and clients should only use the presence\
          \ of the continue field to determine whether more results are available.\
          \ Servers may choose not to support the limit argument and will return all\
          \ of the available results. If limit is specified and the continue field\
          \ is empty, clients may assume that no more results are available. This\
          \ field is not supported if watch is true.\n\nThe server guarantees that\
          \ the objects returned when using continue will be identical to issuing\
          \ a single list call without a limit - that is, no objects created, modified,\
          \ or deleted after the first request is issued will be included in any subsequent\
          \ continued requests. This is sometimes referred to as a consistent snapshot,\
          \ and ensures that a client that is using limit to receive smaller chunks\
          \ of a very large result can ensure they see all possible objects. If objects\
          \ are updated during a chunked list the version of the object that was present\
          \ at the time the first list result was calculated is returned."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "resourceVersion"
        in: "query"
        description: "When specified with a watch call, shows changes that occur after\
          \ that particular version of a resource. Defaults to changes from the beginning\
          \ of history."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "ResourceVersion"
        x-optionalDataType: "String"
      - name: "timeoutSeconds"
        in: "query"
        description: "TimeoutSeconds for the list/watch call."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "TimeoutSeconds"
        x-optionalDataType: "Int32"
      - name: "watch"
        in: "query"
        description: "Watch for changes to the described resources and return them\
          \ as a stream of add, update, and remove notifications. Specify resourceVersion."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Watch"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.NodeNetworkList"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    post:
      tags:
      - "Networks"
      description: "Create a NodeNetwork object."
      operationId: "createNamespacedNodeNetwork"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/network.harvesterhci.io.v1beta1.NodeNetwork"
        x-exportParamName: "Body"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.NodeNetwork"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.NodeNetwork"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.NodeNetwork"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
  /apis/network.harvesterhci.io/v1beta1/nodenetworks/{name:[a-z0-9][a-z0-9\-]*}:
    get:
      tags:
      - "Networks"
      description: "Get a NodeNetwork object."
      operationId: "readNamespacedNodeNetwork"
      produces:
      - "application/json"
      - "application/yaml"
      - "application/json;stream=watch"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - name: "exact"
        in: "query"
        description: "Should the export be exact. Exact export maintains cluster-specific\
          \ fields like 'Namespace'."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Exact"
        x-optionalDataType: "Bool"
      - name: "export"
        in: "query"
        description: "Should this value be exported. Export strips fields that a user\
          \ can not specify."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "Export"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.NodeNetwork"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    put:
      tags:
      - "Networks"
      description: "Update a NodeNetwork object."
      operationId: "replaceNamespacedNodeNetwork"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/network.harvesterhci.io.v1beta1.NodeNetwork"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.NodeNetwork"
        "201":
          description: "Create"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.NodeNetwork"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    delete:
      tags:
      - "Networks"
      description: "Delete a NodeNetwork object."
      operationId: "deleteNamespacedNodeNetwork"
      consumes:
      - "application/json"
      - "application/yaml"
      produces:
      - "application/json"
      - "application/yaml"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.DeleteOptions"
        x-exportParamName: "Body"
      - name: "gracePeriodSeconds"
        in: "query"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
        required: false
        type: "integer"
        uniqueItems: true
        x-exportParamName: "GracePeriodSeconds"
        x-optionalDataType: "Int32"
      - name: "orphanDependents"
        in: "query"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
        required: false
        type: "boolean"
        uniqueItems: true
        x-exportParamName: "OrphanDependents"
        x-optionalDataType: "Bool"
      - name: "propagationPolicy"
        in: "query"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
        required: false
        type: "string"
        uniqueItems: true
        x-exportParamName: "PropagationPolicy"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/k8s.io.v1.Status"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
    patch:
      tags:
      - "Networks"
      description: "Patch a NodeNetwork object."
      operationId: "patchNamespacedNodeNetwork"
      consumes:
      - "application/json-patch+json"
      - "application/merge-patch+json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Name of the resource"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Name"
      - name: "namespace"
        in: "path"
        description: "Object name and auth scope, such as for teams and projects"
        required: true
        type: "string"
        uniqueItems: true
        x-exportParamName: "Namespace"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/k8s.io.v1.Patch"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/network.harvesterhci.io.v1beta1.NodeNetwork"
        "401":
          description: "Unauthorized"
          schema:
            type: "string"
definitions:
  harvesterhci.io.v1beta1.BackupTarget:
    type: "object"
    properties:
      bucketName:
        type: "string"
      bucketRegion:
        type: "string"
      endpoint:
        type: "string"
    description: "BackupTarget is where VM Backup stores"
    example:
      bucketRegion: "bucketRegion"
      bucketName: "bucketName"
      endpoint: "endpoint"
  harvesterhci.io.v1beta1.Condition:
    type: "object"
    required:
    - "status"
    - "type"
    properties:
      lastTransitionTime:
        type: "string"
        description: "Last time the condition transitioned from one status to another."
      lastUpdateTime:
        type: "string"
        description: "The last time this condition was updated."
      message:
        type: "string"
        description: "Human-readable message indicating details about last transition"
      reason:
        type: "string"
        description: "The reason for the condition's last transition."
      status:
        type: "string"
        description: "Status of the condition, one of True, False, Unknown."
        default: ""
      type:
        type: "string"
        description: "Type of the condition."
        default: ""
    example:
      reason: "reason"
      lastTransitionTime: "lastTransitionTime"
      message: "message"
      type: "type"
      lastUpdateTime: "lastUpdateTime"
      status: "status"
  harvesterhci.io.v1beta1.Error:
    type: "object"
    properties:
      message:
        type: "string"
      time:
        $ref: "#/definitions/k8s.io.v1.Time"
    description: "Error is the last error encountered during the snapshot/restore"
    example:
      message: "message"
  harvesterhci.io.v1beta1.KeyPair:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    - "spec"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPairSpec"
      status:
        $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPairStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        publicKey: "publicKey"
      status:
        conditions:
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
        fingerPrint: "fingerPrint"
  harvesterhci.io.v1beta1.KeyPairList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    - "metadata"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.KeyPair"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "KeyPairList is a list of KeyPair resources"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          publicKey: "publicKey"
        status:
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          fingerPrint: "fingerPrint"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          publicKey: "publicKey"
        status:
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          fingerPrint: "fingerPrint"
  harvesterhci.io.v1beta1.KeyPairSpec:
    type: "object"
    required:
    - "publicKey"
    properties:
      publicKey:
        type: "string"
        default: ""
    example:
      publicKey: "publicKey"
  harvesterhci.io.v1beta1.KeyPairStatus:
    type: "object"
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.Condition"
      fingerPrint:
        type: "string"
    example:
      conditions:
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      fingerPrint: "fingerPrint"
  harvesterhci.io.v1beta1.NodeUpgradeStatus:
    type: "object"
    properties:
      message:
        type: "string"
      reason:
        type: "string"
      state:
        type: "string"
    example:
      reason: "reason"
      state: "state"
      message: "message"
  harvesterhci.io.v1beta1.PersistentVolumeClaimSourceSpec:
    type: "object"
    properties:
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaimSpec"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      spec:
        storageClassName: "storageClassName"
        dataSourceRef:
          apiGroup: "apiGroup"
          kind: "kind"
          name: "name"
        volumeName: "volumeName"
        resources:
          requests: {}
          limits:
            key: {}
        selector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        accessModes:
        - "accessModes"
        - "accessModes"
        dataSource:
          apiGroup: "apiGroup"
          kind: "kind"
          name: "name"
        volumeMode: "volumeMode"
  harvesterhci.io.v1beta1.SecretBackup:
    type: "object"
    properties:
      data:
        type: "object"
        additionalProperties:
          type: "string"
          format: "byte"
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      name:
        type: "string"
    description: "SecretBackup contains the secret data need to restore a secret referenced\
      \ by the VM"
    example:
      data:
        key: "data"
      name: "name"
  harvesterhci.io.v1beta1.SupportBundle:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    - "spec"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundleSpec"
      status:
        $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundleStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        issueURL: "issueURL"
        description: "description"
      status:
        filename: "filename"
        progress: 6
        filesize: 0
        state: "state"
        conditions:
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
  harvesterhci.io.v1beta1.SupportBundleList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    - "metadata"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.SupportBundle"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "SupportBundleList is a list of SupportBundle resources"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          issueURL: "issueURL"
          description: "description"
        status:
          filename: "filename"
          progress: 6
          filesize: 0
          state: "state"
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          issueURL: "issueURL"
          description: "description"
        status:
          filename: "filename"
          progress: 6
          filesize: 0
          state: "state"
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
  harvesterhci.io.v1beta1.SupportBundleSpec:
    type: "object"
    required:
    - "description"
    properties:
      description:
        type: "string"
        default: ""
      issueURL:
        type: "string"
        default: ""
    example:
      issueURL: "issueURL"
      description: "description"
  harvesterhci.io.v1beta1.SupportBundleStatus:
    type: "object"
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.Condition"
      filename:
        type: "string"
      filesize:
        type: "integer"
        format: "int64"
      progress:
        type: "integer"
        format: "int32"
      state:
        type: "string"
    example:
      filename: "filename"
      progress: 6
      filesize: 0
      state: "state"
      conditions:
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
  harvesterhci.io.v1beta1.Upgrade:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    - "spec"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        $ref: "#/definitions/harvesterhci.io.v1beta1.UpgradeSpec"
      status:
        $ref: "#/definitions/harvesterhci.io.v1beta1.UpgradeStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        image: "image"
        version: "version"
      status:
        nodeStatuses:
          key:
            reason: "reason"
            state: "state"
            message: "message"
        imageID: "imageID"
        previousVersion: "previousVersion"
        singleNode: "singleNode"
        repoInfo: "repoInfo"
        conditions:
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
  harvesterhci.io.v1beta1.UpgradeList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    - "metadata"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.Upgrade"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "UpgradeList is a list of Upgrade resources"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          image: "image"
          version: "version"
        status:
          nodeStatuses:
            key:
              reason: "reason"
              state: "state"
              message: "message"
          imageID: "imageID"
          previousVersion: "previousVersion"
          singleNode: "singleNode"
          repoInfo: "repoInfo"
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          image: "image"
          version: "version"
        status:
          nodeStatuses:
            key:
              reason: "reason"
              state: "state"
              message: "message"
          imageID: "imageID"
          previousVersion: "previousVersion"
          singleNode: "singleNode"
          repoInfo: "repoInfo"
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
  harvesterhci.io.v1beta1.UpgradeSpec:
    type: "object"
    properties:
      image:
        type: "string"
        default: ""
      version:
        type: "string"
        default: ""
    example:
      image: "image"
      version: "version"
  harvesterhci.io.v1beta1.UpgradeStatus:
    type: "object"
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.Condition"
      imageID:
        type: "string"
      nodeStatuses:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/harvesterhci.io.v1beta1.NodeUpgradeStatus"
      previousVersion:
        type: "string"
      repoInfo:
        type: "string"
      singleNode:
        type: "string"
    example:
      nodeStatuses:
        key:
          reason: "reason"
          state: "state"
          message: "message"
      imageID: "imageID"
      previousVersion: "previousVersion"
      singleNode: "singleNode"
      repoInfo: "repoInfo"
      conditions:
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
  harvesterhci.io.v1beta1.VirtualMachineBackup:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    - "spec"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackupSpec"
      status:
        $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackupStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        source:
          apiGroup: "apiGroup"
          kind: "kind"
          name: "name"
      status:
        sourceUID: "sourceUID"
        backupTarget:
          bucketRegion: "bucketRegion"
          bucketName: "bucketName"
          endpoint: "endpoint"
        creationTime: {}
        secretBackups:
        - data:
            key: "data"
          name: "name"
        - data:
            key: "data"
          name: "name"
        readyToUse: true
        source:
          metadata:
            generation: 6
            finalizers:
            - "finalizers"
            - "finalizers"
            resourceVersion: "resourceVersion"
            annotations:
              key: "annotations"
            generateName: "generateName"
            labels:
              key: "labels"
            ownerReferences:
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            selfLink: "selfLink"
            deletionGracePeriodSeconds: 0
            uid: "uid"
            managedFields:
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            clusterName: "clusterName"
            creationTimestamp: {}
            name: "name"
            namespace: "namespace"
          spec:
            flavor:
              kind: "kind"
              name: "name"
            running: true
            template:
              metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              spec:
                dnsPolicy: "ClusterFirst"
                livenessProbe:
                  failureThreshold: 1
                  periodSeconds: 6
                  tcpSocket:
                    host: "host"
                  timeoutSeconds: 1
                  guestAgentPing: {}
                  successThreshold: 7
                  initialDelaySeconds: 1
                  exec:
                    command:
                    - "command"
                    - "command"
                  httpGet:
                    path: "path"
                    scheme: "HTTP"
                    port: {}
                    host: "host"
                    httpHeaders:
                    - name: "name"
                      value: "value"
                    - name: "name"
                      value: "value"
                terminationGracePeriodSeconds: 4
                dnsConfig:
                  searches:
                  - "searches"
                  - "searches"
                  nameservers:
                  - "nameservers"
                  - "nameservers"
                  options:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
                priorityClassName: "priorityClassName"
                volumes:
                - downwardAPI:
                    volumeLabel: "volumeLabel"
                    fields:
                    - mode: 9
                      path: "path"
                      resourceFieldRef:
                        resource: "resource"
                        containerName: "containerName"
                      fieldRef:
                        apiVersion: "apiVersion"
                        fieldPath: "fieldPath"
                    - mode: 9
                      path: "path"
                      resourceFieldRef:
                        resource: "resource"
                        containerName: "containerName"
                      fieldRef:
                        apiVersion: "apiVersion"
                        fieldPath: "fieldPath"
                  cloudInitConfigDrive:
                    networkDataSecretRef:
                      name: "name"
                    userData: "userData"
                    networkData: "networkData"
                    networkDataBase64: "networkDataBase64"
                    secretRef:
                      name: "name"
                    userDataBase64: "userDataBase64"
                  downwardMetrics: {}
                  ephemeral:
                    persistentVolumeClaim:
                      claimName: "claimName"
                      readOnly: true
                  serviceAccount:
                    serviceAccountName: "serviceAccountName"
                  sysprep:
                    configMap:
                      name: "name"
                    secret:
                      name: "name"
                  containerDisk:
                    image: "image"
                    imagePullPolicy: "Always"
                    imagePullSecret: "imagePullSecret"
                    path: "path"
                  hostDisk:
                    path: "path"
                    shared: true
                    type: "type"
                  secret:
                    secretName: "secretName"
                    volumeLabel: "volumeLabel"
                    optional: true
                  cloudInitNoCloud:
                    networkDataSecretRef:
                      name: "name"
                    userData: "userData"
                    networkData: "networkData"
                    networkDataBase64: "networkDataBase64"
                    secretRef:
                      name: "name"
                    userDataBase64: "userDataBase64"
                  configMap:
                    volumeLabel: "volumeLabel"
                    name: "name"
                    optional: true
                  dataVolume:
                    hotpluggable: true
                    name: "name"
                  name: "name"
                  persistentVolumeClaim:
                    claimName: "claimName"
                    hotpluggable: true
                    readOnly: true
                  emptyDisk: {}
                - downwardAPI:
                    volumeLabel: "volumeLabel"
                    fields:
                    - mode: 9
                      path: "path"
                      resourceFieldRef:
                        resource: "resource"
                        containerName: "containerName"
                      fieldRef:
                        apiVersion: "apiVersion"
                        fieldPath: "fieldPath"
                    - mode: 9
                      path: "path"
                      resourceFieldRef:
                        resource: "resource"
                        containerName: "containerName"
                      fieldRef:
                        apiVersion: "apiVersion"
                        fieldPath: "fieldPath"
                  cloudInitConfigDrive:
                    networkDataSecretRef:
                      name: "name"
                    userData: "userData"
                    networkData: "networkData"
                    networkDataBase64: "networkDataBase64"
                    secretRef:
                      name: "name"
                    userDataBase64: "userDataBase64"
                  downwardMetrics: {}
                  ephemeral:
                    persistentVolumeClaim:
                      claimName: "claimName"
                      readOnly: true
                  serviceAccount:
                    serviceAccountName: "serviceAccountName"
                  sysprep:
                    configMap:
                      name: "name"
                    secret:
                      name: "name"
                  containerDisk:
                    image: "image"
                    imagePullPolicy: "Always"
                    imagePullSecret: "imagePullSecret"
                    path: "path"
                  hostDisk:
                    path: "path"
                    shared: true
                    type: "type"
                  secret:
                    secretName: "secretName"
                    volumeLabel: "volumeLabel"
                    optional: true
                  cloudInitNoCloud:
                    networkDataSecretRef:
                      name: "name"
                    userData: "userData"
                    networkData: "networkData"
                    networkDataBase64: "networkDataBase64"
                    secretRef:
                      name: "name"
                    userDataBase64: "userDataBase64"
                  configMap:
                    volumeLabel: "volumeLabel"
                    name: "name"
                    optional: true
                  dataVolume:
                    hotpluggable: true
                    name: "name"
                  name: "name"
                  persistentVolumeClaim:
                    claimName: "claimName"
                    hotpluggable: true
                    readOnly: true
                  emptyDisk: {}
                networks:
                - pod:
                    vmNetworkCIDR: "vmNetworkCIDR"
                    vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                  name: "name"
                  multus:
                    default: true
                    networkName: "networkName"
                - pod:
                    vmNetworkCIDR: "vmNetworkCIDR"
                    vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                  name: "name"
                  multus:
                    default: true
                    networkName: "networkName"
                nodeSelector:
                  key: "nodeSelector"
                hostname: "hostname"
                tolerations:
                - effect: "NoExecute"
                  tolerationSeconds: 5
                  value: "value"
                  key: "key"
                  operator: "Equal"
                - effect: "NoExecute"
                  tolerationSeconds: 5
                  value: "value"
                  key: "key"
                  operator: "Equal"
                accessCredentials:
                - sshPublicKey:
                    propagationMethod:
                      configDrive: {}
                      qemuGuestAgent:
                        users:
                        - "users"
                        - "users"
                    source:
                      secret:
                        secretName: "secretName"
                  userPassword:
                    propagationMethod:
                      qemuGuestAgent: {}
                    source:
                      secret:
                        secretName: "secretName"
                - sshPublicKey:
                    propagationMethod:
                      configDrive: {}
                      qemuGuestAgent:
                        users:
                        - "users"
                        - "users"
                    source:
                      secret:
                        secretName: "secretName"
                  userPassword:
                    propagationMethod:
                      qemuGuestAgent: {}
                    source:
                      secret:
                        secretName: "secretName"
                startStrategy: "startStrategy"
                domain:
                  features:
                    smm:
                      enabled: true
                    kvm:
                      hidden: true
                    apic:
                      endOfInterrupt: true
                      enabled: true
                    acpi:
                      enabled: true
                    pvspinlock:
                      enabled: true
                    hyperv:
                      vpindex:
                        enabled: true
                      ipi:
                        enabled: true
                      reenlightenment:
                        enabled: true
                      runtime:
                        enabled: true
                      vendorid:
                        vendorid: "vendorid"
                        enabled: true
                      evmcs:
                        enabled: true
                      synictimer:
                        direct:
                          enabled: true
                        enabled: true
                      spinlocks:
                        spinlocks: 1
                        enabled: true
                      tlbflush:
                        enabled: true
                      synic:
                        enabled: true
                      relaxed:
                        enabled: true
                      vapic:
                        enabled: true
                      reset:
                        enabled: true
                      frequencies:
                        enabled: true
                  ioThreadsPolicy: "ioThreadsPolicy"
                  memory:
                    hugepages:
                      pageSize: "pageSize"
                    guest: {}
                  devices:
                    autoattachPodInterface: true
                    interfaces:
                    - dhcpOptions:
                        ntpServers:
                        - "ntpServers"
                        - "ntpServers"
                        tftpServerName: "tftpServerName"
                        bootFileName: "bootFileName"
                        privateOptions:
                        - value: "value"
                          option: 4
                        - value: "value"
                          option: 4
                      slirp: {}
                      macvtap: {}
                      ports:
                      - protocol: "protocol"
                        port: 7
                        name: "name"
                      - protocol: "protocol"
                        port: 7
                        name: "name"
                      macAddress: "macAddress"
                      masquerade: {}
                      bootOrder: 2
                      name: "name"
                      sriov: {}
                      model: "model"
                      pciAddress: "pciAddress"
                      bridge: {}
                      tag: "tag"
                    - dhcpOptions:
                        ntpServers:
                        - "ntpServers"
                        - "ntpServers"
                        tftpServerName: "tftpServerName"
                        bootFileName: "bootFileName"
                        privateOptions:
                        - value: "value"
                          option: 4
                        - value: "value"
                          option: 4
                      slirp: {}
                      macvtap: {}
                      ports:
                      - protocol: "protocol"
                        port: 7
                        name: "name"
                      - protocol: "protocol"
                        port: 7
                        name: "name"
                      macAddress: "macAddress"
                      masquerade: {}
                      bootOrder: 2
                      name: "name"
                      sriov: {}
                      model: "model"
                      pciAddress: "pciAddress"
                      bridge: {}
                      tag: "tag"
                    disks:
                    - shareable: true
                      cache: "cache"
                      dedicatedIOThread: true
                      disk:
                        bus: "bus"
                        readonly: true
                        pciAddress: "pciAddress"
                      lun:
                        bus: "bus"
                        readonly: true
                      bootOrder: 3
                      serial: "serial"
                      io: "io"
                      name: "name"
                      tag: "tag"
                      cdrom:
                        tray: "tray"
                        bus: "bus"
                        readonly: true
                      blockSize:
                        custom:
                          physical: 9
                          logical: 7
                        matchVolume:
                          enabled: true
                    - shareable: true
                      cache: "cache"
                      dedicatedIOThread: true
                      disk:
                        bus: "bus"
                        readonly: true
                        pciAddress: "pciAddress"
                      lun:
                        bus: "bus"
                        readonly: true
                      bootOrder: 3
                      serial: "serial"
                      io: "io"
                      name: "name"
                      tag: "tag"
                      cdrom:
                        tray: "tray"
                        bus: "bus"
                        readonly: true
                      blockSize:
                        custom:
                          physical: 9
                          logical: 7
                        matchVolume:
                          enabled: true
                    inputs:
                    - bus: "bus"
                      name: "name"
                      type: "type"
                    - bus: "bus"
                      name: "name"
                      type: "type"
                    sound:
                      name: "name"
                      model: "model"
                    useVirtioTransitional: true
                    rng: {}
                    autoattachSerialConsole: true
                    filesystems:
                    - name: "name"
                      virtiofs: {}
                    - name: "name"
                      virtiofs: {}
                    hostDevices:
                    - name: "name"
                      tag: "tag"
                      deviceName: "deviceName"
                    - name: "name"
                      tag: "tag"
                      deviceName: "deviceName"
                    networkInterfaceMultiqueue: true
                    autoattachMemBalloon: true
                    tpm: {}
                    clientPassthrough: {}
                    watchdog:
                      i6300esb:
                        action: "action"
                      name: "name"
                    blockMultiQueue: true
                    gpus:
                    - name: "name"
                      tag: "tag"
                      virtualGPUOptions:
                        display:
                          enabled: true
                          ramFB:
                            enabled: true
                      deviceName: "deviceName"
                    - name: "name"
                      tag: "tag"
                      virtualGPUOptions:
                        display:
                          enabled: true
                          ramFB:
                            enabled: true
                      deviceName: "deviceName"
                    disableHotplug: true
                    autoattachGraphicsDevice: true
                  machine:
                    type: "type"
                  cpu:
                    features:
                    - name: "name"
                      policy: "policy"
                    - name: "name"
                      policy: "policy"
                    realtime:
                      mask: "mask"
                    cores: 5
                    dedicatedCpuPlacement: true
                    numa:
                      guestMappingPassthrough: {}
                    threads: 2
                    model: "model"
                    sockets: 5
                    isolateEmulatorThread: true
                  resources:
                    overcommitGuestOverhead: true
                    requests: {}
                    limits: {}
                  chassis:
                    serial: "serial"
                    asset: "asset"
                    sku: "sku"
                    version: "version"
                    manufacturer: "manufacturer"
                  clock:
                    timer:
                      rtc:
                        tickPolicy: "tickPolicy"
                        present: true
                        track: "track"
                      kvm:
                        present: true
                      hpet:
                        tickPolicy: "tickPolicy"
                        present: true
                      pit:
                        tickPolicy: "tickPolicy"
                        present: true
                      hyperv:
                        present: true
                    utc:
                      offsetSeconds: 1
                    timezone: "timezone"
                  firmware:
                    serial: "serial"
                    bootloader:
                      bios:
                        useSerial: true
                      efi:
                        secureBoot: true
                    uuid: "uuid"
                    kernelBoot:
                      container:
                        image: "image"
                        imagePullPolicy: "Always"
                        imagePullSecret: "imagePullSecret"
                        initrdPath: "initrdPath"
                        kernelPath: "kernelPath"
                      kernelArgs: "kernelArgs"
                  launchSecurity:
                    sev: {}
                readinessProbe:
                  failureThreshold: 1
                  periodSeconds: 6
                  tcpSocket:
                    host: "host"
                  timeoutSeconds: 1
                  guestAgentPing: {}
                  successThreshold: 7
                  initialDelaySeconds: 1
                  exec:
                    command:
                    - "command"
                    - "command"
                  httpGet:
                    path: "path"
                    scheme: "HTTP"
                    port: {}
                    host: "host"
                    httpHeaders:
                    - name: "name"
                      value: "value"
                    - name: "name"
                      value: "value"
                subdomain: "subdomain"
                evictionStrategy: "evictionStrategy"
                schedulerName: "schedulerName"
                affinity:
                  nodeAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      nodeSelectorTerms:
                      - matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        matchFields:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                      - matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        matchFields:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - preference:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        matchFields:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                      weight: 0
                    - preference:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        matchFields:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                      weight: 0
                  podAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                    - labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    - labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      weight: 6
                    - podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      weight: 6
                  podAntiAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                    - labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    - labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      weight: 6
                    - podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      weight: 6
            dataVolumeTemplates:
            - metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              apiVersion: "apiVersion"
              kind: "kind"
              spec:
                finalCheckpoint: true
                preallocation: true
                priorityClassName: "priorityClassName"
                checkpoints:
                - current: "current"
                  previous: "previous"
                - current: "current"
                  previous: "previous"
                source:
                  s3:
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    url: "url"
                  registry:
                    imageStream: "imageStream"
                    pullMethod: "pullMethod"
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    url: "url"
                  vddk:
                    backingFile: "backingFile"
                    initImageURL: "initImageURL"
                    secretRef: "secretRef"
                    thumbprint: "thumbprint"
                    uuid: "uuid"
                    url: "url"
                  blank: {}
                  imageio:
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    diskId: "diskId"
                    url: "url"
                  upload: {}
                  http:
                    secretExtraHeaders:
                    - "secretExtraHeaders"
                    - "secretExtraHeaders"
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    extraHeaders:
                    - "extraHeaders"
                    - "extraHeaders"
                    url: "url"
                  pvc:
                    name: "name"
                    namespace: "namespace"
                storage:
                  storageClassName: "storageClassName"
                  volumeName: "volumeName"
                  resources:
                    requests: {}
                    limits:
                      key: {}
                  selector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  accessModes:
                  - "accessModes"
                  - "accessModes"
                  dataSource:
                    apiGroup: "apiGroup"
                    kind: "kind"
                    name: "name"
                  volumeMode: "volumeMode"
                pvc:
                  storageClassName: "storageClassName"
                  dataSourceRef:
                    apiGroup: "apiGroup"
                    kind: "kind"
                    name: "name"
                  volumeName: "volumeName"
                  resources:
                    requests: {}
                    limits:
                      key: {}
                  selector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  accessModes:
                  - "accessModes"
                  - "accessModes"
                  dataSource:
                    apiGroup: "apiGroup"
                    kind: "kind"
                    name: "name"
                  volumeMode: "volumeMode"
                sourceRef:
                  kind: "kind"
                  name: "name"
                  namespace: "namespace"
                contentType: "contentType"
              status: {}
            - metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              apiVersion: "apiVersion"
              kind: "kind"
              spec:
                finalCheckpoint: true
                preallocation: true
                priorityClassName: "priorityClassName"
                checkpoints:
                - current: "current"
                  previous: "previous"
                - current: "current"
                  previous: "previous"
                source:
                  s3:
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    url: "url"
                  registry:
                    imageStream: "imageStream"
                    pullMethod: "pullMethod"
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    url: "url"
                  vddk:
                    backingFile: "backingFile"
                    initImageURL: "initImageURL"
                    secretRef: "secretRef"
                    thumbprint: "thumbprint"
                    uuid: "uuid"
                    url: "url"
                  blank: {}
                  imageio:
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    diskId: "diskId"
                    url: "url"
                  upload: {}
                  http:
                    secretExtraHeaders:
                    - "secretExtraHeaders"
                    - "secretExtraHeaders"
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    extraHeaders:
                    - "extraHeaders"
                    - "extraHeaders"
                    url: "url"
                  pvc:
                    name: "name"
                    namespace: "namespace"
                storage:
                  storageClassName: "storageClassName"
                  volumeName: "volumeName"
                  resources:
                    requests: {}
                    limits:
                      key: {}
                  selector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  accessModes:
                  - "accessModes"
                  - "accessModes"
                  dataSource:
                    apiGroup: "apiGroup"
                    kind: "kind"
                    name: "name"
                  volumeMode: "volumeMode"
                pvc:
                  storageClassName: "storageClassName"
                  dataSourceRef:
                    apiGroup: "apiGroup"
                    kind: "kind"
                    name: "name"
                  volumeName: "volumeName"
                  resources:
                    requests: {}
                    limits:
                      key: {}
                  selector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  accessModes:
                  - "accessModes"
                  - "accessModes"
                  dataSource:
                    apiGroup: "apiGroup"
                    kind: "kind"
                    name: "name"
                  volumeMode: "volumeMode"
                sourceRef:
                  kind: "kind"
                  name: "name"
                  namespace: "namespace"
                contentType: "contentType"
              status: {}
            runStrategy: "runStrategy"
        conditions:
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
        error:
          message: "message"
        volumeBackups:
        - volumeName: "volumeName"
          longhornBackupName: "longhornBackupName"
          name: "name"
          readyToUse: true
          persistentVolumeClaim:
            metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            spec:
              storageClassName: "storageClassName"
              dataSourceRef:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeName: "volumeName"
              resources:
                requests: {}
                limits:
                  key: {}
              selector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              accessModes:
              - "accessModes"
              - "accessModes"
              dataSource:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeMode: "volumeMode"
          error:
            message: "message"
        - volumeName: "volumeName"
          longhornBackupName: "longhornBackupName"
          name: "name"
          readyToUse: true
          persistentVolumeClaim:
            metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            spec:
              storageClassName: "storageClassName"
              dataSourceRef:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeName: "volumeName"
              resources:
                requests: {}
                limits:
                  key: {}
              selector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              accessModes:
              - "accessModes"
              - "accessModes"
              dataSource:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeMode: "volumeMode"
          error:
            message: "message"
  harvesterhci.io.v1beta1.VirtualMachineBackupList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    - "metadata"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineBackup"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "VirtualMachineBackupList is a list of VirtualMachineBackup resources"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          source:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
        status:
          sourceUID: "sourceUID"
          backupTarget:
            bucketRegion: "bucketRegion"
            bucketName: "bucketName"
            endpoint: "endpoint"
          creationTime: {}
          secretBackups:
          - data:
              key: "data"
            name: "name"
          - data:
              key: "data"
            name: "name"
          readyToUse: true
          source:
            metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            spec:
              flavor:
                kind: "kind"
                name: "name"
              running: true
              template:
                metadata:
                  generation: 6
                  finalizers:
                  - "finalizers"
                  - "finalizers"
                  resourceVersion: "resourceVersion"
                  annotations:
                    key: "annotations"
                  generateName: "generateName"
                  labels:
                    key: "labels"
                  ownerReferences:
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  selfLink: "selfLink"
                  deletionGracePeriodSeconds: 0
                  uid: "uid"
                  managedFields:
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  clusterName: "clusterName"
                  creationTimestamp: {}
                  name: "name"
                  namespace: "namespace"
                spec:
                  dnsPolicy: "ClusterFirst"
                  livenessProbe:
                    failureThreshold: 1
                    periodSeconds: 6
                    tcpSocket:
                      host: "host"
                    timeoutSeconds: 1
                    guestAgentPing: {}
                    successThreshold: 7
                    initialDelaySeconds: 1
                    exec:
                      command:
                      - "command"
                      - "command"
                    httpGet:
                      path: "path"
                      scheme: "HTTP"
                      port: {}
                      host: "host"
                      httpHeaders:
                      - name: "name"
                        value: "value"
                      - name: "name"
                        value: "value"
                  terminationGracePeriodSeconds: 4
                  dnsConfig:
                    searches:
                    - "searches"
                    - "searches"
                    nameservers:
                    - "nameservers"
                    - "nameservers"
                    options:
                    - name: "name"
                      value: "value"
                    - name: "name"
                      value: "value"
                  priorityClassName: "priorityClassName"
                  volumes:
                  - downwardAPI:
                      volumeLabel: "volumeLabel"
                      fields:
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                    cloudInitConfigDrive:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    downwardMetrics: {}
                    ephemeral:
                      persistentVolumeClaim:
                        claimName: "claimName"
                        readOnly: true
                    serviceAccount:
                      serviceAccountName: "serviceAccountName"
                    sysprep:
                      configMap:
                        name: "name"
                      secret:
                        name: "name"
                    containerDisk:
                      image: "image"
                      imagePullPolicy: "Always"
                      imagePullSecret: "imagePullSecret"
                      path: "path"
                    hostDisk:
                      path: "path"
                      shared: true
                      type: "type"
                    secret:
                      secretName: "secretName"
                      volumeLabel: "volumeLabel"
                      optional: true
                    cloudInitNoCloud:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    configMap:
                      volumeLabel: "volumeLabel"
                      name: "name"
                      optional: true
                    dataVolume:
                      hotpluggable: true
                      name: "name"
                    name: "name"
                    persistentVolumeClaim:
                      claimName: "claimName"
                      hotpluggable: true
                      readOnly: true
                    emptyDisk: {}
                  - downwardAPI:
                      volumeLabel: "volumeLabel"
                      fields:
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                    cloudInitConfigDrive:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    downwardMetrics: {}
                    ephemeral:
                      persistentVolumeClaim:
                        claimName: "claimName"
                        readOnly: true
                    serviceAccount:
                      serviceAccountName: "serviceAccountName"
                    sysprep:
                      configMap:
                        name: "name"
                      secret:
                        name: "name"
                    containerDisk:
                      image: "image"
                      imagePullPolicy: "Always"
                      imagePullSecret: "imagePullSecret"
                      path: "path"
                    hostDisk:
                      path: "path"
                      shared: true
                      type: "type"
                    secret:
                      secretName: "secretName"
                      volumeLabel: "volumeLabel"
                      optional: true
                    cloudInitNoCloud:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    configMap:
                      volumeLabel: "volumeLabel"
                      name: "name"
                      optional: true
                    dataVolume:
                      hotpluggable: true
                      name: "name"
                    name: "name"
                    persistentVolumeClaim:
                      claimName: "claimName"
                      hotpluggable: true
                      readOnly: true
                    emptyDisk: {}
                  networks:
                  - pod:
                      vmNetworkCIDR: "vmNetworkCIDR"
                      vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                    name: "name"
                    multus:
                      default: true
                      networkName: "networkName"
                  - pod:
                      vmNetworkCIDR: "vmNetworkCIDR"
                      vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                    name: "name"
                    multus:
                      default: true
                      networkName: "networkName"
                  nodeSelector:
                    key: "nodeSelector"
                  hostname: "hostname"
                  tolerations:
                  - effect: "NoExecute"
                    tolerationSeconds: 5
                    value: "value"
                    key: "key"
                    operator: "Equal"
                  - effect: "NoExecute"
                    tolerationSeconds: 5
                    value: "value"
                    key: "key"
                    operator: "Equal"
                  accessCredentials:
                  - sshPublicKey:
                      propagationMethod:
                        configDrive: {}
                        qemuGuestAgent:
                          users:
                          - "users"
                          - "users"
                      source:
                        secret:
                          secretName: "secretName"
                    userPassword:
                      propagationMethod:
                        qemuGuestAgent: {}
                      source:
                        secret:
                          secretName: "secretName"
                  - sshPublicKey:
                      propagationMethod:
                        configDrive: {}
                        qemuGuestAgent:
                          users:
                          - "users"
                          - "users"
                      source:
                        secret:
                          secretName: "secretName"
                    userPassword:
                      propagationMethod:
                        qemuGuestAgent: {}
                      source:
                        secret:
                          secretName: "secretName"
                  startStrategy: "startStrategy"
                  domain:
                    features:
                      smm:
                        enabled: true
                      kvm:
                        hidden: true
                      apic:
                        endOfInterrupt: true
                        enabled: true
                      acpi:
                        enabled: true
                      pvspinlock:
                        enabled: true
                      hyperv:
                        vpindex:
                          enabled: true
                        ipi:
                          enabled: true
                        reenlightenment:
                          enabled: true
                        runtime:
                          enabled: true
                        vendorid:
                          vendorid: "vendorid"
                          enabled: true
                        evmcs:
                          enabled: true
                        synictimer:
                          direct:
                            enabled: true
                          enabled: true
                        spinlocks:
                          spinlocks: 1
                          enabled: true
                        tlbflush:
                          enabled: true
                        synic:
                          enabled: true
                        relaxed:
                          enabled: true
                        vapic:
                          enabled: true
                        reset:
                          enabled: true
                        frequencies:
                          enabled: true
                    ioThreadsPolicy: "ioThreadsPolicy"
                    memory:
                      hugepages:
                        pageSize: "pageSize"
                      guest: {}
                    devices:
                      autoattachPodInterface: true
                      interfaces:
                      - dhcpOptions:
                          ntpServers:
                          - "ntpServers"
                          - "ntpServers"
                          tftpServerName: "tftpServerName"
                          bootFileName: "bootFileName"
                          privateOptions:
                          - value: "value"
                            option: 4
                          - value: "value"
                            option: 4
                        slirp: {}
                        macvtap: {}
                        ports:
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        macAddress: "macAddress"
                        masquerade: {}
                        bootOrder: 2
                        name: "name"
                        sriov: {}
                        model: "model"
                        pciAddress: "pciAddress"
                        bridge: {}
                        tag: "tag"
                      - dhcpOptions:
                          ntpServers:
                          - "ntpServers"
                          - "ntpServers"
                          tftpServerName: "tftpServerName"
                          bootFileName: "bootFileName"
                          privateOptions:
                          - value: "value"
                            option: 4
                          - value: "value"
                            option: 4
                        slirp: {}
                        macvtap: {}
                        ports:
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        macAddress: "macAddress"
                        masquerade: {}
                        bootOrder: 2
                        name: "name"
                        sriov: {}
                        model: "model"
                        pciAddress: "pciAddress"
                        bridge: {}
                        tag: "tag"
                      disks:
                      - shareable: true
                        cache: "cache"
                        dedicatedIOThread: true
                        disk:
                          bus: "bus"
                          readonly: true
                          pciAddress: "pciAddress"
                        lun:
                          bus: "bus"
                          readonly: true
                        bootOrder: 3
                        serial: "serial"
                        io: "io"
                        name: "name"
                        tag: "tag"
                        cdrom:
                          tray: "tray"
                          bus: "bus"
                          readonly: true
                        blockSize:
                          custom:
                            physical: 9
                            logical: 7
                          matchVolume:
                            enabled: true
                      - shareable: true
                        cache: "cache"
                        dedicatedIOThread: true
                        disk:
                          bus: "bus"
                          readonly: true
                          pciAddress: "pciAddress"
                        lun:
                          bus: "bus"
                          readonly: true
                        bootOrder: 3
                        serial: "serial"
                        io: "io"
                        name: "name"
                        tag: "tag"
                        cdrom:
                          tray: "tray"
                          bus: "bus"
                          readonly: true
                        blockSize:
                          custom:
                            physical: 9
                            logical: 7
                          matchVolume:
                            enabled: true
                      inputs:
                      - bus: "bus"
                        name: "name"
                        type: "type"
                      - bus: "bus"
                        name: "name"
                        type: "type"
                      sound:
                        name: "name"
                        model: "model"
                      useVirtioTransitional: true
                      rng: {}
                      autoattachSerialConsole: true
                      filesystems:
                      - name: "name"
                        virtiofs: {}
                      - name: "name"
                        virtiofs: {}
                      hostDevices:
                      - name: "name"
                        tag: "tag"
                        deviceName: "deviceName"
                      - name: "name"
                        tag: "tag"
                        deviceName: "deviceName"
                      networkInterfaceMultiqueue: true
                      autoattachMemBalloon: true
                      tpm: {}
                      clientPassthrough: {}
                      watchdog:
                        i6300esb:
                          action: "action"
                        name: "name"
                      blockMultiQueue: true
                      gpus:
                      - name: "name"
                        tag: "tag"
                        virtualGPUOptions:
                          display:
                            enabled: true
                            ramFB:
                              enabled: true
                        deviceName: "deviceName"
                      - name: "name"
                        tag: "tag"
                        virtualGPUOptions:
                          display:
                            enabled: true
                            ramFB:
                              enabled: true
                        deviceName: "deviceName"
                      disableHotplug: true
                      autoattachGraphicsDevice: true
                    machine:
                      type: "type"
                    cpu:
                      features:
                      - name: "name"
                        policy: "policy"
                      - name: "name"
                        policy: "policy"
                      realtime:
                        mask: "mask"
                      cores: 5
                      dedicatedCpuPlacement: true
                      numa:
                        guestMappingPassthrough: {}
                      threads: 2
                      model: "model"
                      sockets: 5
                      isolateEmulatorThread: true
                    resources:
                      overcommitGuestOverhead: true
                      requests: {}
                      limits: {}
                    chassis:
                      serial: "serial"
                      asset: "asset"
                      sku: "sku"
                      version: "version"
                      manufacturer: "manufacturer"
                    clock:
                      timer:
                        rtc:
                          tickPolicy: "tickPolicy"
                          present: true
                          track: "track"
                        kvm:
                          present: true
                        hpet:
                          tickPolicy: "tickPolicy"
                          present: true
                        pit:
                          tickPolicy: "tickPolicy"
                          present: true
                        hyperv:
                          present: true
                      utc:
                        offsetSeconds: 1
                      timezone: "timezone"
                    firmware:
                      serial: "serial"
                      bootloader:
                        bios:
                          useSerial: true
                        efi:
                          secureBoot: true
                      uuid: "uuid"
                      kernelBoot:
                        container:
                          image: "image"
                          imagePullPolicy: "Always"
                          imagePullSecret: "imagePullSecret"
                          initrdPath: "initrdPath"
                          kernelPath: "kernelPath"
                        kernelArgs: "kernelArgs"
                    launchSecurity:
                      sev: {}
                  readinessProbe:
                    failureThreshold: 1
                    periodSeconds: 6
                    tcpSocket:
                      host: "host"
                    timeoutSeconds: 1
                    guestAgentPing: {}
                    successThreshold: 7
                    initialDelaySeconds: 1
                    exec:
                      command:
                      - "command"
                      - "command"
                    httpGet:
                      path: "path"
                      scheme: "HTTP"
                      port: {}
                      host: "host"
                      httpHeaders:
                      - name: "name"
                        value: "value"
                      - name: "name"
                        value: "value"
                  subdomain: "subdomain"
                  evictionStrategy: "evictionStrategy"
                  schedulerName: "schedulerName"
                  affinity:
                    nodeAffinity:
                      requiredDuringSchedulingIgnoredDuringExecution:
                        nodeSelectorTerms:
                        - matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                        - matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                      preferredDuringSchedulingIgnoredDuringExecution:
                      - preference:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                        weight: 0
                      - preference:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                        weight: 0
                    podAffinity:
                      requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      preferredDuringSchedulingIgnoredDuringExecution:
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
                    podAntiAffinity:
                      requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      preferredDuringSchedulingIgnoredDuringExecution:
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
              dataVolumeTemplates:
              - metadata:
                  generation: 6
                  finalizers:
                  - "finalizers"
                  - "finalizers"
                  resourceVersion: "resourceVersion"
                  annotations:
                    key: "annotations"
                  generateName: "generateName"
                  labels:
                    key: "labels"
                  ownerReferences:
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  selfLink: "selfLink"
                  deletionGracePeriodSeconds: 0
                  uid: "uid"
                  managedFields:
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  clusterName: "clusterName"
                  creationTimestamp: {}
                  name: "name"
                  namespace: "namespace"
                apiVersion: "apiVersion"
                kind: "kind"
                spec:
                  finalCheckpoint: true
                  preallocation: true
                  priorityClassName: "priorityClassName"
                  checkpoints:
                  - current: "current"
                    previous: "previous"
                  - current: "current"
                    previous: "previous"
                  source:
                    s3:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    registry:
                      imageStream: "imageStream"
                      pullMethod: "pullMethod"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    vddk:
                      backingFile: "backingFile"
                      initImageURL: "initImageURL"
                      secretRef: "secretRef"
                      thumbprint: "thumbprint"
                      uuid: "uuid"
                      url: "url"
                    blank: {}
                    imageio:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      diskId: "diskId"
                      url: "url"
                    upload: {}
                    http:
                      secretExtraHeaders:
                      - "secretExtraHeaders"
                      - "secretExtraHeaders"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      extraHeaders:
                      - "extraHeaders"
                      - "extraHeaders"
                      url: "url"
                    pvc:
                      name: "name"
                      namespace: "namespace"
                  storage:
                    storageClassName: "storageClassName"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  pvc:
                    storageClassName: "storageClassName"
                    dataSourceRef:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  sourceRef:
                    kind: "kind"
                    name: "name"
                    namespace: "namespace"
                  contentType: "contentType"
                status: {}
              - metadata:
                  generation: 6
                  finalizers:
                  - "finalizers"
                  - "finalizers"
                  resourceVersion: "resourceVersion"
                  annotations:
                    key: "annotations"
                  generateName: "generateName"
                  labels:
                    key: "labels"
                  ownerReferences:
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  selfLink: "selfLink"
                  deletionGracePeriodSeconds: 0
                  uid: "uid"
                  managedFields:
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  clusterName: "clusterName"
                  creationTimestamp: {}
                  name: "name"
                  namespace: "namespace"
                apiVersion: "apiVersion"
                kind: "kind"
                spec:
                  finalCheckpoint: true
                  preallocation: true
                  priorityClassName: "priorityClassName"
                  checkpoints:
                  - current: "current"
                    previous: "previous"
                  - current: "current"
                    previous: "previous"
                  source:
                    s3:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    registry:
                      imageStream: "imageStream"
                      pullMethod: "pullMethod"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    vddk:
                      backingFile: "backingFile"
                      initImageURL: "initImageURL"
                      secretRef: "secretRef"
                      thumbprint: "thumbprint"
                      uuid: "uuid"
                      url: "url"
                    blank: {}
                    imageio:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      diskId: "diskId"
                      url: "url"
                    upload: {}
                    http:
                      secretExtraHeaders:
                      - "secretExtraHeaders"
                      - "secretExtraHeaders"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      extraHeaders:
                      - "extraHeaders"
                      - "extraHeaders"
                      url: "url"
                    pvc:
                      name: "name"
                      namespace: "namespace"
                  storage:
                    storageClassName: "storageClassName"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  pvc:
                    storageClassName: "storageClassName"
                    dataSourceRef:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  sourceRef:
                    kind: "kind"
                    name: "name"
                    namespace: "namespace"
                  contentType: "contentType"
                status: {}
              runStrategy: "runStrategy"
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          error:
            message: "message"
          volumeBackups:
          - volumeName: "volumeName"
            longhornBackupName: "longhornBackupName"
            name: "name"
            readyToUse: true
            persistentVolumeClaim:
              metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              spec:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
            error:
              message: "message"
          - volumeName: "volumeName"
            longhornBackupName: "longhornBackupName"
            name: "name"
            readyToUse: true
            persistentVolumeClaim:
              metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              spec:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
            error:
              message: "message"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          source:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
        status:
          sourceUID: "sourceUID"
          backupTarget:
            bucketRegion: "bucketRegion"
            bucketName: "bucketName"
            endpoint: "endpoint"
          creationTime: {}
          secretBackups:
          - data:
              key: "data"
            name: "name"
          - data:
              key: "data"
            name: "name"
          readyToUse: true
          source:
            metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            spec:
              flavor:
                kind: "kind"
                name: "name"
              running: true
              template:
                metadata:
                  generation: 6
                  finalizers:
                  - "finalizers"
                  - "finalizers"
                  resourceVersion: "resourceVersion"
                  annotations:
                    key: "annotations"
                  generateName: "generateName"
                  labels:
                    key: "labels"
                  ownerReferences:
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  selfLink: "selfLink"
                  deletionGracePeriodSeconds: 0
                  uid: "uid"
                  managedFields:
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  clusterName: "clusterName"
                  creationTimestamp: {}
                  name: "name"
                  namespace: "namespace"
                spec:
                  dnsPolicy: "ClusterFirst"
                  livenessProbe:
                    failureThreshold: 1
                    periodSeconds: 6
                    tcpSocket:
                      host: "host"
                    timeoutSeconds: 1
                    guestAgentPing: {}
                    successThreshold: 7
                    initialDelaySeconds: 1
                    exec:
                      command:
                      - "command"
                      - "command"
                    httpGet:
                      path: "path"
                      scheme: "HTTP"
                      port: {}
                      host: "host"
                      httpHeaders:
                      - name: "name"
                        value: "value"
                      - name: "name"
                        value: "value"
                  terminationGracePeriodSeconds: 4
                  dnsConfig:
                    searches:
                    - "searches"
                    - "searches"
                    nameservers:
                    - "nameservers"
                    - "nameservers"
                    options:
                    - name: "name"
                      value: "value"
                    - name: "name"
                      value: "value"
                  priorityClassName: "priorityClassName"
                  volumes:
                  - downwardAPI:
                      volumeLabel: "volumeLabel"
                      fields:
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                    cloudInitConfigDrive:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    downwardMetrics: {}
                    ephemeral:
                      persistentVolumeClaim:
                        claimName: "claimName"
                        readOnly: true
                    serviceAccount:
                      serviceAccountName: "serviceAccountName"
                    sysprep:
                      configMap:
                        name: "name"
                      secret:
                        name: "name"
                    containerDisk:
                      image: "image"
                      imagePullPolicy: "Always"
                      imagePullSecret: "imagePullSecret"
                      path: "path"
                    hostDisk:
                      path: "path"
                      shared: true
                      type: "type"
                    secret:
                      secretName: "secretName"
                      volumeLabel: "volumeLabel"
                      optional: true
                    cloudInitNoCloud:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    configMap:
                      volumeLabel: "volumeLabel"
                      name: "name"
                      optional: true
                    dataVolume:
                      hotpluggable: true
                      name: "name"
                    name: "name"
                    persistentVolumeClaim:
                      claimName: "claimName"
                      hotpluggable: true
                      readOnly: true
                    emptyDisk: {}
                  - downwardAPI:
                      volumeLabel: "volumeLabel"
                      fields:
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                    cloudInitConfigDrive:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    downwardMetrics: {}
                    ephemeral:
                      persistentVolumeClaim:
                        claimName: "claimName"
                        readOnly: true
                    serviceAccount:
                      serviceAccountName: "serviceAccountName"
                    sysprep:
                      configMap:
                        name: "name"
                      secret:
                        name: "name"
                    containerDisk:
                      image: "image"
                      imagePullPolicy: "Always"
                      imagePullSecret: "imagePullSecret"
                      path: "path"
                    hostDisk:
                      path: "path"
                      shared: true
                      type: "type"
                    secret:
                      secretName: "secretName"
                      volumeLabel: "volumeLabel"
                      optional: true
                    cloudInitNoCloud:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    configMap:
                      volumeLabel: "volumeLabel"
                      name: "name"
                      optional: true
                    dataVolume:
                      hotpluggable: true
                      name: "name"
                    name: "name"
                    persistentVolumeClaim:
                      claimName: "claimName"
                      hotpluggable: true
                      readOnly: true
                    emptyDisk: {}
                  networks:
                  - pod:
                      vmNetworkCIDR: "vmNetworkCIDR"
                      vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                    name: "name"
                    multus:
                      default: true
                      networkName: "networkName"
                  - pod:
                      vmNetworkCIDR: "vmNetworkCIDR"
                      vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                    name: "name"
                    multus:
                      default: true
                      networkName: "networkName"
                  nodeSelector:
                    key: "nodeSelector"
                  hostname: "hostname"
                  tolerations:
                  - effect: "NoExecute"
                    tolerationSeconds: 5
                    value: "value"
                    key: "key"
                    operator: "Equal"
                  - effect: "NoExecute"
                    tolerationSeconds: 5
                    value: "value"
                    key: "key"
                    operator: "Equal"
                  accessCredentials:
                  - sshPublicKey:
                      propagationMethod:
                        configDrive: {}
                        qemuGuestAgent:
                          users:
                          - "users"
                          - "users"
                      source:
                        secret:
                          secretName: "secretName"
                    userPassword:
                      propagationMethod:
                        qemuGuestAgent: {}
                      source:
                        secret:
                          secretName: "secretName"
                  - sshPublicKey:
                      propagationMethod:
                        configDrive: {}
                        qemuGuestAgent:
                          users:
                          - "users"
                          - "users"
                      source:
                        secret:
                          secretName: "secretName"
                    userPassword:
                      propagationMethod:
                        qemuGuestAgent: {}
                      source:
                        secret:
                          secretName: "secretName"
                  startStrategy: "startStrategy"
                  domain:
                    features:
                      smm:
                        enabled: true
                      kvm:
                        hidden: true
                      apic:
                        endOfInterrupt: true
                        enabled: true
                      acpi:
                        enabled: true
                      pvspinlock:
                        enabled: true
                      hyperv:
                        vpindex:
                          enabled: true
                        ipi:
                          enabled: true
                        reenlightenment:
                          enabled: true
                        runtime:
                          enabled: true
                        vendorid:
                          vendorid: "vendorid"
                          enabled: true
                        evmcs:
                          enabled: true
                        synictimer:
                          direct:
                            enabled: true
                          enabled: true
                        spinlocks:
                          spinlocks: 1
                          enabled: true
                        tlbflush:
                          enabled: true
                        synic:
                          enabled: true
                        relaxed:
                          enabled: true
                        vapic:
                          enabled: true
                        reset:
                          enabled: true
                        frequencies:
                          enabled: true
                    ioThreadsPolicy: "ioThreadsPolicy"
                    memory:
                      hugepages:
                        pageSize: "pageSize"
                      guest: {}
                    devices:
                      autoattachPodInterface: true
                      interfaces:
                      - dhcpOptions:
                          ntpServers:
                          - "ntpServers"
                          - "ntpServers"
                          tftpServerName: "tftpServerName"
                          bootFileName: "bootFileName"
                          privateOptions:
                          - value: "value"
                            option: 4
                          - value: "value"
                            option: 4
                        slirp: {}
                        macvtap: {}
                        ports:
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        macAddress: "macAddress"
                        masquerade: {}
                        bootOrder: 2
                        name: "name"
                        sriov: {}
                        model: "model"
                        pciAddress: "pciAddress"
                        bridge: {}
                        tag: "tag"
                      - dhcpOptions:
                          ntpServers:
                          - "ntpServers"
                          - "ntpServers"
                          tftpServerName: "tftpServerName"
                          bootFileName: "bootFileName"
                          privateOptions:
                          - value: "value"
                            option: 4
                          - value: "value"
                            option: 4
                        slirp: {}
                        macvtap: {}
                        ports:
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        macAddress: "macAddress"
                        masquerade: {}
                        bootOrder: 2
                        name: "name"
                        sriov: {}
                        model: "model"
                        pciAddress: "pciAddress"
                        bridge: {}
                        tag: "tag"
                      disks:
                      - shareable: true
                        cache: "cache"
                        dedicatedIOThread: true
                        disk:
                          bus: "bus"
                          readonly: true
                          pciAddress: "pciAddress"
                        lun:
                          bus: "bus"
                          readonly: true
                        bootOrder: 3
                        serial: "serial"
                        io: "io"
                        name: "name"
                        tag: "tag"
                        cdrom:
                          tray: "tray"
                          bus: "bus"
                          readonly: true
                        blockSize:
                          custom:
                            physical: 9
                            logical: 7
                          matchVolume:
                            enabled: true
                      - shareable: true
                        cache: "cache"
                        dedicatedIOThread: true
                        disk:
                          bus: "bus"
                          readonly: true
                          pciAddress: "pciAddress"
                        lun:
                          bus: "bus"
                          readonly: true
                        bootOrder: 3
                        serial: "serial"
                        io: "io"
                        name: "name"
                        tag: "tag"
                        cdrom:
                          tray: "tray"
                          bus: "bus"
                          readonly: true
                        blockSize:
                          custom:
                            physical: 9
                            logical: 7
                          matchVolume:
                            enabled: true
                      inputs:
                      - bus: "bus"
                        name: "name"
                        type: "type"
                      - bus: "bus"
                        name: "name"
                        type: "type"
                      sound:
                        name: "name"
                        model: "model"
                      useVirtioTransitional: true
                      rng: {}
                      autoattachSerialConsole: true
                      filesystems:
                      - name: "name"
                        virtiofs: {}
                      - name: "name"
                        virtiofs: {}
                      hostDevices:
                      - name: "name"
                        tag: "tag"
                        deviceName: "deviceName"
                      - name: "name"
                        tag: "tag"
                        deviceName: "deviceName"
                      networkInterfaceMultiqueue: true
                      autoattachMemBalloon: true
                      tpm: {}
                      clientPassthrough: {}
                      watchdog:
                        i6300esb:
                          action: "action"
                        name: "name"
                      blockMultiQueue: true
                      gpus:
                      - name: "name"
                        tag: "tag"
                        virtualGPUOptions:
                          display:
                            enabled: true
                            ramFB:
                              enabled: true
                        deviceName: "deviceName"
                      - name: "name"
                        tag: "tag"
                        virtualGPUOptions:
                          display:
                            enabled: true
                            ramFB:
                              enabled: true
                        deviceName: "deviceName"
                      disableHotplug: true
                      autoattachGraphicsDevice: true
                    machine:
                      type: "type"
                    cpu:
                      features:
                      - name: "name"
                        policy: "policy"
                      - name: "name"
                        policy: "policy"
                      realtime:
                        mask: "mask"
                      cores: 5
                      dedicatedCpuPlacement: true
                      numa:
                        guestMappingPassthrough: {}
                      threads: 2
                      model: "model"
                      sockets: 5
                      isolateEmulatorThread: true
                    resources:
                      overcommitGuestOverhead: true
                      requests: {}
                      limits: {}
                    chassis:
                      serial: "serial"
                      asset: "asset"
                      sku: "sku"
                      version: "version"
                      manufacturer: "manufacturer"
                    clock:
                      timer:
                        rtc:
                          tickPolicy: "tickPolicy"
                          present: true
                          track: "track"
                        kvm:
                          present: true
                        hpet:
                          tickPolicy: "tickPolicy"
                          present: true
                        pit:
                          tickPolicy: "tickPolicy"
                          present: true
                        hyperv:
                          present: true
                      utc:
                        offsetSeconds: 1
                      timezone: "timezone"
                    firmware:
                      serial: "serial"
                      bootloader:
                        bios:
                          useSerial: true
                        efi:
                          secureBoot: true
                      uuid: "uuid"
                      kernelBoot:
                        container:
                          image: "image"
                          imagePullPolicy: "Always"
                          imagePullSecret: "imagePullSecret"
                          initrdPath: "initrdPath"
                          kernelPath: "kernelPath"
                        kernelArgs: "kernelArgs"
                    launchSecurity:
                      sev: {}
                  readinessProbe:
                    failureThreshold: 1
                    periodSeconds: 6
                    tcpSocket:
                      host: "host"
                    timeoutSeconds: 1
                    guestAgentPing: {}
                    successThreshold: 7
                    initialDelaySeconds: 1
                    exec:
                      command:
                      - "command"
                      - "command"
                    httpGet:
                      path: "path"
                      scheme: "HTTP"
                      port: {}
                      host: "host"
                      httpHeaders:
                      - name: "name"
                        value: "value"
                      - name: "name"
                        value: "value"
                  subdomain: "subdomain"
                  evictionStrategy: "evictionStrategy"
                  schedulerName: "schedulerName"
                  affinity:
                    nodeAffinity:
                      requiredDuringSchedulingIgnoredDuringExecution:
                        nodeSelectorTerms:
                        - matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                        - matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                      preferredDuringSchedulingIgnoredDuringExecution:
                      - preference:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                        weight: 0
                      - preference:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                        weight: 0
                    podAffinity:
                      requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      preferredDuringSchedulingIgnoredDuringExecution:
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
                    podAntiAffinity:
                      requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      preferredDuringSchedulingIgnoredDuringExecution:
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
              dataVolumeTemplates:
              - metadata:
                  generation: 6
                  finalizers:
                  - "finalizers"
                  - "finalizers"
                  resourceVersion: "resourceVersion"
                  annotations:
                    key: "annotations"
                  generateName: "generateName"
                  labels:
                    key: "labels"
                  ownerReferences:
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  selfLink: "selfLink"
                  deletionGracePeriodSeconds: 0
                  uid: "uid"
                  managedFields:
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  clusterName: "clusterName"
                  creationTimestamp: {}
                  name: "name"
                  namespace: "namespace"
                apiVersion: "apiVersion"
                kind: "kind"
                spec:
                  finalCheckpoint: true
                  preallocation: true
                  priorityClassName: "priorityClassName"
                  checkpoints:
                  - current: "current"
                    previous: "previous"
                  - current: "current"
                    previous: "previous"
                  source:
                    s3:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    registry:
                      imageStream: "imageStream"
                      pullMethod: "pullMethod"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    vddk:
                      backingFile: "backingFile"
                      initImageURL: "initImageURL"
                      secretRef: "secretRef"
                      thumbprint: "thumbprint"
                      uuid: "uuid"
                      url: "url"
                    blank: {}
                    imageio:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      diskId: "diskId"
                      url: "url"
                    upload: {}
                    http:
                      secretExtraHeaders:
                      - "secretExtraHeaders"
                      - "secretExtraHeaders"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      extraHeaders:
                      - "extraHeaders"
                      - "extraHeaders"
                      url: "url"
                    pvc:
                      name: "name"
                      namespace: "namespace"
                  storage:
                    storageClassName: "storageClassName"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  pvc:
                    storageClassName: "storageClassName"
                    dataSourceRef:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  sourceRef:
                    kind: "kind"
                    name: "name"
                    namespace: "namespace"
                  contentType: "contentType"
                status: {}
              - metadata:
                  generation: 6
                  finalizers:
                  - "finalizers"
                  - "finalizers"
                  resourceVersion: "resourceVersion"
                  annotations:
                    key: "annotations"
                  generateName: "generateName"
                  labels:
                    key: "labels"
                  ownerReferences:
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  selfLink: "selfLink"
                  deletionGracePeriodSeconds: 0
                  uid: "uid"
                  managedFields:
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  clusterName: "clusterName"
                  creationTimestamp: {}
                  name: "name"
                  namespace: "namespace"
                apiVersion: "apiVersion"
                kind: "kind"
                spec:
                  finalCheckpoint: true
                  preallocation: true
                  priorityClassName: "priorityClassName"
                  checkpoints:
                  - current: "current"
                    previous: "previous"
                  - current: "current"
                    previous: "previous"
                  source:
                    s3:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    registry:
                      imageStream: "imageStream"
                      pullMethod: "pullMethod"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    vddk:
                      backingFile: "backingFile"
                      initImageURL: "initImageURL"
                      secretRef: "secretRef"
                      thumbprint: "thumbprint"
                      uuid: "uuid"
                      url: "url"
                    blank: {}
                    imageio:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      diskId: "diskId"
                      url: "url"
                    upload: {}
                    http:
                      secretExtraHeaders:
                      - "secretExtraHeaders"
                      - "secretExtraHeaders"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      extraHeaders:
                      - "extraHeaders"
                      - "extraHeaders"
                      url: "url"
                    pvc:
                      name: "name"
                      namespace: "namespace"
                  storage:
                    storageClassName: "storageClassName"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  pvc:
                    storageClassName: "storageClassName"
                    dataSourceRef:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  sourceRef:
                    kind: "kind"
                    name: "name"
                    namespace: "namespace"
                  contentType: "contentType"
                status: {}
              runStrategy: "runStrategy"
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          error:
            message: "message"
          volumeBackups:
          - volumeName: "volumeName"
            longhornBackupName: "longhornBackupName"
            name: "name"
            readyToUse: true
            persistentVolumeClaim:
              metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              spec:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
            error:
              message: "message"
          - volumeName: "volumeName"
            longhornBackupName: "longhornBackupName"
            name: "name"
            readyToUse: true
            persistentVolumeClaim:
              metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              spec:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
            error:
              message: "message"
  harvesterhci.io.v1beta1.VirtualMachineBackupSpec:
    type: "object"
    required:
    - "source"
    properties:
      source:
        $ref: "#/definitions/k8s.io.v1.TypedLocalObjectReference"
    example:
      source:
        apiGroup: "apiGroup"
        kind: "kind"
        name: "name"
  harvesterhci.io.v1beta1.VirtualMachineBackupStatus:
    type: "object"
    properties:
      backupTarget:
        $ref: "#/definitions/harvesterhci.io.v1beta1.BackupTarget"
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.Condition"
      creationTime:
        $ref: "#/definitions/k8s.io.v1.Time"
      error:
        $ref: "#/definitions/harvesterhci.io.v1beta1.Error"
      readyToUse:
        type: "boolean"
      secretBackups:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.SecretBackup"
      source:
        description: "SourceSpec contains the vm spec source of the backup target"
        $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineSourceSpec"
      sourceUID:
        type: "string"
      volumeBackups:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VolumeBackup"
    description: "VirtualMachineBackupStatus is the status for a VirtualMachineBackup\
      \ resource"
    example:
      sourceUID: "sourceUID"
      backupTarget:
        bucketRegion: "bucketRegion"
        bucketName: "bucketName"
        endpoint: "endpoint"
      creationTime: {}
      secretBackups:
      - data:
          key: "data"
        name: "name"
      - data:
          key: "data"
        name: "name"
      readyToUse: true
      source:
        metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        spec:
          flavor:
            kind: "kind"
            name: "name"
          running: true
          template:
            metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            spec:
              dnsPolicy: "ClusterFirst"
              livenessProbe:
                failureThreshold: 1
                periodSeconds: 6
                tcpSocket:
                  host: "host"
                timeoutSeconds: 1
                guestAgentPing: {}
                successThreshold: 7
                initialDelaySeconds: 1
                exec:
                  command:
                  - "command"
                  - "command"
                httpGet:
                  path: "path"
                  scheme: "HTTP"
                  port: {}
                  host: "host"
                  httpHeaders:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
              terminationGracePeriodSeconds: 4
              dnsConfig:
                searches:
                - "searches"
                - "searches"
                nameservers:
                - "nameservers"
                - "nameservers"
                options:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              priorityClassName: "priorityClassName"
              volumes:
              - downwardAPI:
                  volumeLabel: "volumeLabel"
                  fields:
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                cloudInitConfigDrive:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                downwardMetrics: {}
                ephemeral:
                  persistentVolumeClaim:
                    claimName: "claimName"
                    readOnly: true
                serviceAccount:
                  serviceAccountName: "serviceAccountName"
                sysprep:
                  configMap:
                    name: "name"
                  secret:
                    name: "name"
                containerDisk:
                  image: "image"
                  imagePullPolicy: "Always"
                  imagePullSecret: "imagePullSecret"
                  path: "path"
                hostDisk:
                  path: "path"
                  shared: true
                  type: "type"
                secret:
                  secretName: "secretName"
                  volumeLabel: "volumeLabel"
                  optional: true
                cloudInitNoCloud:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                configMap:
                  volumeLabel: "volumeLabel"
                  name: "name"
                  optional: true
                dataVolume:
                  hotpluggable: true
                  name: "name"
                name: "name"
                persistentVolumeClaim:
                  claimName: "claimName"
                  hotpluggable: true
                  readOnly: true
                emptyDisk: {}
              - downwardAPI:
                  volumeLabel: "volumeLabel"
                  fields:
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                cloudInitConfigDrive:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                downwardMetrics: {}
                ephemeral:
                  persistentVolumeClaim:
                    claimName: "claimName"
                    readOnly: true
                serviceAccount:
                  serviceAccountName: "serviceAccountName"
                sysprep:
                  configMap:
                    name: "name"
                  secret:
                    name: "name"
                containerDisk:
                  image: "image"
                  imagePullPolicy: "Always"
                  imagePullSecret: "imagePullSecret"
                  path: "path"
                hostDisk:
                  path: "path"
                  shared: true
                  type: "type"
                secret:
                  secretName: "secretName"
                  volumeLabel: "volumeLabel"
                  optional: true
                cloudInitNoCloud:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                configMap:
                  volumeLabel: "volumeLabel"
                  name: "name"
                  optional: true
                dataVolume:
                  hotpluggable: true
                  name: "name"
                name: "name"
                persistentVolumeClaim:
                  claimName: "claimName"
                  hotpluggable: true
                  readOnly: true
                emptyDisk: {}
              networks:
              - pod:
                  vmNetworkCIDR: "vmNetworkCIDR"
                  vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                name: "name"
                multus:
                  default: true
                  networkName: "networkName"
              - pod:
                  vmNetworkCIDR: "vmNetworkCIDR"
                  vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                name: "name"
                multus:
                  default: true
                  networkName: "networkName"
              nodeSelector:
                key: "nodeSelector"
              hostname: "hostname"
              tolerations:
              - effect: "NoExecute"
                tolerationSeconds: 5
                value: "value"
                key: "key"
                operator: "Equal"
              - effect: "NoExecute"
                tolerationSeconds: 5
                value: "value"
                key: "key"
                operator: "Equal"
              accessCredentials:
              - sshPublicKey:
                  propagationMethod:
                    configDrive: {}
                    qemuGuestAgent:
                      users:
                      - "users"
                      - "users"
                  source:
                    secret:
                      secretName: "secretName"
                userPassword:
                  propagationMethod:
                    qemuGuestAgent: {}
                  source:
                    secret:
                      secretName: "secretName"
              - sshPublicKey:
                  propagationMethod:
                    configDrive: {}
                    qemuGuestAgent:
                      users:
                      - "users"
                      - "users"
                  source:
                    secret:
                      secretName: "secretName"
                userPassword:
                  propagationMethod:
                    qemuGuestAgent: {}
                  source:
                    secret:
                      secretName: "secretName"
              startStrategy: "startStrategy"
              domain:
                features:
                  smm:
                    enabled: true
                  kvm:
                    hidden: true
                  apic:
                    endOfInterrupt: true
                    enabled: true
                  acpi:
                    enabled: true
                  pvspinlock:
                    enabled: true
                  hyperv:
                    vpindex:
                      enabled: true
                    ipi:
                      enabled: true
                    reenlightenment:
                      enabled: true
                    runtime:
                      enabled: true
                    vendorid:
                      vendorid: "vendorid"
                      enabled: true
                    evmcs:
                      enabled: true
                    synictimer:
                      direct:
                        enabled: true
                      enabled: true
                    spinlocks:
                      spinlocks: 1
                      enabled: true
                    tlbflush:
                      enabled: true
                    synic:
                      enabled: true
                    relaxed:
                      enabled: true
                    vapic:
                      enabled: true
                    reset:
                      enabled: true
                    frequencies:
                      enabled: true
                ioThreadsPolicy: "ioThreadsPolicy"
                memory:
                  hugepages:
                    pageSize: "pageSize"
                  guest: {}
                devices:
                  autoattachPodInterface: true
                  interfaces:
                  - dhcpOptions:
                      ntpServers:
                      - "ntpServers"
                      - "ntpServers"
                      tftpServerName: "tftpServerName"
                      bootFileName: "bootFileName"
                      privateOptions:
                      - value: "value"
                        option: 4
                      - value: "value"
                        option: 4
                    slirp: {}
                    macvtap: {}
                    ports:
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    macAddress: "macAddress"
                    masquerade: {}
                    bootOrder: 2
                    name: "name"
                    sriov: {}
                    model: "model"
                    pciAddress: "pciAddress"
                    bridge: {}
                    tag: "tag"
                  - dhcpOptions:
                      ntpServers:
                      - "ntpServers"
                      - "ntpServers"
                      tftpServerName: "tftpServerName"
                      bootFileName: "bootFileName"
                      privateOptions:
                      - value: "value"
                        option: 4
                      - value: "value"
                        option: 4
                    slirp: {}
                    macvtap: {}
                    ports:
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    macAddress: "macAddress"
                    masquerade: {}
                    bootOrder: 2
                    name: "name"
                    sriov: {}
                    model: "model"
                    pciAddress: "pciAddress"
                    bridge: {}
                    tag: "tag"
                  disks:
                  - shareable: true
                    cache: "cache"
                    dedicatedIOThread: true
                    disk:
                      bus: "bus"
                      readonly: true
                      pciAddress: "pciAddress"
                    lun:
                      bus: "bus"
                      readonly: true
                    bootOrder: 3
                    serial: "serial"
                    io: "io"
                    name: "name"
                    tag: "tag"
                    cdrom:
                      tray: "tray"
                      bus: "bus"
                      readonly: true
                    blockSize:
                      custom:
                        physical: 9
                        logical: 7
                      matchVolume:
                        enabled: true
                  - shareable: true
                    cache: "cache"
                    dedicatedIOThread: true
                    disk:
                      bus: "bus"
                      readonly: true
                      pciAddress: "pciAddress"
                    lun:
                      bus: "bus"
                      readonly: true
                    bootOrder: 3
                    serial: "serial"
                    io: "io"
                    name: "name"
                    tag: "tag"
                    cdrom:
                      tray: "tray"
                      bus: "bus"
                      readonly: true
                    blockSize:
                      custom:
                        physical: 9
                        logical: 7
                      matchVolume:
                        enabled: true
                  inputs:
                  - bus: "bus"
                    name: "name"
                    type: "type"
                  - bus: "bus"
                    name: "name"
                    type: "type"
                  sound:
                    name: "name"
                    model: "model"
                  useVirtioTransitional: true
                  rng: {}
                  autoattachSerialConsole: true
                  filesystems:
                  - name: "name"
                    virtiofs: {}
                  - name: "name"
                    virtiofs: {}
                  hostDevices:
                  - name: "name"
                    tag: "tag"
                    deviceName: "deviceName"
                  - name: "name"
                    tag: "tag"
                    deviceName: "deviceName"
                  networkInterfaceMultiqueue: true
                  autoattachMemBalloon: true
                  tpm: {}
                  clientPassthrough: {}
                  watchdog:
                    i6300esb:
                      action: "action"
                    name: "name"
                  blockMultiQueue: true
                  gpus:
                  - name: "name"
                    tag: "tag"
                    virtualGPUOptions:
                      display:
                        enabled: true
                        ramFB:
                          enabled: true
                    deviceName: "deviceName"
                  - name: "name"
                    tag: "tag"
                    virtualGPUOptions:
                      display:
                        enabled: true
                        ramFB:
                          enabled: true
                    deviceName: "deviceName"
                  disableHotplug: true
                  autoattachGraphicsDevice: true
                machine:
                  type: "type"
                cpu:
                  features:
                  - name: "name"
                    policy: "policy"
                  - name: "name"
                    policy: "policy"
                  realtime:
                    mask: "mask"
                  cores: 5
                  dedicatedCpuPlacement: true
                  numa:
                    guestMappingPassthrough: {}
                  threads: 2
                  model: "model"
                  sockets: 5
                  isolateEmulatorThread: true
                resources:
                  overcommitGuestOverhead: true
                  requests: {}
                  limits: {}
                chassis:
                  serial: "serial"
                  asset: "asset"
                  sku: "sku"
                  version: "version"
                  manufacturer: "manufacturer"
                clock:
                  timer:
                    rtc:
                      tickPolicy: "tickPolicy"
                      present: true
                      track: "track"
                    kvm:
                      present: true
                    hpet:
                      tickPolicy: "tickPolicy"
                      present: true
                    pit:
                      tickPolicy: "tickPolicy"
                      present: true
                    hyperv:
                      present: true
                  utc:
                    offsetSeconds: 1
                  timezone: "timezone"
                firmware:
                  serial: "serial"
                  bootloader:
                    bios:
                      useSerial: true
                    efi:
                      secureBoot: true
                  uuid: "uuid"
                  kernelBoot:
                    container:
                      image: "image"
                      imagePullPolicy: "Always"
                      imagePullSecret: "imagePullSecret"
                      initrdPath: "initrdPath"
                      kernelPath: "kernelPath"
                    kernelArgs: "kernelArgs"
                launchSecurity:
                  sev: {}
              readinessProbe:
                failureThreshold: 1
                periodSeconds: 6
                tcpSocket:
                  host: "host"
                timeoutSeconds: 1
                guestAgentPing: {}
                successThreshold: 7
                initialDelaySeconds: 1
                exec:
                  command:
                  - "command"
                  - "command"
                httpGet:
                  path: "path"
                  scheme: "HTTP"
                  port: {}
                  host: "host"
                  httpHeaders:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
              subdomain: "subdomain"
              evictionStrategy: "evictionStrategy"
              schedulerName: "schedulerName"
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                    - matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                    - matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - preference:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                    weight: 0
                  - preference:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                    weight: 0
                podAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
                podAntiAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
          dataVolumeTemplates:
          - metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            apiVersion: "apiVersion"
            kind: "kind"
            spec:
              finalCheckpoint: true
              preallocation: true
              priorityClassName: "priorityClassName"
              checkpoints:
              - current: "current"
                previous: "previous"
              - current: "current"
                previous: "previous"
              source:
                s3:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                registry:
                  imageStream: "imageStream"
                  pullMethod: "pullMethod"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                vddk:
                  backingFile: "backingFile"
                  initImageURL: "initImageURL"
                  secretRef: "secretRef"
                  thumbprint: "thumbprint"
                  uuid: "uuid"
                  url: "url"
                blank: {}
                imageio:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  diskId: "diskId"
                  url: "url"
                upload: {}
                http:
                  secretExtraHeaders:
                  - "secretExtraHeaders"
                  - "secretExtraHeaders"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  extraHeaders:
                  - "extraHeaders"
                  - "extraHeaders"
                  url: "url"
                pvc:
                  name: "name"
                  namespace: "namespace"
              storage:
                storageClassName: "storageClassName"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              pvc:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              sourceRef:
                kind: "kind"
                name: "name"
                namespace: "namespace"
              contentType: "contentType"
            status: {}
          - metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            apiVersion: "apiVersion"
            kind: "kind"
            spec:
              finalCheckpoint: true
              preallocation: true
              priorityClassName: "priorityClassName"
              checkpoints:
              - current: "current"
                previous: "previous"
              - current: "current"
                previous: "previous"
              source:
                s3:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                registry:
                  imageStream: "imageStream"
                  pullMethod: "pullMethod"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                vddk:
                  backingFile: "backingFile"
                  initImageURL: "initImageURL"
                  secretRef: "secretRef"
                  thumbprint: "thumbprint"
                  uuid: "uuid"
                  url: "url"
                blank: {}
                imageio:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  diskId: "diskId"
                  url: "url"
                upload: {}
                http:
                  secretExtraHeaders:
                  - "secretExtraHeaders"
                  - "secretExtraHeaders"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  extraHeaders:
                  - "extraHeaders"
                  - "extraHeaders"
                  url: "url"
                pvc:
                  name: "name"
                  namespace: "namespace"
              storage:
                storageClassName: "storageClassName"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              pvc:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              sourceRef:
                kind: "kind"
                name: "name"
                namespace: "namespace"
              contentType: "contentType"
            status: {}
          runStrategy: "runStrategy"
      conditions:
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      error:
        message: "message"
      volumeBackups:
      - volumeName: "volumeName"
        longhornBackupName: "longhornBackupName"
        name: "name"
        readyToUse: true
        persistentVolumeClaim:
          metadata:
            generation: 6
            finalizers:
            - "finalizers"
            - "finalizers"
            resourceVersion: "resourceVersion"
            annotations:
              key: "annotations"
            generateName: "generateName"
            labels:
              key: "labels"
            ownerReferences:
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            selfLink: "selfLink"
            deletionGracePeriodSeconds: 0
            uid: "uid"
            managedFields:
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            clusterName: "clusterName"
            creationTimestamp: {}
            name: "name"
            namespace: "namespace"
          spec:
            storageClassName: "storageClassName"
            dataSourceRef:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeName: "volumeName"
            resources:
              requests: {}
              limits:
                key: {}
            selector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            accessModes:
            - "accessModes"
            - "accessModes"
            dataSource:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeMode: "volumeMode"
        error:
          message: "message"
      - volumeName: "volumeName"
        longhornBackupName: "longhornBackupName"
        name: "name"
        readyToUse: true
        persistentVolumeClaim:
          metadata:
            generation: 6
            finalizers:
            - "finalizers"
            - "finalizers"
            resourceVersion: "resourceVersion"
            annotations:
              key: "annotations"
            generateName: "generateName"
            labels:
              key: "labels"
            ownerReferences:
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            selfLink: "selfLink"
            deletionGracePeriodSeconds: 0
            uid: "uid"
            managedFields:
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            clusterName: "clusterName"
            creationTimestamp: {}
            name: "name"
            namespace: "namespace"
          spec:
            storageClassName: "storageClassName"
            dataSourceRef:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeName: "volumeName"
            resources:
              requests: {}
              limits:
                key: {}
            selector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            accessModes:
            - "accessModes"
            - "accessModes"
            dataSource:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeMode: "volumeMode"
        error:
          message: "message"
  harvesterhci.io.v1beta1.VirtualMachineImage:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    - "spec"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImageSpec"
      status:
        $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImageStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        pvcNamespace: "pvcNamespace"
        pvcName: "pvcName"
        sourceType: "sourceType"
        displayName: "displayName"
        checksum: "checksum"
        description: "description"
        url: "url"
      status:
        appliedUrl: "appliedUrl"
        size: 6
        storageClassName: "storageClassName"
        progress: 0
        conditions:
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
  harvesterhci.io.v1beta1.VirtualMachineImageList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    - "metadata"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineImage"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "VirtualMachineImageList is a list of VirtualMachineImage resources"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          pvcNamespace: "pvcNamespace"
          pvcName: "pvcName"
          sourceType: "sourceType"
          displayName: "displayName"
          checksum: "checksum"
          description: "description"
          url: "url"
        status:
          appliedUrl: "appliedUrl"
          size: 6
          storageClassName: "storageClassName"
          progress: 0
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          pvcNamespace: "pvcNamespace"
          pvcName: "pvcName"
          sourceType: "sourceType"
          displayName: "displayName"
          checksum: "checksum"
          description: "description"
          url: "url"
        status:
          appliedUrl: "appliedUrl"
          size: 6
          storageClassName: "storageClassName"
          progress: 0
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
  harvesterhci.io.v1beta1.VirtualMachineImageSpec:
    type: "object"
    required:
    - "displayName"
    - "sourceType"
    properties:
      checksum:
        type: "string"
        default: ""
      description:
        type: "string"
      displayName:
        type: "string"
        default: ""
      pvcName:
        type: "string"
        default: ""
      pvcNamespace:
        type: "string"
        default: ""
      sourceType:
        type: "string"
        default: ""
      url:
        type: "string"
        default: ""
    example:
      pvcNamespace: "pvcNamespace"
      pvcName: "pvcName"
      sourceType: "sourceType"
      displayName: "displayName"
      checksum: "checksum"
      description: "description"
      url: "url"
  harvesterhci.io.v1beta1.VirtualMachineImageStatus:
    type: "object"
    properties:
      appliedUrl:
        type: "string"
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.Condition"
      progress:
        type: "integer"
        format: "int32"
      size:
        type: "integer"
        format: "int64"
      storageClassName:
        type: "string"
    example:
      appliedUrl: "appliedUrl"
      size: 6
      storageClassName: "storageClassName"
      progress: 0
      conditions:
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
  harvesterhci.io.v1beta1.VirtualMachineRestore:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    - "spec"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestoreSpec"
      status:
        $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestoreStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        virtualMachineBackupName: "virtualMachineBackupName"
        newVM: true
        virtualMachineBackupNamespace: "virtualMachineBackupNamespace"
        deletionPolicy: "deletionPolicy"
        target:
          apiGroup: "apiGroup"
          kind: "kind"
          name: "name"
      status:
        restoreTime: {}
        deletedVolumes:
        - "deletedVolumes"
        - "deletedVolumes"
        restores:
        - volumeBackupName: "volumeBackupName"
          volumeName: "volumeName"
          persistentVolumeClaimSpec:
            metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            spec:
              storageClassName: "storageClassName"
              dataSourceRef:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeName: "volumeName"
              resources:
                requests: {}
                limits:
                  key: {}
              selector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              accessModes:
              - "accessModes"
              - "accessModes"
              dataSource:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeMode: "volumeMode"
        - volumeBackupName: "volumeBackupName"
          volumeName: "volumeName"
          persistentVolumeClaimSpec:
            metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            spec:
              storageClassName: "storageClassName"
              dataSourceRef:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeName: "volumeName"
              resources:
                requests: {}
                limits:
                  key: {}
              selector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              accessModes:
              - "accessModes"
              - "accessModes"
              dataSource:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeMode: "volumeMode"
        complete: true
        conditions:
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
        targetUID: "targetUID"
  harvesterhci.io.v1beta1.VirtualMachineRestoreList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    - "metadata"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineRestore"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "VirtualMachineRestoreList is a list of VirtualMachineRestore resources"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          virtualMachineBackupName: "virtualMachineBackupName"
          newVM: true
          virtualMachineBackupNamespace: "virtualMachineBackupNamespace"
          deletionPolicy: "deletionPolicy"
          target:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
        status:
          restoreTime: {}
          deletedVolumes:
          - "deletedVolumes"
          - "deletedVolumes"
          restores:
          - volumeBackupName: "volumeBackupName"
            volumeName: "volumeName"
            persistentVolumeClaimSpec:
              metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              spec:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
          - volumeBackupName: "volumeBackupName"
            volumeName: "volumeName"
            persistentVolumeClaimSpec:
              metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              spec:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
          complete: true
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          targetUID: "targetUID"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          virtualMachineBackupName: "virtualMachineBackupName"
          newVM: true
          virtualMachineBackupNamespace: "virtualMachineBackupNamespace"
          deletionPolicy: "deletionPolicy"
          target:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
        status:
          restoreTime: {}
          deletedVolumes:
          - "deletedVolumes"
          - "deletedVolumes"
          restores:
          - volumeBackupName: "volumeBackupName"
            volumeName: "volumeName"
            persistentVolumeClaimSpec:
              metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              spec:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
          - volumeBackupName: "volumeBackupName"
            volumeName: "volumeName"
            persistentVolumeClaimSpec:
              metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              spec:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
          complete: true
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          targetUID: "targetUID"
  harvesterhci.io.v1beta1.VirtualMachineRestoreSpec:
    type: "object"
    required:
    - "target"
    - "virtualMachineBackupName"
    - "virtualMachineBackupNamespace"
    properties:
      deletionPolicy:
        type: "string"
      newVM:
        type: "boolean"
      target:
        description: "initially only VirtualMachine type supported"
        $ref: "#/definitions/k8s.io.v1.TypedLocalObjectReference"
      virtualMachineBackupName:
        type: "string"
        default: ""
      virtualMachineBackupNamespace:
        type: "string"
        default: ""
    description: "VirtualMachineRestoreSpec is the spec for a VirtualMachineRestore\
      \ resource"
    example:
      virtualMachineBackupName: "virtualMachineBackupName"
      newVM: true
      virtualMachineBackupNamespace: "virtualMachineBackupNamespace"
      deletionPolicy: "deletionPolicy"
      target:
        apiGroup: "apiGroup"
        kind: "kind"
        name: "name"
  harvesterhci.io.v1beta1.VirtualMachineRestoreStatus:
    type: "object"
    properties:
      complete:
        type: "boolean"
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.Condition"
      deletedVolumes:
        type: "array"
        items:
          type: "string"
          default: ""
      restoreTime:
        $ref: "#/definitions/k8s.io.v1.Time"
      restores:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VolumeRestore"
      targetUID:
        type: "string"
    description: "VirtualMachineRestoreStatus is the spec for a VirtualMachineRestore\
      \ resource"
    example:
      restoreTime: {}
      deletedVolumes:
      - "deletedVolumes"
      - "deletedVolumes"
      restores:
      - volumeBackupName: "volumeBackupName"
        volumeName: "volumeName"
        persistentVolumeClaimSpec:
          metadata:
            generation: 6
            finalizers:
            - "finalizers"
            - "finalizers"
            resourceVersion: "resourceVersion"
            annotations:
              key: "annotations"
            generateName: "generateName"
            labels:
              key: "labels"
            ownerReferences:
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            selfLink: "selfLink"
            deletionGracePeriodSeconds: 0
            uid: "uid"
            managedFields:
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            clusterName: "clusterName"
            creationTimestamp: {}
            name: "name"
            namespace: "namespace"
          spec:
            storageClassName: "storageClassName"
            dataSourceRef:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeName: "volumeName"
            resources:
              requests: {}
              limits:
                key: {}
            selector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            accessModes:
            - "accessModes"
            - "accessModes"
            dataSource:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeMode: "volumeMode"
      - volumeBackupName: "volumeBackupName"
        volumeName: "volumeName"
        persistentVolumeClaimSpec:
          metadata:
            generation: 6
            finalizers:
            - "finalizers"
            - "finalizers"
            resourceVersion: "resourceVersion"
            annotations:
              key: "annotations"
            generateName: "generateName"
            labels:
              key: "labels"
            ownerReferences:
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            selfLink: "selfLink"
            deletionGracePeriodSeconds: 0
            uid: "uid"
            managedFields:
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            clusterName: "clusterName"
            creationTimestamp: {}
            name: "name"
            namespace: "namespace"
          spec:
            storageClassName: "storageClassName"
            dataSourceRef:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeName: "volumeName"
            resources:
              requests: {}
              limits:
                key: {}
            selector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            accessModes:
            - "accessModes"
            - "accessModes"
            dataSource:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeMode: "volumeMode"
      complete: true
      conditions:
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      targetUID: "targetUID"
  harvesterhci.io.v1beta1.VirtualMachineSourceSpec:
    type: "object"
    properties:
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineSpec"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      spec:
        flavor:
          kind: "kind"
          name: "name"
        running: true
        template:
          metadata:
            generation: 6
            finalizers:
            - "finalizers"
            - "finalizers"
            resourceVersion: "resourceVersion"
            annotations:
              key: "annotations"
            generateName: "generateName"
            labels:
              key: "labels"
            ownerReferences:
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            selfLink: "selfLink"
            deletionGracePeriodSeconds: 0
            uid: "uid"
            managedFields:
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            clusterName: "clusterName"
            creationTimestamp: {}
            name: "name"
            namespace: "namespace"
          spec:
            dnsPolicy: "ClusterFirst"
            livenessProbe:
              failureThreshold: 1
              periodSeconds: 6
              tcpSocket:
                host: "host"
              timeoutSeconds: 1
              guestAgentPing: {}
              successThreshold: 7
              initialDelaySeconds: 1
              exec:
                command:
                - "command"
                - "command"
              httpGet:
                path: "path"
                scheme: "HTTP"
                port: {}
                host: "host"
                httpHeaders:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
            terminationGracePeriodSeconds: 4
            dnsConfig:
              searches:
              - "searches"
              - "searches"
              nameservers:
              - "nameservers"
              - "nameservers"
              options:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            priorityClassName: "priorityClassName"
            volumes:
            - downwardAPI:
                volumeLabel: "volumeLabel"
                fields:
                - mode: 9
                  path: "path"
                  resourceFieldRef:
                    resource: "resource"
                    containerName: "containerName"
                  fieldRef:
                    apiVersion: "apiVersion"
                    fieldPath: "fieldPath"
                - mode: 9
                  path: "path"
                  resourceFieldRef:
                    resource: "resource"
                    containerName: "containerName"
                  fieldRef:
                    apiVersion: "apiVersion"
                    fieldPath: "fieldPath"
              cloudInitConfigDrive:
                networkDataSecretRef:
                  name: "name"
                userData: "userData"
                networkData: "networkData"
                networkDataBase64: "networkDataBase64"
                secretRef:
                  name: "name"
                userDataBase64: "userDataBase64"
              downwardMetrics: {}
              ephemeral:
                persistentVolumeClaim:
                  claimName: "claimName"
                  readOnly: true
              serviceAccount:
                serviceAccountName: "serviceAccountName"
              sysprep:
                configMap:
                  name: "name"
                secret:
                  name: "name"
              containerDisk:
                image: "image"
                imagePullPolicy: "Always"
                imagePullSecret: "imagePullSecret"
                path: "path"
              hostDisk:
                path: "path"
                shared: true
                type: "type"
              secret:
                secretName: "secretName"
                volumeLabel: "volumeLabel"
                optional: true
              cloudInitNoCloud:
                networkDataSecretRef:
                  name: "name"
                userData: "userData"
                networkData: "networkData"
                networkDataBase64: "networkDataBase64"
                secretRef:
                  name: "name"
                userDataBase64: "userDataBase64"
              configMap:
                volumeLabel: "volumeLabel"
                name: "name"
                optional: true
              dataVolume:
                hotpluggable: true
                name: "name"
              name: "name"
              persistentVolumeClaim:
                claimName: "claimName"
                hotpluggable: true
                readOnly: true
              emptyDisk: {}
            - downwardAPI:
                volumeLabel: "volumeLabel"
                fields:
                - mode: 9
                  path: "path"
                  resourceFieldRef:
                    resource: "resource"
                    containerName: "containerName"
                  fieldRef:
                    apiVersion: "apiVersion"
                    fieldPath: "fieldPath"
                - mode: 9
                  path: "path"
                  resourceFieldRef:
                    resource: "resource"
                    containerName: "containerName"
                  fieldRef:
                    apiVersion: "apiVersion"
                    fieldPath: "fieldPath"
              cloudInitConfigDrive:
                networkDataSecretRef:
                  name: "name"
                userData: "userData"
                networkData: "networkData"
                networkDataBase64: "networkDataBase64"
                secretRef:
                  name: "name"
                userDataBase64: "userDataBase64"
              downwardMetrics: {}
              ephemeral:
                persistentVolumeClaim:
                  claimName: "claimName"
                  readOnly: true
              serviceAccount:
                serviceAccountName: "serviceAccountName"
              sysprep:
                configMap:
                  name: "name"
                secret:
                  name: "name"
              containerDisk:
                image: "image"
                imagePullPolicy: "Always"
                imagePullSecret: "imagePullSecret"
                path: "path"
              hostDisk:
                path: "path"
                shared: true
                type: "type"
              secret:
                secretName: "secretName"
                volumeLabel: "volumeLabel"
                optional: true
              cloudInitNoCloud:
                networkDataSecretRef:
                  name: "name"
                userData: "userData"
                networkData: "networkData"
                networkDataBase64: "networkDataBase64"
                secretRef:
                  name: "name"
                userDataBase64: "userDataBase64"
              configMap:
                volumeLabel: "volumeLabel"
                name: "name"
                optional: true
              dataVolume:
                hotpluggable: true
                name: "name"
              name: "name"
              persistentVolumeClaim:
                claimName: "claimName"
                hotpluggable: true
                readOnly: true
              emptyDisk: {}
            networks:
            - pod:
                vmNetworkCIDR: "vmNetworkCIDR"
                vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
              name: "name"
              multus:
                default: true
                networkName: "networkName"
            - pod:
                vmNetworkCIDR: "vmNetworkCIDR"
                vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
              name: "name"
              multus:
                default: true
                networkName: "networkName"
            nodeSelector:
              key: "nodeSelector"
            hostname: "hostname"
            tolerations:
            - effect: "NoExecute"
              tolerationSeconds: 5
              value: "value"
              key: "key"
              operator: "Equal"
            - effect: "NoExecute"
              tolerationSeconds: 5
              value: "value"
              key: "key"
              operator: "Equal"
            accessCredentials:
            - sshPublicKey:
                propagationMethod:
                  configDrive: {}
                  qemuGuestAgent:
                    users:
                    - "users"
                    - "users"
                source:
                  secret:
                    secretName: "secretName"
              userPassword:
                propagationMethod:
                  qemuGuestAgent: {}
                source:
                  secret:
                    secretName: "secretName"
            - sshPublicKey:
                propagationMethod:
                  configDrive: {}
                  qemuGuestAgent:
                    users:
                    - "users"
                    - "users"
                source:
                  secret:
                    secretName: "secretName"
              userPassword:
                propagationMethod:
                  qemuGuestAgent: {}
                source:
                  secret:
                    secretName: "secretName"
            startStrategy: "startStrategy"
            domain:
              features:
                smm:
                  enabled: true
                kvm:
                  hidden: true
                apic:
                  endOfInterrupt: true
                  enabled: true
                acpi:
                  enabled: true
                pvspinlock:
                  enabled: true
                hyperv:
                  vpindex:
                    enabled: true
                  ipi:
                    enabled: true
                  reenlightenment:
                    enabled: true
                  runtime:
                    enabled: true
                  vendorid:
                    vendorid: "vendorid"
                    enabled: true
                  evmcs:
                    enabled: true
                  synictimer:
                    direct:
                      enabled: true
                    enabled: true
                  spinlocks:
                    spinlocks: 1
                    enabled: true
                  tlbflush:
                    enabled: true
                  synic:
                    enabled: true
                  relaxed:
                    enabled: true
                  vapic:
                    enabled: true
                  reset:
                    enabled: true
                  frequencies:
                    enabled: true
              ioThreadsPolicy: "ioThreadsPolicy"
              memory:
                hugepages:
                  pageSize: "pageSize"
                guest: {}
              devices:
                autoattachPodInterface: true
                interfaces:
                - dhcpOptions:
                    ntpServers:
                    - "ntpServers"
                    - "ntpServers"
                    tftpServerName: "tftpServerName"
                    bootFileName: "bootFileName"
                    privateOptions:
                    - value: "value"
                      option: 4
                    - value: "value"
                      option: 4
                  slirp: {}
                  macvtap: {}
                  ports:
                  - protocol: "protocol"
                    port: 7
                    name: "name"
                  - protocol: "protocol"
                    port: 7
                    name: "name"
                  macAddress: "macAddress"
                  masquerade: {}
                  bootOrder: 2
                  name: "name"
                  sriov: {}
                  model: "model"
                  pciAddress: "pciAddress"
                  bridge: {}
                  tag: "tag"
                - dhcpOptions:
                    ntpServers:
                    - "ntpServers"
                    - "ntpServers"
                    tftpServerName: "tftpServerName"
                    bootFileName: "bootFileName"
                    privateOptions:
                    - value: "value"
                      option: 4
                    - value: "value"
                      option: 4
                  slirp: {}
                  macvtap: {}
                  ports:
                  - protocol: "protocol"
                    port: 7
                    name: "name"
                  - protocol: "protocol"
                    port: 7
                    name: "name"
                  macAddress: "macAddress"
                  masquerade: {}
                  bootOrder: 2
                  name: "name"
                  sriov: {}
                  model: "model"
                  pciAddress: "pciAddress"
                  bridge: {}
                  tag: "tag"
                disks:
                - shareable: true
                  cache: "cache"
                  dedicatedIOThread: true
                  disk:
                    bus: "bus"
                    readonly: true
                    pciAddress: "pciAddress"
                  lun:
                    bus: "bus"
                    readonly: true
                  bootOrder: 3
                  serial: "serial"
                  io: "io"
                  name: "name"
                  tag: "tag"
                  cdrom:
                    tray: "tray"
                    bus: "bus"
                    readonly: true
                  blockSize:
                    custom:
                      physical: 9
                      logical: 7
                    matchVolume:
                      enabled: true
                - shareable: true
                  cache: "cache"
                  dedicatedIOThread: true
                  disk:
                    bus: "bus"
                    readonly: true
                    pciAddress: "pciAddress"
                  lun:
                    bus: "bus"
                    readonly: true
                  bootOrder: 3
                  serial: "serial"
                  io: "io"
                  name: "name"
                  tag: "tag"
                  cdrom:
                    tray: "tray"
                    bus: "bus"
                    readonly: true
                  blockSize:
                    custom:
                      physical: 9
                      logical: 7
                    matchVolume:
                      enabled: true
                inputs:
                - bus: "bus"
                  name: "name"
                  type: "type"
                - bus: "bus"
                  name: "name"
                  type: "type"
                sound:
                  name: "name"
                  model: "model"
                useVirtioTransitional: true
                rng: {}
                autoattachSerialConsole: true
                filesystems:
                - name: "name"
                  virtiofs: {}
                - name: "name"
                  virtiofs: {}
                hostDevices:
                - name: "name"
                  tag: "tag"
                  deviceName: "deviceName"
                - name: "name"
                  tag: "tag"
                  deviceName: "deviceName"
                networkInterfaceMultiqueue: true
                autoattachMemBalloon: true
                tpm: {}
                clientPassthrough: {}
                watchdog:
                  i6300esb:
                    action: "action"
                  name: "name"
                blockMultiQueue: true
                gpus:
                - name: "name"
                  tag: "tag"
                  virtualGPUOptions:
                    display:
                      enabled: true
                      ramFB:
                        enabled: true
                  deviceName: "deviceName"
                - name: "name"
                  tag: "tag"
                  virtualGPUOptions:
                    display:
                      enabled: true
                      ramFB:
                        enabled: true
                  deviceName: "deviceName"
                disableHotplug: true
                autoattachGraphicsDevice: true
              machine:
                type: "type"
              cpu:
                features:
                - name: "name"
                  policy: "policy"
                - name: "name"
                  policy: "policy"
                realtime:
                  mask: "mask"
                cores: 5
                dedicatedCpuPlacement: true
                numa:
                  guestMappingPassthrough: {}
                threads: 2
                model: "model"
                sockets: 5
                isolateEmulatorThread: true
              resources:
                overcommitGuestOverhead: true
                requests: {}
                limits: {}
              chassis:
                serial: "serial"
                asset: "asset"
                sku: "sku"
                version: "version"
                manufacturer: "manufacturer"
              clock:
                timer:
                  rtc:
                    tickPolicy: "tickPolicy"
                    present: true
                    track: "track"
                  kvm:
                    present: true
                  hpet:
                    tickPolicy: "tickPolicy"
                    present: true
                  pit:
                    tickPolicy: "tickPolicy"
                    present: true
                  hyperv:
                    present: true
                utc:
                  offsetSeconds: 1
                timezone: "timezone"
              firmware:
                serial: "serial"
                bootloader:
                  bios:
                    useSerial: true
                  efi:
                    secureBoot: true
                uuid: "uuid"
                kernelBoot:
                  container:
                    image: "image"
                    imagePullPolicy: "Always"
                    imagePullSecret: "imagePullSecret"
                    initrdPath: "initrdPath"
                    kernelPath: "kernelPath"
                  kernelArgs: "kernelArgs"
              launchSecurity:
                sev: {}
            readinessProbe:
              failureThreshold: 1
              periodSeconds: 6
              tcpSocket:
                host: "host"
              timeoutSeconds: 1
              guestAgentPing: {}
              successThreshold: 7
              initialDelaySeconds: 1
              exec:
                command:
                - "command"
                - "command"
              httpGet:
                path: "path"
                scheme: "HTTP"
                port: {}
                host: "host"
                httpHeaders:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
            subdomain: "subdomain"
            evictionStrategy: "evictionStrategy"
            schedulerName: "schedulerName"
            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                  - matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    matchFields:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                  - matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    matchFields:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    matchFields:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                  weight: 0
                - preference:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    matchFields:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                  weight: 0
              podAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                - labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  weight: 6
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  weight: 6
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                - labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  weight: 6
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  weight: 6
        dataVolumeTemplates:
        - metadata:
            generation: 6
            finalizers:
            - "finalizers"
            - "finalizers"
            resourceVersion: "resourceVersion"
            annotations:
              key: "annotations"
            generateName: "generateName"
            labels:
              key: "labels"
            ownerReferences:
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            selfLink: "selfLink"
            deletionGracePeriodSeconds: 0
            uid: "uid"
            managedFields:
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            clusterName: "clusterName"
            creationTimestamp: {}
            name: "name"
            namespace: "namespace"
          apiVersion: "apiVersion"
          kind: "kind"
          spec:
            finalCheckpoint: true
            preallocation: true
            priorityClassName: "priorityClassName"
            checkpoints:
            - current: "current"
              previous: "previous"
            - current: "current"
              previous: "previous"
            source:
              s3:
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                url: "url"
              registry:
                imageStream: "imageStream"
                pullMethod: "pullMethod"
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                url: "url"
              vddk:
                backingFile: "backingFile"
                initImageURL: "initImageURL"
                secretRef: "secretRef"
                thumbprint: "thumbprint"
                uuid: "uuid"
                url: "url"
              blank: {}
              imageio:
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                diskId: "diskId"
                url: "url"
              upload: {}
              http:
                secretExtraHeaders:
                - "secretExtraHeaders"
                - "secretExtraHeaders"
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                extraHeaders:
                - "extraHeaders"
                - "extraHeaders"
                url: "url"
              pvc:
                name: "name"
                namespace: "namespace"
            storage:
              storageClassName: "storageClassName"
              volumeName: "volumeName"
              resources:
                requests: {}
                limits:
                  key: {}
              selector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              accessModes:
              - "accessModes"
              - "accessModes"
              dataSource:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeMode: "volumeMode"
            pvc:
              storageClassName: "storageClassName"
              dataSourceRef:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeName: "volumeName"
              resources:
                requests: {}
                limits:
                  key: {}
              selector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              accessModes:
              - "accessModes"
              - "accessModes"
              dataSource:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeMode: "volumeMode"
            sourceRef:
              kind: "kind"
              name: "name"
              namespace: "namespace"
            contentType: "contentType"
          status: {}
        - metadata:
            generation: 6
            finalizers:
            - "finalizers"
            - "finalizers"
            resourceVersion: "resourceVersion"
            annotations:
              key: "annotations"
            generateName: "generateName"
            labels:
              key: "labels"
            ownerReferences:
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            selfLink: "selfLink"
            deletionGracePeriodSeconds: 0
            uid: "uid"
            managedFields:
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            clusterName: "clusterName"
            creationTimestamp: {}
            name: "name"
            namespace: "namespace"
          apiVersion: "apiVersion"
          kind: "kind"
          spec:
            finalCheckpoint: true
            preallocation: true
            priorityClassName: "priorityClassName"
            checkpoints:
            - current: "current"
              previous: "previous"
            - current: "current"
              previous: "previous"
            source:
              s3:
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                url: "url"
              registry:
                imageStream: "imageStream"
                pullMethod: "pullMethod"
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                url: "url"
              vddk:
                backingFile: "backingFile"
                initImageURL: "initImageURL"
                secretRef: "secretRef"
                thumbprint: "thumbprint"
                uuid: "uuid"
                url: "url"
              blank: {}
              imageio:
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                diskId: "diskId"
                url: "url"
              upload: {}
              http:
                secretExtraHeaders:
                - "secretExtraHeaders"
                - "secretExtraHeaders"
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                extraHeaders:
                - "extraHeaders"
                - "extraHeaders"
                url: "url"
              pvc:
                name: "name"
                namespace: "namespace"
            storage:
              storageClassName: "storageClassName"
              volumeName: "volumeName"
              resources:
                requests: {}
                limits:
                  key: {}
              selector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              accessModes:
              - "accessModes"
              - "accessModes"
              dataSource:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeMode: "volumeMode"
            pvc:
              storageClassName: "storageClassName"
              dataSourceRef:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeName: "volumeName"
              resources:
                requests: {}
                limits:
                  key: {}
              selector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              accessModes:
              - "accessModes"
              - "accessModes"
              dataSource:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeMode: "volumeMode"
            sourceRef:
              kind: "kind"
              name: "name"
              namespace: "namespace"
            contentType: "contentType"
          status: {}
        runStrategy: "runStrategy"
  harvesterhci.io.v1beta1.VirtualMachineTemplate:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateSpec"
      status:
        $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        defaultVersionId: "defaultVersionId"
        description: "description"
      status:
        latestVersion: 6
        defaultVersion: 0
  harvesterhci.io.v1beta1.VirtualMachineTemplateList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    - "metadata"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplate"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "VirtualMachineTemplateList is a list of VirtualMachineTemplate resources"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          defaultVersionId: "defaultVersionId"
          description: "description"
        status:
          latestVersion: 6
          defaultVersion: 0
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          defaultVersionId: "defaultVersionId"
          description: "description"
        status:
          latestVersion: 6
          defaultVersion: 0
  harvesterhci.io.v1beta1.VirtualMachineTemplateSpec:
    type: "object"
    properties:
      defaultVersionId:
        type: "string"
        default: ""
      description:
        type: "string"
    example:
      defaultVersionId: "defaultVersionId"
      description: "description"
  harvesterhci.io.v1beta1.VirtualMachineTemplateStatus:
    type: "object"
    properties:
      defaultVersion:
        type: "integer"
        format: "int32"
      latestVersion:
        type: "integer"
        format: "int32"
    example:
      latestVersion: 6
      defaultVersion: 0
  harvesterhci.io.v1beta1.VirtualMachineTemplateVersion:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    - "spec"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersionSpec"
      status:
        $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersionStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        imageId: "imageId"
        vm:
          metadata:
            generation: 6
            finalizers:
            - "finalizers"
            - "finalizers"
            resourceVersion: "resourceVersion"
            annotations:
              key: "annotations"
            generateName: "generateName"
            labels:
              key: "labels"
            ownerReferences:
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            selfLink: "selfLink"
            deletionGracePeriodSeconds: 0
            uid: "uid"
            managedFields:
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            clusterName: "clusterName"
            creationTimestamp: {}
            name: "name"
            namespace: "namespace"
          spec:
            flavor:
              kind: "kind"
              name: "name"
            running: true
            template:
              metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              spec:
                dnsPolicy: "ClusterFirst"
                livenessProbe:
                  failureThreshold: 1
                  periodSeconds: 6
                  tcpSocket:
                    host: "host"
                  timeoutSeconds: 1
                  guestAgentPing: {}
                  successThreshold: 7
                  initialDelaySeconds: 1
                  exec:
                    command:
                    - "command"
                    - "command"
                  httpGet:
                    path: "path"
                    scheme: "HTTP"
                    port: {}
                    host: "host"
                    httpHeaders:
                    - name: "name"
                      value: "value"
                    - name: "name"
                      value: "value"
                terminationGracePeriodSeconds: 4
                dnsConfig:
                  searches:
                  - "searches"
                  - "searches"
                  nameservers:
                  - "nameservers"
                  - "nameservers"
                  options:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
                priorityClassName: "priorityClassName"
                volumes:
                - downwardAPI:
                    volumeLabel: "volumeLabel"
                    fields:
                    - mode: 9
                      path: "path"
                      resourceFieldRef:
                        resource: "resource"
                        containerName: "containerName"
                      fieldRef:
                        apiVersion: "apiVersion"
                        fieldPath: "fieldPath"
                    - mode: 9
                      path: "path"
                      resourceFieldRef:
                        resource: "resource"
                        containerName: "containerName"
                      fieldRef:
                        apiVersion: "apiVersion"
                        fieldPath: "fieldPath"
                  cloudInitConfigDrive:
                    networkDataSecretRef:
                      name: "name"
                    userData: "userData"
                    networkData: "networkData"
                    networkDataBase64: "networkDataBase64"
                    secretRef:
                      name: "name"
                    userDataBase64: "userDataBase64"
                  downwardMetrics: {}
                  ephemeral:
                    persistentVolumeClaim:
                      claimName: "claimName"
                      readOnly: true
                  serviceAccount:
                    serviceAccountName: "serviceAccountName"
                  sysprep:
                    configMap:
                      name: "name"
                    secret:
                      name: "name"
                  containerDisk:
                    image: "image"
                    imagePullPolicy: "Always"
                    imagePullSecret: "imagePullSecret"
                    path: "path"
                  hostDisk:
                    path: "path"
                    shared: true
                    type: "type"
                  secret:
                    secretName: "secretName"
                    volumeLabel: "volumeLabel"
                    optional: true
                  cloudInitNoCloud:
                    networkDataSecretRef:
                      name: "name"
                    userData: "userData"
                    networkData: "networkData"
                    networkDataBase64: "networkDataBase64"
                    secretRef:
                      name: "name"
                    userDataBase64: "userDataBase64"
                  configMap:
                    volumeLabel: "volumeLabel"
                    name: "name"
                    optional: true
                  dataVolume:
                    hotpluggable: true
                    name: "name"
                  name: "name"
                  persistentVolumeClaim:
                    claimName: "claimName"
                    hotpluggable: true
                    readOnly: true
                  emptyDisk: {}
                - downwardAPI:
                    volumeLabel: "volumeLabel"
                    fields:
                    - mode: 9
                      path: "path"
                      resourceFieldRef:
                        resource: "resource"
                        containerName: "containerName"
                      fieldRef:
                        apiVersion: "apiVersion"
                        fieldPath: "fieldPath"
                    - mode: 9
                      path: "path"
                      resourceFieldRef:
                        resource: "resource"
                        containerName: "containerName"
                      fieldRef:
                        apiVersion: "apiVersion"
                        fieldPath: "fieldPath"
                  cloudInitConfigDrive:
                    networkDataSecretRef:
                      name: "name"
                    userData: "userData"
                    networkData: "networkData"
                    networkDataBase64: "networkDataBase64"
                    secretRef:
                      name: "name"
                    userDataBase64: "userDataBase64"
                  downwardMetrics: {}
                  ephemeral:
                    persistentVolumeClaim:
                      claimName: "claimName"
                      readOnly: true
                  serviceAccount:
                    serviceAccountName: "serviceAccountName"
                  sysprep:
                    configMap:
                      name: "name"
                    secret:
                      name: "name"
                  containerDisk:
                    image: "image"
                    imagePullPolicy: "Always"
                    imagePullSecret: "imagePullSecret"
                    path: "path"
                  hostDisk:
                    path: "path"
                    shared: true
                    type: "type"
                  secret:
                    secretName: "secretName"
                    volumeLabel: "volumeLabel"
                    optional: true
                  cloudInitNoCloud:
                    networkDataSecretRef:
                      name: "name"
                    userData: "userData"
                    networkData: "networkData"
                    networkDataBase64: "networkDataBase64"
                    secretRef:
                      name: "name"
                    userDataBase64: "userDataBase64"
                  configMap:
                    volumeLabel: "volumeLabel"
                    name: "name"
                    optional: true
                  dataVolume:
                    hotpluggable: true
                    name: "name"
                  name: "name"
                  persistentVolumeClaim:
                    claimName: "claimName"
                    hotpluggable: true
                    readOnly: true
                  emptyDisk: {}
                networks:
                - pod:
                    vmNetworkCIDR: "vmNetworkCIDR"
                    vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                  name: "name"
                  multus:
                    default: true
                    networkName: "networkName"
                - pod:
                    vmNetworkCIDR: "vmNetworkCIDR"
                    vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                  name: "name"
                  multus:
                    default: true
                    networkName: "networkName"
                nodeSelector:
                  key: "nodeSelector"
                hostname: "hostname"
                tolerations:
                - effect: "NoExecute"
                  tolerationSeconds: 5
                  value: "value"
                  key: "key"
                  operator: "Equal"
                - effect: "NoExecute"
                  tolerationSeconds: 5
                  value: "value"
                  key: "key"
                  operator: "Equal"
                accessCredentials:
                - sshPublicKey:
                    propagationMethod:
                      configDrive: {}
                      qemuGuestAgent:
                        users:
                        - "users"
                        - "users"
                    source:
                      secret:
                        secretName: "secretName"
                  userPassword:
                    propagationMethod:
                      qemuGuestAgent: {}
                    source:
                      secret:
                        secretName: "secretName"
                - sshPublicKey:
                    propagationMethod:
                      configDrive: {}
                      qemuGuestAgent:
                        users:
                        - "users"
                        - "users"
                    source:
                      secret:
                        secretName: "secretName"
                  userPassword:
                    propagationMethod:
                      qemuGuestAgent: {}
                    source:
                      secret:
                        secretName: "secretName"
                startStrategy: "startStrategy"
                domain:
                  features:
                    smm:
                      enabled: true
                    kvm:
                      hidden: true
                    apic:
                      endOfInterrupt: true
                      enabled: true
                    acpi:
                      enabled: true
                    pvspinlock:
                      enabled: true
                    hyperv:
                      vpindex:
                        enabled: true
                      ipi:
                        enabled: true
                      reenlightenment:
                        enabled: true
                      runtime:
                        enabled: true
                      vendorid:
                        vendorid: "vendorid"
                        enabled: true
                      evmcs:
                        enabled: true
                      synictimer:
                        direct:
                          enabled: true
                        enabled: true
                      spinlocks:
                        spinlocks: 1
                        enabled: true
                      tlbflush:
                        enabled: true
                      synic:
                        enabled: true
                      relaxed:
                        enabled: true
                      vapic:
                        enabled: true
                      reset:
                        enabled: true
                      frequencies:
                        enabled: true
                  ioThreadsPolicy: "ioThreadsPolicy"
                  memory:
                    hugepages:
                      pageSize: "pageSize"
                    guest: {}
                  devices:
                    autoattachPodInterface: true
                    interfaces:
                    - dhcpOptions:
                        ntpServers:
                        - "ntpServers"
                        - "ntpServers"
                        tftpServerName: "tftpServerName"
                        bootFileName: "bootFileName"
                        privateOptions:
                        - value: "value"
                          option: 4
                        - value: "value"
                          option: 4
                      slirp: {}
                      macvtap: {}
                      ports:
                      - protocol: "protocol"
                        port: 7
                        name: "name"
                      - protocol: "protocol"
                        port: 7
                        name: "name"
                      macAddress: "macAddress"
                      masquerade: {}
                      bootOrder: 2
                      name: "name"
                      sriov: {}
                      model: "model"
                      pciAddress: "pciAddress"
                      bridge: {}
                      tag: "tag"
                    - dhcpOptions:
                        ntpServers:
                        - "ntpServers"
                        - "ntpServers"
                        tftpServerName: "tftpServerName"
                        bootFileName: "bootFileName"
                        privateOptions:
                        - value: "value"
                          option: 4
                        - value: "value"
                          option: 4
                      slirp: {}
                      macvtap: {}
                      ports:
                      - protocol: "protocol"
                        port: 7
                        name: "name"
                      - protocol: "protocol"
                        port: 7
                        name: "name"
                      macAddress: "macAddress"
                      masquerade: {}
                      bootOrder: 2
                      name: "name"
                      sriov: {}
                      model: "model"
                      pciAddress: "pciAddress"
                      bridge: {}
                      tag: "tag"
                    disks:
                    - shareable: true
                      cache: "cache"
                      dedicatedIOThread: true
                      disk:
                        bus: "bus"
                        readonly: true
                        pciAddress: "pciAddress"
                      lun:
                        bus: "bus"
                        readonly: true
                      bootOrder: 3
                      serial: "serial"
                      io: "io"
                      name: "name"
                      tag: "tag"
                      cdrom:
                        tray: "tray"
                        bus: "bus"
                        readonly: true
                      blockSize:
                        custom:
                          physical: 9
                          logical: 7
                        matchVolume:
                          enabled: true
                    - shareable: true
                      cache: "cache"
                      dedicatedIOThread: true
                      disk:
                        bus: "bus"
                        readonly: true
                        pciAddress: "pciAddress"
                      lun:
                        bus: "bus"
                        readonly: true
                      bootOrder: 3
                      serial: "serial"
                      io: "io"
                      name: "name"
                      tag: "tag"
                      cdrom:
                        tray: "tray"
                        bus: "bus"
                        readonly: true
                      blockSize:
                        custom:
                          physical: 9
                          logical: 7
                        matchVolume:
                          enabled: true
                    inputs:
                    - bus: "bus"
                      name: "name"
                      type: "type"
                    - bus: "bus"
                      name: "name"
                      type: "type"
                    sound:
                      name: "name"
                      model: "model"
                    useVirtioTransitional: true
                    rng: {}
                    autoattachSerialConsole: true
                    filesystems:
                    - name: "name"
                      virtiofs: {}
                    - name: "name"
                      virtiofs: {}
                    hostDevices:
                    - name: "name"
                      tag: "tag"
                      deviceName: "deviceName"
                    - name: "name"
                      tag: "tag"
                      deviceName: "deviceName"
                    networkInterfaceMultiqueue: true
                    autoattachMemBalloon: true
                    tpm: {}
                    clientPassthrough: {}
                    watchdog:
                      i6300esb:
                        action: "action"
                      name: "name"
                    blockMultiQueue: true
                    gpus:
                    - name: "name"
                      tag: "tag"
                      virtualGPUOptions:
                        display:
                          enabled: true
                          ramFB:
                            enabled: true
                      deviceName: "deviceName"
                    - name: "name"
                      tag: "tag"
                      virtualGPUOptions:
                        display:
                          enabled: true
                          ramFB:
                            enabled: true
                      deviceName: "deviceName"
                    disableHotplug: true
                    autoattachGraphicsDevice: true
                  machine:
                    type: "type"
                  cpu:
                    features:
                    - name: "name"
                      policy: "policy"
                    - name: "name"
                      policy: "policy"
                    realtime:
                      mask: "mask"
                    cores: 5
                    dedicatedCpuPlacement: true
                    numa:
                      guestMappingPassthrough: {}
                    threads: 2
                    model: "model"
                    sockets: 5
                    isolateEmulatorThread: true
                  resources:
                    overcommitGuestOverhead: true
                    requests: {}
                    limits: {}
                  chassis:
                    serial: "serial"
                    asset: "asset"
                    sku: "sku"
                    version: "version"
                    manufacturer: "manufacturer"
                  clock:
                    timer:
                      rtc:
                        tickPolicy: "tickPolicy"
                        present: true
                        track: "track"
                      kvm:
                        present: true
                      hpet:
                        tickPolicy: "tickPolicy"
                        present: true
                      pit:
                        tickPolicy: "tickPolicy"
                        present: true
                      hyperv:
                        present: true
                    utc:
                      offsetSeconds: 1
                    timezone: "timezone"
                  firmware:
                    serial: "serial"
                    bootloader:
                      bios:
                        useSerial: true
                      efi:
                        secureBoot: true
                    uuid: "uuid"
                    kernelBoot:
                      container:
                        image: "image"
                        imagePullPolicy: "Always"
                        imagePullSecret: "imagePullSecret"
                        initrdPath: "initrdPath"
                        kernelPath: "kernelPath"
                      kernelArgs: "kernelArgs"
                  launchSecurity:
                    sev: {}
                readinessProbe:
                  failureThreshold: 1
                  periodSeconds: 6
                  tcpSocket:
                    host: "host"
                  timeoutSeconds: 1
                  guestAgentPing: {}
                  successThreshold: 7
                  initialDelaySeconds: 1
                  exec:
                    command:
                    - "command"
                    - "command"
                  httpGet:
                    path: "path"
                    scheme: "HTTP"
                    port: {}
                    host: "host"
                    httpHeaders:
                    - name: "name"
                      value: "value"
                    - name: "name"
                      value: "value"
                subdomain: "subdomain"
                evictionStrategy: "evictionStrategy"
                schedulerName: "schedulerName"
                affinity:
                  nodeAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      nodeSelectorTerms:
                      - matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        matchFields:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                      - matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        matchFields:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - preference:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        matchFields:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                      weight: 0
                    - preference:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        matchFields:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "DoesNotExist"
                      weight: 0
                  podAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                    - labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    - labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      weight: 6
                    - podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      weight: 6
                  podAntiAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                    - labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    - labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      weight: 6
                    - podAffinityTerm:
                        labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      weight: 6
            dataVolumeTemplates:
            - metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              apiVersion: "apiVersion"
              kind: "kind"
              spec:
                finalCheckpoint: true
                preallocation: true
                priorityClassName: "priorityClassName"
                checkpoints:
                - current: "current"
                  previous: "previous"
                - current: "current"
                  previous: "previous"
                source:
                  s3:
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    url: "url"
                  registry:
                    imageStream: "imageStream"
                    pullMethod: "pullMethod"
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    url: "url"
                  vddk:
                    backingFile: "backingFile"
                    initImageURL: "initImageURL"
                    secretRef: "secretRef"
                    thumbprint: "thumbprint"
                    uuid: "uuid"
                    url: "url"
                  blank: {}
                  imageio:
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    diskId: "diskId"
                    url: "url"
                  upload: {}
                  http:
                    secretExtraHeaders:
                    - "secretExtraHeaders"
                    - "secretExtraHeaders"
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    extraHeaders:
                    - "extraHeaders"
                    - "extraHeaders"
                    url: "url"
                  pvc:
                    name: "name"
                    namespace: "namespace"
                storage:
                  storageClassName: "storageClassName"
                  volumeName: "volumeName"
                  resources:
                    requests: {}
                    limits:
                      key: {}
                  selector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  accessModes:
                  - "accessModes"
                  - "accessModes"
                  dataSource:
                    apiGroup: "apiGroup"
                    kind: "kind"
                    name: "name"
                  volumeMode: "volumeMode"
                pvc:
                  storageClassName: "storageClassName"
                  dataSourceRef:
                    apiGroup: "apiGroup"
                    kind: "kind"
                    name: "name"
                  volumeName: "volumeName"
                  resources:
                    requests: {}
                    limits:
                      key: {}
                  selector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  accessModes:
                  - "accessModes"
                  - "accessModes"
                  dataSource:
                    apiGroup: "apiGroup"
                    kind: "kind"
                    name: "name"
                  volumeMode: "volumeMode"
                sourceRef:
                  kind: "kind"
                  name: "name"
                  namespace: "namespace"
                contentType: "contentType"
              status: {}
            - metadata:
                generation: 6
                finalizers:
                - "finalizers"
                - "finalizers"
                resourceVersion: "resourceVersion"
                annotations:
                  key: "annotations"
                generateName: "generateName"
                labels:
                  key: "labels"
                ownerReferences:
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                - uid: "uid"
                  controller: true
                  apiVersion: "apiVersion"
                  kind: "kind"
                  name: "name"
                  blockOwnerDeletion: true
                selfLink: "selfLink"
                deletionGracePeriodSeconds: 0
                uid: "uid"
                managedFields:
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                - apiVersion: "apiVersion"
                  fieldsV1: {}
                  manager: "manager"
                  subresource: "subresource"
                  operation: "operation"
                  fieldsType: "fieldsType"
                clusterName: "clusterName"
                creationTimestamp: {}
                name: "name"
                namespace: "namespace"
              apiVersion: "apiVersion"
              kind: "kind"
              spec:
                finalCheckpoint: true
                preallocation: true
                priorityClassName: "priorityClassName"
                checkpoints:
                - current: "current"
                  previous: "previous"
                - current: "current"
                  previous: "previous"
                source:
                  s3:
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    url: "url"
                  registry:
                    imageStream: "imageStream"
                    pullMethod: "pullMethod"
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    url: "url"
                  vddk:
                    backingFile: "backingFile"
                    initImageURL: "initImageURL"
                    secretRef: "secretRef"
                    thumbprint: "thumbprint"
                    uuid: "uuid"
                    url: "url"
                  blank: {}
                  imageio:
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    diskId: "diskId"
                    url: "url"
                  upload: {}
                  http:
                    secretExtraHeaders:
                    - "secretExtraHeaders"
                    - "secretExtraHeaders"
                    secretRef: "secretRef"
                    certConfigMap: "certConfigMap"
                    extraHeaders:
                    - "extraHeaders"
                    - "extraHeaders"
                    url: "url"
                  pvc:
                    name: "name"
                    namespace: "namespace"
                storage:
                  storageClassName: "storageClassName"
                  volumeName: "volumeName"
                  resources:
                    requests: {}
                    limits:
                      key: {}
                  selector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  accessModes:
                  - "accessModes"
                  - "accessModes"
                  dataSource:
                    apiGroup: "apiGroup"
                    kind: "kind"
                    name: "name"
                  volumeMode: "volumeMode"
                pvc:
                  storageClassName: "storageClassName"
                  dataSourceRef:
                    apiGroup: "apiGroup"
                    kind: "kind"
                    name: "name"
                  volumeName: "volumeName"
                  resources:
                    requests: {}
                    limits:
                      key: {}
                  selector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  accessModes:
                  - "accessModes"
                  - "accessModes"
                  dataSource:
                    apiGroup: "apiGroup"
                    kind: "kind"
                    name: "name"
                  volumeMode: "volumeMode"
                sourceRef:
                  kind: "kind"
                  name: "name"
                  namespace: "namespace"
                contentType: "contentType"
              status: {}
            runStrategy: "runStrategy"
        description: "description"
        keyPairIds:
        - "keyPairIds"
        - "keyPairIds"
        templateId: "templateId"
      status:
        conditions:
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
        version: 0
  harvesterhci.io.v1beta1.VirtualMachineTemplateVersionList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    - "metadata"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineTemplateVersion"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "VirtualMachineTemplateVersionList is a list of VirtualMachineTemplateVersion\
      \ resources"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          imageId: "imageId"
          vm:
            metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            spec:
              flavor:
                kind: "kind"
                name: "name"
              running: true
              template:
                metadata:
                  generation: 6
                  finalizers:
                  - "finalizers"
                  - "finalizers"
                  resourceVersion: "resourceVersion"
                  annotations:
                    key: "annotations"
                  generateName: "generateName"
                  labels:
                    key: "labels"
                  ownerReferences:
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  selfLink: "selfLink"
                  deletionGracePeriodSeconds: 0
                  uid: "uid"
                  managedFields:
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  clusterName: "clusterName"
                  creationTimestamp: {}
                  name: "name"
                  namespace: "namespace"
                spec:
                  dnsPolicy: "ClusterFirst"
                  livenessProbe:
                    failureThreshold: 1
                    periodSeconds: 6
                    tcpSocket:
                      host: "host"
                    timeoutSeconds: 1
                    guestAgentPing: {}
                    successThreshold: 7
                    initialDelaySeconds: 1
                    exec:
                      command:
                      - "command"
                      - "command"
                    httpGet:
                      path: "path"
                      scheme: "HTTP"
                      port: {}
                      host: "host"
                      httpHeaders:
                      - name: "name"
                        value: "value"
                      - name: "name"
                        value: "value"
                  terminationGracePeriodSeconds: 4
                  dnsConfig:
                    searches:
                    - "searches"
                    - "searches"
                    nameservers:
                    - "nameservers"
                    - "nameservers"
                    options:
                    - name: "name"
                      value: "value"
                    - name: "name"
                      value: "value"
                  priorityClassName: "priorityClassName"
                  volumes:
                  - downwardAPI:
                      volumeLabel: "volumeLabel"
                      fields:
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                    cloudInitConfigDrive:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    downwardMetrics: {}
                    ephemeral:
                      persistentVolumeClaim:
                        claimName: "claimName"
                        readOnly: true
                    serviceAccount:
                      serviceAccountName: "serviceAccountName"
                    sysprep:
                      configMap:
                        name: "name"
                      secret:
                        name: "name"
                    containerDisk:
                      image: "image"
                      imagePullPolicy: "Always"
                      imagePullSecret: "imagePullSecret"
                      path: "path"
                    hostDisk:
                      path: "path"
                      shared: true
                      type: "type"
                    secret:
                      secretName: "secretName"
                      volumeLabel: "volumeLabel"
                      optional: true
                    cloudInitNoCloud:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    configMap:
                      volumeLabel: "volumeLabel"
                      name: "name"
                      optional: true
                    dataVolume:
                      hotpluggable: true
                      name: "name"
                    name: "name"
                    persistentVolumeClaim:
                      claimName: "claimName"
                      hotpluggable: true
                      readOnly: true
                    emptyDisk: {}
                  - downwardAPI:
                      volumeLabel: "volumeLabel"
                      fields:
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                    cloudInitConfigDrive:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    downwardMetrics: {}
                    ephemeral:
                      persistentVolumeClaim:
                        claimName: "claimName"
                        readOnly: true
                    serviceAccount:
                      serviceAccountName: "serviceAccountName"
                    sysprep:
                      configMap:
                        name: "name"
                      secret:
                        name: "name"
                    containerDisk:
                      image: "image"
                      imagePullPolicy: "Always"
                      imagePullSecret: "imagePullSecret"
                      path: "path"
                    hostDisk:
                      path: "path"
                      shared: true
                      type: "type"
                    secret:
                      secretName: "secretName"
                      volumeLabel: "volumeLabel"
                      optional: true
                    cloudInitNoCloud:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    configMap:
                      volumeLabel: "volumeLabel"
                      name: "name"
                      optional: true
                    dataVolume:
                      hotpluggable: true
                      name: "name"
                    name: "name"
                    persistentVolumeClaim:
                      claimName: "claimName"
                      hotpluggable: true
                      readOnly: true
                    emptyDisk: {}
                  networks:
                  - pod:
                      vmNetworkCIDR: "vmNetworkCIDR"
                      vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                    name: "name"
                    multus:
                      default: true
                      networkName: "networkName"
                  - pod:
                      vmNetworkCIDR: "vmNetworkCIDR"
                      vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                    name: "name"
                    multus:
                      default: true
                      networkName: "networkName"
                  nodeSelector:
                    key: "nodeSelector"
                  hostname: "hostname"
                  tolerations:
                  - effect: "NoExecute"
                    tolerationSeconds: 5
                    value: "value"
                    key: "key"
                    operator: "Equal"
                  - effect: "NoExecute"
                    tolerationSeconds: 5
                    value: "value"
                    key: "key"
                    operator: "Equal"
                  accessCredentials:
                  - sshPublicKey:
                      propagationMethod:
                        configDrive: {}
                        qemuGuestAgent:
                          users:
                          - "users"
                          - "users"
                      source:
                        secret:
                          secretName: "secretName"
                    userPassword:
                      propagationMethod:
                        qemuGuestAgent: {}
                      source:
                        secret:
                          secretName: "secretName"
                  - sshPublicKey:
                      propagationMethod:
                        configDrive: {}
                        qemuGuestAgent:
                          users:
                          - "users"
                          - "users"
                      source:
                        secret:
                          secretName: "secretName"
                    userPassword:
                      propagationMethod:
                        qemuGuestAgent: {}
                      source:
                        secret:
                          secretName: "secretName"
                  startStrategy: "startStrategy"
                  domain:
                    features:
                      smm:
                        enabled: true
                      kvm:
                        hidden: true
                      apic:
                        endOfInterrupt: true
                        enabled: true
                      acpi:
                        enabled: true
                      pvspinlock:
                        enabled: true
                      hyperv:
                        vpindex:
                          enabled: true
                        ipi:
                          enabled: true
                        reenlightenment:
                          enabled: true
                        runtime:
                          enabled: true
                        vendorid:
                          vendorid: "vendorid"
                          enabled: true
                        evmcs:
                          enabled: true
                        synictimer:
                          direct:
                            enabled: true
                          enabled: true
                        spinlocks:
                          spinlocks: 1
                          enabled: true
                        tlbflush:
                          enabled: true
                        synic:
                          enabled: true
                        relaxed:
                          enabled: true
                        vapic:
                          enabled: true
                        reset:
                          enabled: true
                        frequencies:
                          enabled: true
                    ioThreadsPolicy: "ioThreadsPolicy"
                    memory:
                      hugepages:
                        pageSize: "pageSize"
                      guest: {}
                    devices:
                      autoattachPodInterface: true
                      interfaces:
                      - dhcpOptions:
                          ntpServers:
                          - "ntpServers"
                          - "ntpServers"
                          tftpServerName: "tftpServerName"
                          bootFileName: "bootFileName"
                          privateOptions:
                          - value: "value"
                            option: 4
                          - value: "value"
                            option: 4
                        slirp: {}
                        macvtap: {}
                        ports:
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        macAddress: "macAddress"
                        masquerade: {}
                        bootOrder: 2
                        name: "name"
                        sriov: {}
                        model: "model"
                        pciAddress: "pciAddress"
                        bridge: {}
                        tag: "tag"
                      - dhcpOptions:
                          ntpServers:
                          - "ntpServers"
                          - "ntpServers"
                          tftpServerName: "tftpServerName"
                          bootFileName: "bootFileName"
                          privateOptions:
                          - value: "value"
                            option: 4
                          - value: "value"
                            option: 4
                        slirp: {}
                        macvtap: {}
                        ports:
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        macAddress: "macAddress"
                        masquerade: {}
                        bootOrder: 2
                        name: "name"
                        sriov: {}
                        model: "model"
                        pciAddress: "pciAddress"
                        bridge: {}
                        tag: "tag"
                      disks:
                      - shareable: true
                        cache: "cache"
                        dedicatedIOThread: true
                        disk:
                          bus: "bus"
                          readonly: true
                          pciAddress: "pciAddress"
                        lun:
                          bus: "bus"
                          readonly: true
                        bootOrder: 3
                        serial: "serial"
                        io: "io"
                        name: "name"
                        tag: "tag"
                        cdrom:
                          tray: "tray"
                          bus: "bus"
                          readonly: true
                        blockSize:
                          custom:
                            physical: 9
                            logical: 7
                          matchVolume:
                            enabled: true
                      - shareable: true
                        cache: "cache"
                        dedicatedIOThread: true
                        disk:
                          bus: "bus"
                          readonly: true
                          pciAddress: "pciAddress"
                        lun:
                          bus: "bus"
                          readonly: true
                        bootOrder: 3
                        serial: "serial"
                        io: "io"
                        name: "name"
                        tag: "tag"
                        cdrom:
                          tray: "tray"
                          bus: "bus"
                          readonly: true
                        blockSize:
                          custom:
                            physical: 9
                            logical: 7
                          matchVolume:
                            enabled: true
                      inputs:
                      - bus: "bus"
                        name: "name"
                        type: "type"
                      - bus: "bus"
                        name: "name"
                        type: "type"
                      sound:
                        name: "name"
                        model: "model"
                      useVirtioTransitional: true
                      rng: {}
                      autoattachSerialConsole: true
                      filesystems:
                      - name: "name"
                        virtiofs: {}
                      - name: "name"
                        virtiofs: {}
                      hostDevices:
                      - name: "name"
                        tag: "tag"
                        deviceName: "deviceName"
                      - name: "name"
                        tag: "tag"
                        deviceName: "deviceName"
                      networkInterfaceMultiqueue: true
                      autoattachMemBalloon: true
                      tpm: {}
                      clientPassthrough: {}
                      watchdog:
                        i6300esb:
                          action: "action"
                        name: "name"
                      blockMultiQueue: true
                      gpus:
                      - name: "name"
                        tag: "tag"
                        virtualGPUOptions:
                          display:
                            enabled: true
                            ramFB:
                              enabled: true
                        deviceName: "deviceName"
                      - name: "name"
                        tag: "tag"
                        virtualGPUOptions:
                          display:
                            enabled: true
                            ramFB:
                              enabled: true
                        deviceName: "deviceName"
                      disableHotplug: true
                      autoattachGraphicsDevice: true
                    machine:
                      type: "type"
                    cpu:
                      features:
                      - name: "name"
                        policy: "policy"
                      - name: "name"
                        policy: "policy"
                      realtime:
                        mask: "mask"
                      cores: 5
                      dedicatedCpuPlacement: true
                      numa:
                        guestMappingPassthrough: {}
                      threads: 2
                      model: "model"
                      sockets: 5
                      isolateEmulatorThread: true
                    resources:
                      overcommitGuestOverhead: true
                      requests: {}
                      limits: {}
                    chassis:
                      serial: "serial"
                      asset: "asset"
                      sku: "sku"
                      version: "version"
                      manufacturer: "manufacturer"
                    clock:
                      timer:
                        rtc:
                          tickPolicy: "tickPolicy"
                          present: true
                          track: "track"
                        kvm:
                          present: true
                        hpet:
                          tickPolicy: "tickPolicy"
                          present: true
                        pit:
                          tickPolicy: "tickPolicy"
                          present: true
                        hyperv:
                          present: true
                      utc:
                        offsetSeconds: 1
                      timezone: "timezone"
                    firmware:
                      serial: "serial"
                      bootloader:
                        bios:
                          useSerial: true
                        efi:
                          secureBoot: true
                      uuid: "uuid"
                      kernelBoot:
                        container:
                          image: "image"
                          imagePullPolicy: "Always"
                          imagePullSecret: "imagePullSecret"
                          initrdPath: "initrdPath"
                          kernelPath: "kernelPath"
                        kernelArgs: "kernelArgs"
                    launchSecurity:
                      sev: {}
                  readinessProbe:
                    failureThreshold: 1
                    periodSeconds: 6
                    tcpSocket:
                      host: "host"
                    timeoutSeconds: 1
                    guestAgentPing: {}
                    successThreshold: 7
                    initialDelaySeconds: 1
                    exec:
                      command:
                      - "command"
                      - "command"
                    httpGet:
                      path: "path"
                      scheme: "HTTP"
                      port: {}
                      host: "host"
                      httpHeaders:
                      - name: "name"
                        value: "value"
                      - name: "name"
                        value: "value"
                  subdomain: "subdomain"
                  evictionStrategy: "evictionStrategy"
                  schedulerName: "schedulerName"
                  affinity:
                    nodeAffinity:
                      requiredDuringSchedulingIgnoredDuringExecution:
                        nodeSelectorTerms:
                        - matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                        - matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                      preferredDuringSchedulingIgnoredDuringExecution:
                      - preference:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                        weight: 0
                      - preference:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                        weight: 0
                    podAffinity:
                      requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      preferredDuringSchedulingIgnoredDuringExecution:
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
                    podAntiAffinity:
                      requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      preferredDuringSchedulingIgnoredDuringExecution:
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
              dataVolumeTemplates:
              - metadata:
                  generation: 6
                  finalizers:
                  - "finalizers"
                  - "finalizers"
                  resourceVersion: "resourceVersion"
                  annotations:
                    key: "annotations"
                  generateName: "generateName"
                  labels:
                    key: "labels"
                  ownerReferences:
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  selfLink: "selfLink"
                  deletionGracePeriodSeconds: 0
                  uid: "uid"
                  managedFields:
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  clusterName: "clusterName"
                  creationTimestamp: {}
                  name: "name"
                  namespace: "namespace"
                apiVersion: "apiVersion"
                kind: "kind"
                spec:
                  finalCheckpoint: true
                  preallocation: true
                  priorityClassName: "priorityClassName"
                  checkpoints:
                  - current: "current"
                    previous: "previous"
                  - current: "current"
                    previous: "previous"
                  source:
                    s3:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    registry:
                      imageStream: "imageStream"
                      pullMethod: "pullMethod"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    vddk:
                      backingFile: "backingFile"
                      initImageURL: "initImageURL"
                      secretRef: "secretRef"
                      thumbprint: "thumbprint"
                      uuid: "uuid"
                      url: "url"
                    blank: {}
                    imageio:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      diskId: "diskId"
                      url: "url"
                    upload: {}
                    http:
                      secretExtraHeaders:
                      - "secretExtraHeaders"
                      - "secretExtraHeaders"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      extraHeaders:
                      - "extraHeaders"
                      - "extraHeaders"
                      url: "url"
                    pvc:
                      name: "name"
                      namespace: "namespace"
                  storage:
                    storageClassName: "storageClassName"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  pvc:
                    storageClassName: "storageClassName"
                    dataSourceRef:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  sourceRef:
                    kind: "kind"
                    name: "name"
                    namespace: "namespace"
                  contentType: "contentType"
                status: {}
              - metadata:
                  generation: 6
                  finalizers:
                  - "finalizers"
                  - "finalizers"
                  resourceVersion: "resourceVersion"
                  annotations:
                    key: "annotations"
                  generateName: "generateName"
                  labels:
                    key: "labels"
                  ownerReferences:
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  selfLink: "selfLink"
                  deletionGracePeriodSeconds: 0
                  uid: "uid"
                  managedFields:
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  clusterName: "clusterName"
                  creationTimestamp: {}
                  name: "name"
                  namespace: "namespace"
                apiVersion: "apiVersion"
                kind: "kind"
                spec:
                  finalCheckpoint: true
                  preallocation: true
                  priorityClassName: "priorityClassName"
                  checkpoints:
                  - current: "current"
                    previous: "previous"
                  - current: "current"
                    previous: "previous"
                  source:
                    s3:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    registry:
                      imageStream: "imageStream"
                      pullMethod: "pullMethod"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    vddk:
                      backingFile: "backingFile"
                      initImageURL: "initImageURL"
                      secretRef: "secretRef"
                      thumbprint: "thumbprint"
                      uuid: "uuid"
                      url: "url"
                    blank: {}
                    imageio:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      diskId: "diskId"
                      url: "url"
                    upload: {}
                    http:
                      secretExtraHeaders:
                      - "secretExtraHeaders"
                      - "secretExtraHeaders"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      extraHeaders:
                      - "extraHeaders"
                      - "extraHeaders"
                      url: "url"
                    pvc:
                      name: "name"
                      namespace: "namespace"
                  storage:
                    storageClassName: "storageClassName"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  pvc:
                    storageClassName: "storageClassName"
                    dataSourceRef:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  sourceRef:
                    kind: "kind"
                    name: "name"
                    namespace: "namespace"
                  contentType: "contentType"
                status: {}
              runStrategy: "runStrategy"
          description: "description"
          keyPairIds:
          - "keyPairIds"
          - "keyPairIds"
          templateId: "templateId"
        status:
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          version: 0
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          imageId: "imageId"
          vm:
            metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            spec:
              flavor:
                kind: "kind"
                name: "name"
              running: true
              template:
                metadata:
                  generation: 6
                  finalizers:
                  - "finalizers"
                  - "finalizers"
                  resourceVersion: "resourceVersion"
                  annotations:
                    key: "annotations"
                  generateName: "generateName"
                  labels:
                    key: "labels"
                  ownerReferences:
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  selfLink: "selfLink"
                  deletionGracePeriodSeconds: 0
                  uid: "uid"
                  managedFields:
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  clusterName: "clusterName"
                  creationTimestamp: {}
                  name: "name"
                  namespace: "namespace"
                spec:
                  dnsPolicy: "ClusterFirst"
                  livenessProbe:
                    failureThreshold: 1
                    periodSeconds: 6
                    tcpSocket:
                      host: "host"
                    timeoutSeconds: 1
                    guestAgentPing: {}
                    successThreshold: 7
                    initialDelaySeconds: 1
                    exec:
                      command:
                      - "command"
                      - "command"
                    httpGet:
                      path: "path"
                      scheme: "HTTP"
                      port: {}
                      host: "host"
                      httpHeaders:
                      - name: "name"
                        value: "value"
                      - name: "name"
                        value: "value"
                  terminationGracePeriodSeconds: 4
                  dnsConfig:
                    searches:
                    - "searches"
                    - "searches"
                    nameservers:
                    - "nameservers"
                    - "nameservers"
                    options:
                    - name: "name"
                      value: "value"
                    - name: "name"
                      value: "value"
                  priorityClassName: "priorityClassName"
                  volumes:
                  - downwardAPI:
                      volumeLabel: "volumeLabel"
                      fields:
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                    cloudInitConfigDrive:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    downwardMetrics: {}
                    ephemeral:
                      persistentVolumeClaim:
                        claimName: "claimName"
                        readOnly: true
                    serviceAccount:
                      serviceAccountName: "serviceAccountName"
                    sysprep:
                      configMap:
                        name: "name"
                      secret:
                        name: "name"
                    containerDisk:
                      image: "image"
                      imagePullPolicy: "Always"
                      imagePullSecret: "imagePullSecret"
                      path: "path"
                    hostDisk:
                      path: "path"
                      shared: true
                      type: "type"
                    secret:
                      secretName: "secretName"
                      volumeLabel: "volumeLabel"
                      optional: true
                    cloudInitNoCloud:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    configMap:
                      volumeLabel: "volumeLabel"
                      name: "name"
                      optional: true
                    dataVolume:
                      hotpluggable: true
                      name: "name"
                    name: "name"
                    persistentVolumeClaim:
                      claimName: "claimName"
                      hotpluggable: true
                      readOnly: true
                    emptyDisk: {}
                  - downwardAPI:
                      volumeLabel: "volumeLabel"
                      fields:
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                      - mode: 9
                        path: "path"
                        resourceFieldRef:
                          resource: "resource"
                          containerName: "containerName"
                        fieldRef:
                          apiVersion: "apiVersion"
                          fieldPath: "fieldPath"
                    cloudInitConfigDrive:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    downwardMetrics: {}
                    ephemeral:
                      persistentVolumeClaim:
                        claimName: "claimName"
                        readOnly: true
                    serviceAccount:
                      serviceAccountName: "serviceAccountName"
                    sysprep:
                      configMap:
                        name: "name"
                      secret:
                        name: "name"
                    containerDisk:
                      image: "image"
                      imagePullPolicy: "Always"
                      imagePullSecret: "imagePullSecret"
                      path: "path"
                    hostDisk:
                      path: "path"
                      shared: true
                      type: "type"
                    secret:
                      secretName: "secretName"
                      volumeLabel: "volumeLabel"
                      optional: true
                    cloudInitNoCloud:
                      networkDataSecretRef:
                        name: "name"
                      userData: "userData"
                      networkData: "networkData"
                      networkDataBase64: "networkDataBase64"
                      secretRef:
                        name: "name"
                      userDataBase64: "userDataBase64"
                    configMap:
                      volumeLabel: "volumeLabel"
                      name: "name"
                      optional: true
                    dataVolume:
                      hotpluggable: true
                      name: "name"
                    name: "name"
                    persistentVolumeClaim:
                      claimName: "claimName"
                      hotpluggable: true
                      readOnly: true
                    emptyDisk: {}
                  networks:
                  - pod:
                      vmNetworkCIDR: "vmNetworkCIDR"
                      vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                    name: "name"
                    multus:
                      default: true
                      networkName: "networkName"
                  - pod:
                      vmNetworkCIDR: "vmNetworkCIDR"
                      vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                    name: "name"
                    multus:
                      default: true
                      networkName: "networkName"
                  nodeSelector:
                    key: "nodeSelector"
                  hostname: "hostname"
                  tolerations:
                  - effect: "NoExecute"
                    tolerationSeconds: 5
                    value: "value"
                    key: "key"
                    operator: "Equal"
                  - effect: "NoExecute"
                    tolerationSeconds: 5
                    value: "value"
                    key: "key"
                    operator: "Equal"
                  accessCredentials:
                  - sshPublicKey:
                      propagationMethod:
                        configDrive: {}
                        qemuGuestAgent:
                          users:
                          - "users"
                          - "users"
                      source:
                        secret:
                          secretName: "secretName"
                    userPassword:
                      propagationMethod:
                        qemuGuestAgent: {}
                      source:
                        secret:
                          secretName: "secretName"
                  - sshPublicKey:
                      propagationMethod:
                        configDrive: {}
                        qemuGuestAgent:
                          users:
                          - "users"
                          - "users"
                      source:
                        secret:
                          secretName: "secretName"
                    userPassword:
                      propagationMethod:
                        qemuGuestAgent: {}
                      source:
                        secret:
                          secretName: "secretName"
                  startStrategy: "startStrategy"
                  domain:
                    features:
                      smm:
                        enabled: true
                      kvm:
                        hidden: true
                      apic:
                        endOfInterrupt: true
                        enabled: true
                      acpi:
                        enabled: true
                      pvspinlock:
                        enabled: true
                      hyperv:
                        vpindex:
                          enabled: true
                        ipi:
                          enabled: true
                        reenlightenment:
                          enabled: true
                        runtime:
                          enabled: true
                        vendorid:
                          vendorid: "vendorid"
                          enabled: true
                        evmcs:
                          enabled: true
                        synictimer:
                          direct:
                            enabled: true
                          enabled: true
                        spinlocks:
                          spinlocks: 1
                          enabled: true
                        tlbflush:
                          enabled: true
                        synic:
                          enabled: true
                        relaxed:
                          enabled: true
                        vapic:
                          enabled: true
                        reset:
                          enabled: true
                        frequencies:
                          enabled: true
                    ioThreadsPolicy: "ioThreadsPolicy"
                    memory:
                      hugepages:
                        pageSize: "pageSize"
                      guest: {}
                    devices:
                      autoattachPodInterface: true
                      interfaces:
                      - dhcpOptions:
                          ntpServers:
                          - "ntpServers"
                          - "ntpServers"
                          tftpServerName: "tftpServerName"
                          bootFileName: "bootFileName"
                          privateOptions:
                          - value: "value"
                            option: 4
                          - value: "value"
                            option: 4
                        slirp: {}
                        macvtap: {}
                        ports:
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        macAddress: "macAddress"
                        masquerade: {}
                        bootOrder: 2
                        name: "name"
                        sriov: {}
                        model: "model"
                        pciAddress: "pciAddress"
                        bridge: {}
                        tag: "tag"
                      - dhcpOptions:
                          ntpServers:
                          - "ntpServers"
                          - "ntpServers"
                          tftpServerName: "tftpServerName"
                          bootFileName: "bootFileName"
                          privateOptions:
                          - value: "value"
                            option: 4
                          - value: "value"
                            option: 4
                        slirp: {}
                        macvtap: {}
                        ports:
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        - protocol: "protocol"
                          port: 7
                          name: "name"
                        macAddress: "macAddress"
                        masquerade: {}
                        bootOrder: 2
                        name: "name"
                        sriov: {}
                        model: "model"
                        pciAddress: "pciAddress"
                        bridge: {}
                        tag: "tag"
                      disks:
                      - shareable: true
                        cache: "cache"
                        dedicatedIOThread: true
                        disk:
                          bus: "bus"
                          readonly: true
                          pciAddress: "pciAddress"
                        lun:
                          bus: "bus"
                          readonly: true
                        bootOrder: 3
                        serial: "serial"
                        io: "io"
                        name: "name"
                        tag: "tag"
                        cdrom:
                          tray: "tray"
                          bus: "bus"
                          readonly: true
                        blockSize:
                          custom:
                            physical: 9
                            logical: 7
                          matchVolume:
                            enabled: true
                      - shareable: true
                        cache: "cache"
                        dedicatedIOThread: true
                        disk:
                          bus: "bus"
                          readonly: true
                          pciAddress: "pciAddress"
                        lun:
                          bus: "bus"
                          readonly: true
                        bootOrder: 3
                        serial: "serial"
                        io: "io"
                        name: "name"
                        tag: "tag"
                        cdrom:
                          tray: "tray"
                          bus: "bus"
                          readonly: true
                        blockSize:
                          custom:
                            physical: 9
                            logical: 7
                          matchVolume:
                            enabled: true
                      inputs:
                      - bus: "bus"
                        name: "name"
                        type: "type"
                      - bus: "bus"
                        name: "name"
                        type: "type"
                      sound:
                        name: "name"
                        model: "model"
                      useVirtioTransitional: true
                      rng: {}
                      autoattachSerialConsole: true
                      filesystems:
                      - name: "name"
                        virtiofs: {}
                      - name: "name"
                        virtiofs: {}
                      hostDevices:
                      - name: "name"
                        tag: "tag"
                        deviceName: "deviceName"
                      - name: "name"
                        tag: "tag"
                        deviceName: "deviceName"
                      networkInterfaceMultiqueue: true
                      autoattachMemBalloon: true
                      tpm: {}
                      clientPassthrough: {}
                      watchdog:
                        i6300esb:
                          action: "action"
                        name: "name"
                      blockMultiQueue: true
                      gpus:
                      - name: "name"
                        tag: "tag"
                        virtualGPUOptions:
                          display:
                            enabled: true
                            ramFB:
                              enabled: true
                        deviceName: "deviceName"
                      - name: "name"
                        tag: "tag"
                        virtualGPUOptions:
                          display:
                            enabled: true
                            ramFB:
                              enabled: true
                        deviceName: "deviceName"
                      disableHotplug: true
                      autoattachGraphicsDevice: true
                    machine:
                      type: "type"
                    cpu:
                      features:
                      - name: "name"
                        policy: "policy"
                      - name: "name"
                        policy: "policy"
                      realtime:
                        mask: "mask"
                      cores: 5
                      dedicatedCpuPlacement: true
                      numa:
                        guestMappingPassthrough: {}
                      threads: 2
                      model: "model"
                      sockets: 5
                      isolateEmulatorThread: true
                    resources:
                      overcommitGuestOverhead: true
                      requests: {}
                      limits: {}
                    chassis:
                      serial: "serial"
                      asset: "asset"
                      sku: "sku"
                      version: "version"
                      manufacturer: "manufacturer"
                    clock:
                      timer:
                        rtc:
                          tickPolicy: "tickPolicy"
                          present: true
                          track: "track"
                        kvm:
                          present: true
                        hpet:
                          tickPolicy: "tickPolicy"
                          present: true
                        pit:
                          tickPolicy: "tickPolicy"
                          present: true
                        hyperv:
                          present: true
                      utc:
                        offsetSeconds: 1
                      timezone: "timezone"
                    firmware:
                      serial: "serial"
                      bootloader:
                        bios:
                          useSerial: true
                        efi:
                          secureBoot: true
                      uuid: "uuid"
                      kernelBoot:
                        container:
                          image: "image"
                          imagePullPolicy: "Always"
                          imagePullSecret: "imagePullSecret"
                          initrdPath: "initrdPath"
                          kernelPath: "kernelPath"
                        kernelArgs: "kernelArgs"
                    launchSecurity:
                      sev: {}
                  readinessProbe:
                    failureThreshold: 1
                    periodSeconds: 6
                    tcpSocket:
                      host: "host"
                    timeoutSeconds: 1
                    guestAgentPing: {}
                    successThreshold: 7
                    initialDelaySeconds: 1
                    exec:
                      command:
                      - "command"
                      - "command"
                    httpGet:
                      path: "path"
                      scheme: "HTTP"
                      port: {}
                      host: "host"
                      httpHeaders:
                      - name: "name"
                        value: "value"
                      - name: "name"
                        value: "value"
                  subdomain: "subdomain"
                  evictionStrategy: "evictionStrategy"
                  schedulerName: "schedulerName"
                  affinity:
                    nodeAffinity:
                      requiredDuringSchedulingIgnoredDuringExecution:
                        nodeSelectorTerms:
                        - matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                        - matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                      preferredDuringSchedulingIgnoredDuringExecution:
                      - preference:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                        weight: 0
                      - preference:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          matchFields:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "DoesNotExist"
                        weight: 0
                    podAffinity:
                      requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      preferredDuringSchedulingIgnoredDuringExecution:
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
                    podAntiAffinity:
                      requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      - labelSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        namespaceSelector:
                          matchExpressions:
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          - values:
                            - "values"
                            - "values"
                            key: "key"
                            operator: "operator"
                          matchLabels:
                            key: "matchLabels"
                        topologyKey: "topologyKey"
                        namespaces:
                        - "namespaces"
                        - "namespaces"
                      preferredDuringSchedulingIgnoredDuringExecution:
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          namespaceSelector:
                            matchExpressions:
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            - values:
                              - "values"
                              - "values"
                              key: "key"
                              operator: "operator"
                            matchLabels:
                              key: "matchLabels"
                          topologyKey: "topologyKey"
                          namespaces:
                          - "namespaces"
                          - "namespaces"
                        weight: 6
              dataVolumeTemplates:
              - metadata:
                  generation: 6
                  finalizers:
                  - "finalizers"
                  - "finalizers"
                  resourceVersion: "resourceVersion"
                  annotations:
                    key: "annotations"
                  generateName: "generateName"
                  labels:
                    key: "labels"
                  ownerReferences:
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  selfLink: "selfLink"
                  deletionGracePeriodSeconds: 0
                  uid: "uid"
                  managedFields:
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  clusterName: "clusterName"
                  creationTimestamp: {}
                  name: "name"
                  namespace: "namespace"
                apiVersion: "apiVersion"
                kind: "kind"
                spec:
                  finalCheckpoint: true
                  preallocation: true
                  priorityClassName: "priorityClassName"
                  checkpoints:
                  - current: "current"
                    previous: "previous"
                  - current: "current"
                    previous: "previous"
                  source:
                    s3:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    registry:
                      imageStream: "imageStream"
                      pullMethod: "pullMethod"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    vddk:
                      backingFile: "backingFile"
                      initImageURL: "initImageURL"
                      secretRef: "secretRef"
                      thumbprint: "thumbprint"
                      uuid: "uuid"
                      url: "url"
                    blank: {}
                    imageio:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      diskId: "diskId"
                      url: "url"
                    upload: {}
                    http:
                      secretExtraHeaders:
                      - "secretExtraHeaders"
                      - "secretExtraHeaders"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      extraHeaders:
                      - "extraHeaders"
                      - "extraHeaders"
                      url: "url"
                    pvc:
                      name: "name"
                      namespace: "namespace"
                  storage:
                    storageClassName: "storageClassName"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  pvc:
                    storageClassName: "storageClassName"
                    dataSourceRef:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  sourceRef:
                    kind: "kind"
                    name: "name"
                    namespace: "namespace"
                  contentType: "contentType"
                status: {}
              - metadata:
                  generation: 6
                  finalizers:
                  - "finalizers"
                  - "finalizers"
                  resourceVersion: "resourceVersion"
                  annotations:
                    key: "annotations"
                  generateName: "generateName"
                  labels:
                    key: "labels"
                  ownerReferences:
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  - uid: "uid"
                    controller: true
                    apiVersion: "apiVersion"
                    kind: "kind"
                    name: "name"
                    blockOwnerDeletion: true
                  selfLink: "selfLink"
                  deletionGracePeriodSeconds: 0
                  uid: "uid"
                  managedFields:
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  - apiVersion: "apiVersion"
                    fieldsV1: {}
                    manager: "manager"
                    subresource: "subresource"
                    operation: "operation"
                    fieldsType: "fieldsType"
                  clusterName: "clusterName"
                  creationTimestamp: {}
                  name: "name"
                  namespace: "namespace"
                apiVersion: "apiVersion"
                kind: "kind"
                spec:
                  finalCheckpoint: true
                  preallocation: true
                  priorityClassName: "priorityClassName"
                  checkpoints:
                  - current: "current"
                    previous: "previous"
                  - current: "current"
                    previous: "previous"
                  source:
                    s3:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    registry:
                      imageStream: "imageStream"
                      pullMethod: "pullMethod"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      url: "url"
                    vddk:
                      backingFile: "backingFile"
                      initImageURL: "initImageURL"
                      secretRef: "secretRef"
                      thumbprint: "thumbprint"
                      uuid: "uuid"
                      url: "url"
                    blank: {}
                    imageio:
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      diskId: "diskId"
                      url: "url"
                    upload: {}
                    http:
                      secretExtraHeaders:
                      - "secretExtraHeaders"
                      - "secretExtraHeaders"
                      secretRef: "secretRef"
                      certConfigMap: "certConfigMap"
                      extraHeaders:
                      - "extraHeaders"
                      - "extraHeaders"
                      url: "url"
                    pvc:
                      name: "name"
                      namespace: "namespace"
                  storage:
                    storageClassName: "storageClassName"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  pvc:
                    storageClassName: "storageClassName"
                    dataSourceRef:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeName: "volumeName"
                    resources:
                      requests: {}
                      limits:
                        key: {}
                    selector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    accessModes:
                    - "accessModes"
                    - "accessModes"
                    dataSource:
                      apiGroup: "apiGroup"
                      kind: "kind"
                      name: "name"
                    volumeMode: "volumeMode"
                  sourceRef:
                    kind: "kind"
                    name: "name"
                    namespace: "namespace"
                  contentType: "contentType"
                status: {}
              runStrategy: "runStrategy"
          description: "description"
          keyPairIds:
          - "keyPairIds"
          - "keyPairIds"
          templateId: "templateId"
        status:
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          version: 0
  harvesterhci.io.v1beta1.VirtualMachineTemplateVersionSpec:
    type: "object"
    required:
    - "templateId"
    properties:
      description:
        type: "string"
      imageId:
        type: "string"
      keyPairIds:
        type: "array"
        items:
          type: "string"
          default: ""
      templateId:
        type: "string"
        default: ""
      vm:
        $ref: "#/definitions/harvesterhci.io.v1beta1.VirtualMachineSourceSpec"
    example:
      imageId: "imageId"
      vm:
        metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        spec:
          flavor:
            kind: "kind"
            name: "name"
          running: true
          template:
            metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            spec:
              dnsPolicy: "ClusterFirst"
              livenessProbe:
                failureThreshold: 1
                periodSeconds: 6
                tcpSocket:
                  host: "host"
                timeoutSeconds: 1
                guestAgentPing: {}
                successThreshold: 7
                initialDelaySeconds: 1
                exec:
                  command:
                  - "command"
                  - "command"
                httpGet:
                  path: "path"
                  scheme: "HTTP"
                  port: {}
                  host: "host"
                  httpHeaders:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
              terminationGracePeriodSeconds: 4
              dnsConfig:
                searches:
                - "searches"
                - "searches"
                nameservers:
                - "nameservers"
                - "nameservers"
                options:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              priorityClassName: "priorityClassName"
              volumes:
              - downwardAPI:
                  volumeLabel: "volumeLabel"
                  fields:
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                cloudInitConfigDrive:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                downwardMetrics: {}
                ephemeral:
                  persistentVolumeClaim:
                    claimName: "claimName"
                    readOnly: true
                serviceAccount:
                  serviceAccountName: "serviceAccountName"
                sysprep:
                  configMap:
                    name: "name"
                  secret:
                    name: "name"
                containerDisk:
                  image: "image"
                  imagePullPolicy: "Always"
                  imagePullSecret: "imagePullSecret"
                  path: "path"
                hostDisk:
                  path: "path"
                  shared: true
                  type: "type"
                secret:
                  secretName: "secretName"
                  volumeLabel: "volumeLabel"
                  optional: true
                cloudInitNoCloud:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                configMap:
                  volumeLabel: "volumeLabel"
                  name: "name"
                  optional: true
                dataVolume:
                  hotpluggable: true
                  name: "name"
                name: "name"
                persistentVolumeClaim:
                  claimName: "claimName"
                  hotpluggable: true
                  readOnly: true
                emptyDisk: {}
              - downwardAPI:
                  volumeLabel: "volumeLabel"
                  fields:
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                cloudInitConfigDrive:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                downwardMetrics: {}
                ephemeral:
                  persistentVolumeClaim:
                    claimName: "claimName"
                    readOnly: true
                serviceAccount:
                  serviceAccountName: "serviceAccountName"
                sysprep:
                  configMap:
                    name: "name"
                  secret:
                    name: "name"
                containerDisk:
                  image: "image"
                  imagePullPolicy: "Always"
                  imagePullSecret: "imagePullSecret"
                  path: "path"
                hostDisk:
                  path: "path"
                  shared: true
                  type: "type"
                secret:
                  secretName: "secretName"
                  volumeLabel: "volumeLabel"
                  optional: true
                cloudInitNoCloud:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                configMap:
                  volumeLabel: "volumeLabel"
                  name: "name"
                  optional: true
                dataVolume:
                  hotpluggable: true
                  name: "name"
                name: "name"
                persistentVolumeClaim:
                  claimName: "claimName"
                  hotpluggable: true
                  readOnly: true
                emptyDisk: {}
              networks:
              - pod:
                  vmNetworkCIDR: "vmNetworkCIDR"
                  vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                name: "name"
                multus:
                  default: true
                  networkName: "networkName"
              - pod:
                  vmNetworkCIDR: "vmNetworkCIDR"
                  vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                name: "name"
                multus:
                  default: true
                  networkName: "networkName"
              nodeSelector:
                key: "nodeSelector"
              hostname: "hostname"
              tolerations:
              - effect: "NoExecute"
                tolerationSeconds: 5
                value: "value"
                key: "key"
                operator: "Equal"
              - effect: "NoExecute"
                tolerationSeconds: 5
                value: "value"
                key: "key"
                operator: "Equal"
              accessCredentials:
              - sshPublicKey:
                  propagationMethod:
                    configDrive: {}
                    qemuGuestAgent:
                      users:
                      - "users"
                      - "users"
                  source:
                    secret:
                      secretName: "secretName"
                userPassword:
                  propagationMethod:
                    qemuGuestAgent: {}
                  source:
                    secret:
                      secretName: "secretName"
              - sshPublicKey:
                  propagationMethod:
                    configDrive: {}
                    qemuGuestAgent:
                      users:
                      - "users"
                      - "users"
                  source:
                    secret:
                      secretName: "secretName"
                userPassword:
                  propagationMethod:
                    qemuGuestAgent: {}
                  source:
                    secret:
                      secretName: "secretName"
              startStrategy: "startStrategy"
              domain:
                features:
                  smm:
                    enabled: true
                  kvm:
                    hidden: true
                  apic:
                    endOfInterrupt: true
                    enabled: true
                  acpi:
                    enabled: true
                  pvspinlock:
                    enabled: true
                  hyperv:
                    vpindex:
                      enabled: true
                    ipi:
                      enabled: true
                    reenlightenment:
                      enabled: true
                    runtime:
                      enabled: true
                    vendorid:
                      vendorid: "vendorid"
                      enabled: true
                    evmcs:
                      enabled: true
                    synictimer:
                      direct:
                        enabled: true
                      enabled: true
                    spinlocks:
                      spinlocks: 1
                      enabled: true
                    tlbflush:
                      enabled: true
                    synic:
                      enabled: true
                    relaxed:
                      enabled: true
                    vapic:
                      enabled: true
                    reset:
                      enabled: true
                    frequencies:
                      enabled: true
                ioThreadsPolicy: "ioThreadsPolicy"
                memory:
                  hugepages:
                    pageSize: "pageSize"
                  guest: {}
                devices:
                  autoattachPodInterface: true
                  interfaces:
                  - dhcpOptions:
                      ntpServers:
                      - "ntpServers"
                      - "ntpServers"
                      tftpServerName: "tftpServerName"
                      bootFileName: "bootFileName"
                      privateOptions:
                      - value: "value"
                        option: 4
                      - value: "value"
                        option: 4
                    slirp: {}
                    macvtap: {}
                    ports:
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    macAddress: "macAddress"
                    masquerade: {}
                    bootOrder: 2
                    name: "name"
                    sriov: {}
                    model: "model"
                    pciAddress: "pciAddress"
                    bridge: {}
                    tag: "tag"
                  - dhcpOptions:
                      ntpServers:
                      - "ntpServers"
                      - "ntpServers"
                      tftpServerName: "tftpServerName"
                      bootFileName: "bootFileName"
                      privateOptions:
                      - value: "value"
                        option: 4
                      - value: "value"
                        option: 4
                    slirp: {}
                    macvtap: {}
                    ports:
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    macAddress: "macAddress"
                    masquerade: {}
                    bootOrder: 2
                    name: "name"
                    sriov: {}
                    model: "model"
                    pciAddress: "pciAddress"
                    bridge: {}
                    tag: "tag"
                  disks:
                  - shareable: true
                    cache: "cache"
                    dedicatedIOThread: true
                    disk:
                      bus: "bus"
                      readonly: true
                      pciAddress: "pciAddress"
                    lun:
                      bus: "bus"
                      readonly: true
                    bootOrder: 3
                    serial: "serial"
                    io: "io"
                    name: "name"
                    tag: "tag"
                    cdrom:
                      tray: "tray"
                      bus: "bus"
                      readonly: true
                    blockSize:
                      custom:
                        physical: 9
                        logical: 7
                      matchVolume:
                        enabled: true
                  - shareable: true
                    cache: "cache"
                    dedicatedIOThread: true
                    disk:
                      bus: "bus"
                      readonly: true
                      pciAddress: "pciAddress"
                    lun:
                      bus: "bus"
                      readonly: true
                    bootOrder: 3
                    serial: "serial"
                    io: "io"
                    name: "name"
                    tag: "tag"
                    cdrom:
                      tray: "tray"
                      bus: "bus"
                      readonly: true
                    blockSize:
                      custom:
                        physical: 9
                        logical: 7
                      matchVolume:
                        enabled: true
                  inputs:
                  - bus: "bus"
                    name: "name"
                    type: "type"
                  - bus: "bus"
                    name: "name"
                    type: "type"
                  sound:
                    name: "name"
                    model: "model"
                  useVirtioTransitional: true
                  rng: {}
                  autoattachSerialConsole: true
                  filesystems:
                  - name: "name"
                    virtiofs: {}
                  - name: "name"
                    virtiofs: {}
                  hostDevices:
                  - name: "name"
                    tag: "tag"
                    deviceName: "deviceName"
                  - name: "name"
                    tag: "tag"
                    deviceName: "deviceName"
                  networkInterfaceMultiqueue: true
                  autoattachMemBalloon: true
                  tpm: {}
                  clientPassthrough: {}
                  watchdog:
                    i6300esb:
                      action: "action"
                    name: "name"
                  blockMultiQueue: true
                  gpus:
                  - name: "name"
                    tag: "tag"
                    virtualGPUOptions:
                      display:
                        enabled: true
                        ramFB:
                          enabled: true
                    deviceName: "deviceName"
                  - name: "name"
                    tag: "tag"
                    virtualGPUOptions:
                      display:
                        enabled: true
                        ramFB:
                          enabled: true
                    deviceName: "deviceName"
                  disableHotplug: true
                  autoattachGraphicsDevice: true
                machine:
                  type: "type"
                cpu:
                  features:
                  - name: "name"
                    policy: "policy"
                  - name: "name"
                    policy: "policy"
                  realtime:
                    mask: "mask"
                  cores: 5
                  dedicatedCpuPlacement: true
                  numa:
                    guestMappingPassthrough: {}
                  threads: 2
                  model: "model"
                  sockets: 5
                  isolateEmulatorThread: true
                resources:
                  overcommitGuestOverhead: true
                  requests: {}
                  limits: {}
                chassis:
                  serial: "serial"
                  asset: "asset"
                  sku: "sku"
                  version: "version"
                  manufacturer: "manufacturer"
                clock:
                  timer:
                    rtc:
                      tickPolicy: "tickPolicy"
                      present: true
                      track: "track"
                    kvm:
                      present: true
                    hpet:
                      tickPolicy: "tickPolicy"
                      present: true
                    pit:
                      tickPolicy: "tickPolicy"
                      present: true
                    hyperv:
                      present: true
                  utc:
                    offsetSeconds: 1
                  timezone: "timezone"
                firmware:
                  serial: "serial"
                  bootloader:
                    bios:
                      useSerial: true
                    efi:
                      secureBoot: true
                  uuid: "uuid"
                  kernelBoot:
                    container:
                      image: "image"
                      imagePullPolicy: "Always"
                      imagePullSecret: "imagePullSecret"
                      initrdPath: "initrdPath"
                      kernelPath: "kernelPath"
                    kernelArgs: "kernelArgs"
                launchSecurity:
                  sev: {}
              readinessProbe:
                failureThreshold: 1
                periodSeconds: 6
                tcpSocket:
                  host: "host"
                timeoutSeconds: 1
                guestAgentPing: {}
                successThreshold: 7
                initialDelaySeconds: 1
                exec:
                  command:
                  - "command"
                  - "command"
                httpGet:
                  path: "path"
                  scheme: "HTTP"
                  port: {}
                  host: "host"
                  httpHeaders:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
              subdomain: "subdomain"
              evictionStrategy: "evictionStrategy"
              schedulerName: "schedulerName"
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                    - matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                    - matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - preference:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                    weight: 0
                  - preference:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                    weight: 0
                podAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
                podAntiAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
          dataVolumeTemplates:
          - metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            apiVersion: "apiVersion"
            kind: "kind"
            spec:
              finalCheckpoint: true
              preallocation: true
              priorityClassName: "priorityClassName"
              checkpoints:
              - current: "current"
                previous: "previous"
              - current: "current"
                previous: "previous"
              source:
                s3:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                registry:
                  imageStream: "imageStream"
                  pullMethod: "pullMethod"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                vddk:
                  backingFile: "backingFile"
                  initImageURL: "initImageURL"
                  secretRef: "secretRef"
                  thumbprint: "thumbprint"
                  uuid: "uuid"
                  url: "url"
                blank: {}
                imageio:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  diskId: "diskId"
                  url: "url"
                upload: {}
                http:
                  secretExtraHeaders:
                  - "secretExtraHeaders"
                  - "secretExtraHeaders"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  extraHeaders:
                  - "extraHeaders"
                  - "extraHeaders"
                  url: "url"
                pvc:
                  name: "name"
                  namespace: "namespace"
              storage:
                storageClassName: "storageClassName"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              pvc:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              sourceRef:
                kind: "kind"
                name: "name"
                namespace: "namespace"
              contentType: "contentType"
            status: {}
          - metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            apiVersion: "apiVersion"
            kind: "kind"
            spec:
              finalCheckpoint: true
              preallocation: true
              priorityClassName: "priorityClassName"
              checkpoints:
              - current: "current"
                previous: "previous"
              - current: "current"
                previous: "previous"
              source:
                s3:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                registry:
                  imageStream: "imageStream"
                  pullMethod: "pullMethod"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                vddk:
                  backingFile: "backingFile"
                  initImageURL: "initImageURL"
                  secretRef: "secretRef"
                  thumbprint: "thumbprint"
                  uuid: "uuid"
                  url: "url"
                blank: {}
                imageio:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  diskId: "diskId"
                  url: "url"
                upload: {}
                http:
                  secretExtraHeaders:
                  - "secretExtraHeaders"
                  - "secretExtraHeaders"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  extraHeaders:
                  - "extraHeaders"
                  - "extraHeaders"
                  url: "url"
                pvc:
                  name: "name"
                  namespace: "namespace"
              storage:
                storageClassName: "storageClassName"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              pvc:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              sourceRef:
                kind: "kind"
                name: "name"
                namespace: "namespace"
              contentType: "contentType"
            status: {}
          runStrategy: "runStrategy"
      description: "description"
      keyPairIds:
      - "keyPairIds"
      - "keyPairIds"
      templateId: "templateId"
  harvesterhci.io.v1beta1.VirtualMachineTemplateVersionStatus:
    type: "object"
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/harvesterhci.io.v1beta1.Condition"
      version:
        type: "integer"
        format: "int32"
    example:
      conditions:
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      version: 0
  harvesterhci.io.v1beta1.VolumeBackup:
    type: "object"
    required:
    - "persistentVolumeClaim"
    - "volumeName"
    properties:
      creationTime:
        $ref: "#/definitions/k8s.io.v1.Time"
      error:
        $ref: "#/definitions/harvesterhci.io.v1beta1.Error"
      longhornBackupName:
        type: "string"
      name:
        type: "string"
      persistentVolumeClaim:
        $ref: "#/definitions/harvesterhci.io.v1beta1.PersistentVolumeClaimSourceSpec"
      readyToUse:
        type: "boolean"
      volumeName:
        type: "string"
        default: ""
    description: "VolumeBackup contains the volume data need to restore a PVC"
    example:
      volumeName: "volumeName"
      longhornBackupName: "longhornBackupName"
      name: "name"
      readyToUse: true
      persistentVolumeClaim:
        metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        spec:
          storageClassName: "storageClassName"
          dataSourceRef:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
          volumeName: "volumeName"
          resources:
            requests: {}
            limits:
              key: {}
          selector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          accessModes:
          - "accessModes"
          - "accessModes"
          dataSource:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
          volumeMode: "volumeMode"
      error:
        message: "message"
  harvesterhci.io.v1beta1.VolumeRestore:
    type: "object"
    properties:
      persistentVolumeClaimSpec:
        $ref: "#/definitions/harvesterhci.io.v1beta1.PersistentVolumeClaimSourceSpec"
      volumeBackupName:
        type: "string"
      volumeName:
        type: "string"
    description: "VolumeRestore contains the volume data need to restore a PVC"
    example:
      volumeBackupName: "volumeBackupName"
      volumeName: "volumeName"
      persistentVolumeClaimSpec:
        metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        spec:
          storageClassName: "storageClassName"
          dataSourceRef:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
          volumeName: "volumeName"
          resources:
            requests: {}
            limits:
              key: {}
          selector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          accessModes:
          - "accessModes"
          - "accessModes"
          dataSource:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
          volumeMode: "volumeMode"
  k8s.cni.cncf.io.v1.NetworkAttachmentDefinition:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    - "spec"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        $ref: "#/definitions/k8s.cni.cncf.io.v1.NetworkAttachmentDefinitionSpec"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        config: "config"
  k8s.cni.cncf.io.v1.NetworkAttachmentDefinitionList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    - "metadata"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/k8s.cni.cncf.io.v1.NetworkAttachmentDefinition"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          config: "config"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          config: "config"
  k8s.cni.cncf.io.v1.NetworkAttachmentDefinitionSpec:
    type: "object"
    required:
    - "config"
    properties:
      config:
        type: "string"
        default: ""
    example:
      config: "config"
  k8s.io.apimachinery.pkg.api.resource.Quantity:
    type: "string"
    description: "Quantity is a fixed-point representation of a number. It provides\
      \ convenient marshaling/unmarshaling in JSON and YAML, in addition to String()\
      \ and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>   \
      \     ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the\
      \ \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>\
      \          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits>\
      \ | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>\
      \    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent>\
      \ | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International\
      \ System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>\
      \       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000\
      \ = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber>\
      \ | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used,\
      \ no quantity may represent a number greater than 2^63-1 in magnitude, nor may\
      \ it have more than 3 decimal places. Numbers larger or more precise will be\
      \ capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended\
      \ in the future if we require larger or smaller quantities.\n\nWhen a Quantity\
      \ is parsed from a string, it will remember the type of suffix it had, and will\
      \ use the same type again when it is serialized.\n\nBefore serializing, Quantity\
      \ will be put in \"canonical form\". This means that Exponent/suffix will be\
      \ adjusted up or down (with a corresponding increase or decrease in Mantissa)\
      \ such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n\
      \  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted\
      \ unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"\
      1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity\
      \ will NEVER be internally represented by a floating point number. That is the\
      \ whole point of this exercise.\n\nNon-canonical values will still parse as\
      \ long as they are well formed, but will be re-emitted in their canonical form.\
      \ (So always use canonical form, or don't diff.)\n\nThis format is intended\
      \ to make it difficult to use these numbers without writing some sort of special\
      \ handling code in the hopes that that will cause implementors to also use a\
      \ fixed point implementation."
  k8s.io.apimachinery.pkg.util.intstr.IntOrString:
    type: "string"
    format: "int-or-string"
    description: "IntOrString is a type that can hold an int32 or a string.  When\
      \ used in JSON or YAML marshalling and unmarshalling, it produces or consumes\
      \ the inner type.  This allows you to have, for example, a JSON field that can\
      \ accept a name or number."
  k8s.io.v1.Affinity:
    type: "object"
    properties:
      nodeAffinity:
        description: "Describes node affinity scheduling rules for the pod."
        $ref: "#/definitions/k8s.io.v1.NodeAffinity"
      podAffinity:
        description: "Describes pod affinity scheduling rules (e.g. co-locate this\
          \ pod in the same node, zone, etc. as some other pod(s))."
        $ref: "#/definitions/k8s.io.v1.PodAffinity"
      podAntiAffinity:
        description: "Describes pod anti-affinity scheduling rules (e.g. avoid putting\
          \ this pod in the same node, zone, etc. as some other pod(s))."
        $ref: "#/definitions/k8s.io.v1.PodAntiAffinity"
    description: "Affinity is a group of affinity scheduling rules."
    example:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
            matchFields:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
          - matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
            matchFields:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
        preferredDuringSchedulingIgnoredDuringExecution:
        - preference:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
            matchFields:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
          weight: 0
        - preference:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
            matchFields:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "DoesNotExist"
          weight: 0
      podAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          namespaceSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          topologyKey: "topologyKey"
          namespaces:
          - "namespaces"
          - "namespaces"
        - labelSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          namespaceSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          topologyKey: "topologyKey"
          namespaces:
          - "namespaces"
          - "namespaces"
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            namespaceSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            topologyKey: "topologyKey"
            namespaces:
            - "namespaces"
            - "namespaces"
          weight: 6
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            namespaceSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            topologyKey: "topologyKey"
            namespaces:
            - "namespaces"
            - "namespaces"
          weight: 6
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          namespaceSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          topologyKey: "topologyKey"
          namespaces:
          - "namespaces"
          - "namespaces"
        - labelSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          namespaceSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          topologyKey: "topologyKey"
          namespaces:
          - "namespaces"
          - "namespaces"
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            namespaceSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            topologyKey: "topologyKey"
            namespaces:
            - "namespaces"
            - "namespaces"
          weight: 6
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            namespaceSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            topologyKey: "topologyKey"
            namespaces:
            - "namespaces"
            - "namespaces"
          weight: 6
  k8s.io.v1.DeleteOptions:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      dryRun:
        type: "array"
        description: "When present, indicates that modifications should not be persisted.\
          \ An invalid or unrecognized dryRun directive will result in an error response\
          \ and no further processing of the request. Valid values are: - All: all\
          \ dry run stages will be processed"
        items:
          type: "string"
          default: ""
      gracePeriodSeconds:
        type: "integer"
        format: "int64"
        description: "The duration in seconds before the object should be deleted.\
          \ Value must be non-negative integer. The value zero indicates delete immediately.\
          \ If this value is nil, the default grace period for the specified type\
          \ will be used. Defaults to a per object value if not specified. zero means\
          \ delete immediately."
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      orphanDependents:
        type: "boolean"
        description: "Deprecated: please use the PropagationPolicy, this field will\
          \ be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,\
          \ the \"orphan\" finalizer will be added to/removed from the object's finalizers\
          \ list. Either this field or PropagationPolicy may be set, but not both."
      preconditions:
        description: "Must be fulfilled before a deletion is carried out. If not possible,\
          \ a 409 Conflict status will be returned."
        $ref: "#/definitions/k8s.io.v1.Preconditions"
      propagationPolicy:
        type: "string"
        description: "Whether and how garbage collection will be performed. Either\
          \ this field or OrphanDependents may be set, but not both. The default policy\
          \ is decided by the existing finalizer set in the metadata.finalizers and\
          \ the resource-specific default policy. Acceptable values are: 'Orphan'\
          \ - orphan the dependents; 'Background' - allow the garbage collector to\
          \ delete the dependents in the background; 'Foreground' - a cascading policy\
          \ that deletes all dependents in the foreground."
    description: "DeleteOptions may be provided when deleting an API object."
  k8s.io.v1.DownwardAPIVolumeFile:
    type: "object"
    required:
    - "path"
    properties:
      fieldRef:
        description: "Required: Selects a field of the pod: only annotations, labels,\
          \ name and namespace are supported."
        $ref: "#/definitions/k8s.io.v1.ObjectFieldSelector"
      mode:
        type: "integer"
        format: "int32"
        description: "Optional: mode bits used to set permissions on this file, must\
          \ be an octal value between 0000 and 0777 or a decimal value between 0 and\
          \ 511. YAML accepts both octal and decimal values, JSON requires decimal\
          \ values for mode bits. If not specified, the volume defaultMode will be\
          \ used. This might be in conflict with other options that affect the file\
          \ mode, like fsGroup, and the result can be other mode bits set."
      path:
        type: "string"
        description: "Required: Path is  the relative path name of the file to be\
          \ created. Must not be absolute or contain the '..' path. Must be utf-8\
          \ encoded. The first item of the relative path must not start with '..'"
        default: ""
      resourceFieldRef:
        description: "Selects a resource of the container: only resources limits and\
          \ requests (limits.cpu, limits.memory, requests.cpu and requests.memory)\
          \ are currently supported."
        $ref: "#/definitions/k8s.io.v1.ResourceFieldSelector"
    description: "DownwardAPIVolumeFile represents information to create the file\
      \ containing the pod field"
    example:
      mode: 9
      path: "path"
      resourceFieldRef:
        resource: "resource"
        containerName: "containerName"
      fieldRef:
        apiVersion: "apiVersion"
        fieldPath: "fieldPath"
  k8s.io.v1.ExecAction:
    type: "object"
    properties:
      command:
        type: "array"
        description: "Command is the command line to execute inside the container,\
          \ the working directory for the command  is root ('/') in the container's\
          \ filesystem. The command is simply exec'd, it is not run inside a shell,\
          \ so traditional shell instructions ('|', etc) won't work. To use a shell,\
          \ you need to explicitly call out to that shell. Exit status of 0 is treated\
          \ as live/healthy and non-zero is unhealthy."
        items:
          type: "string"
          default: ""
    description: "ExecAction describes a \"run in container\" action."
    example:
      command:
      - "command"
      - "command"
  k8s.io.v1.FieldsV1:
    type: "object"
    description: "FieldsV1 stores a set of fields in a data structure like a Trie,\
      \ in JSON format.\n\nEach key is either a '.' representing the field itself,\
      \ and will always map to an empty set, or a string representing a sub-field\
      \ or item. The string will follow one of these four formats: 'f:<name>', where\
      \ <name> is the name of a field in a struct, or key in a map 'v:<value>', where\
      \ <value> is the exact json formatted value of a list item 'i:<index>', where\
      \ <index> is position of a item in a list 'k:<keys>', where <keys> is a map\
      \ of  a list item's key fields to their unique values If a key maps to an empty\
      \ Fields value, the field that key represents is part of the set.\n\nThe exact\
      \ format is defined in sigs.k8s.io/structured-merge-diff"
  k8s.io.v1.HTTPGetAction:
    type: "object"
    required:
    - "port"
    properties:
      host:
        type: "string"
        description: "Host name to connect to, defaults to the pod IP. You probably\
          \ want to set \"Host\" in httpHeaders instead."
      httpHeaders:
        type: "array"
        description: "Custom headers to set in the request. HTTP allows repeated headers."
        items:
          $ref: "#/definitions/k8s.io.v1.HTTPHeader"
      path:
        type: "string"
        description: "Path to access on the HTTP server."
      port:
        description: "Name or number of the port to access on the container. Number\
          \ must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        $ref: "#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString"
      scheme:
        type: "string"
        description: "Scheme to use for connecting to the host. Defaults to HTTP.\n\
          \nPossible enum values:\n - `\"HTTP\"` means that the scheme used will be\
          \ http://\n - `\"HTTPS\"` means that the scheme used will be https://"
        enum:
        - "HTTP"
        - "HTTPS"
    description: "HTTPGetAction describes an action based on HTTP Get requests."
    example:
      path: "path"
      scheme: "HTTP"
      port: {}
      host: "host"
      httpHeaders:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
  k8s.io.v1.HTTPHeader:
    type: "object"
    required:
    - "name"
    - "value"
    properties:
      name:
        type: "string"
        description: "The header field name"
        default: ""
      value:
        type: "string"
        description: "The header field value"
        default: ""
    description: "HTTPHeader describes a custom header to be used in HTTP probes"
    example:
      name: "name"
      value: "value"
  k8s.io.v1.LabelSelector:
    type: "object"
    properties:
      matchExpressions:
        type: "array"
        description: "matchExpressions is a list of label selector requirements. The\
          \ requirements are ANDed."
        items:
          $ref: "#/definitions/k8s.io.v1.LabelSelectorRequirement"
      matchLabels:
        type: "object"
        description: "matchLabels is a map of {key,value} pairs. A single {key,value}\
          \ in the matchLabels map is equivalent to an element of matchExpressions,\
          \ whose key field is \"key\", the operator is \"In\", and the values array\
          \ contains only \"value\". The requirements are ANDed."
        additionalProperties:
          type: "string"
          default: ""
    description: "A label selector is a label query over a set of resources. The result\
      \ of matchLabels and matchExpressions are ANDed. An empty label selector matches\
      \ all objects. A null label selector matches no objects."
    example:
      matchExpressions:
      - values:
        - "values"
        - "values"
        key: "key"
        operator: "operator"
      - values:
        - "values"
        - "values"
        key: "key"
        operator: "operator"
      matchLabels:
        key: "matchLabels"
    x-kubernetes-map-type: "atomic"
  k8s.io.v1.LabelSelectorRequirement:
    type: "object"
    required:
    - "key"
    - "operator"
    properties:
      key:
        type: "string"
        description: "key is the label key that the selector applies to."
        default: ""
        x-kubernetes-patch-strategy: "merge"
        x-kubernetes-patch-merge-key: "key"
      operator:
        type: "string"
        description: "operator represents a key's relationship to a set of values.\
          \ Valid operators are In, NotIn, Exists and DoesNotExist."
        default: ""
      values:
        type: "array"
        description: "values is an array of string values. If the operator is In or\
          \ NotIn, the values array must be non-empty. If the operator is Exists or\
          \ DoesNotExist, the values array must be empty. This array is replaced during\
          \ a strategic merge patch."
        items:
          type: "string"
          default: ""
    description: "A label selector requirement is a selector that contains values,\
      \ a key, and an operator that relates the key and values."
    example:
      values:
      - "values"
      - "values"
      key: "key"
      operator: "operator"
  k8s.io.v1.ListMeta:
    type: "object"
    properties:
      continue:
        type: "string"
        description: "continue may be set if the user set a limit on the number of\
          \ items returned, and indicates that the server has more data available.\
          \ The value is opaque and may be used to issue another request to the endpoint\
          \ that served this list to retrieve the next set of available objects. Continuing\
          \ a consistent list may not be possible if the server configuration has\
          \ changed or more than a few minutes have passed. The resourceVersion field\
          \ returned when using this continue value will be identical to the value\
          \ in the first response, unless you have received this token from an error\
          \ message."
      remainingItemCount:
        type: "integer"
        format: "int64"
        description: "remainingItemCount is the number of subsequent items in the\
          \ list which are not included in this list response. If the list request\
          \ contained label or field selectors, then the number of remaining items\
          \ is unknown and the field will be left unset and omitted during serialization.\
          \ If the list is complete (either because it is not chunking or because\
          \ this is the last chunk), then there are no more remaining items and this\
          \ field will be left unset and omitted during serialization. Servers older\
          \ than v1.15 do not set this field. The intended use of the remainingItemCount\
          \ is *estimating* the size of a collection. Clients should not rely on the\
          \ remainingItemCount to be set or to be exact."
      resourceVersion:
        type: "string"
        description: "String that identifies the server's internal version of this\
          \ object that can be used by clients to determine when objects have changed.\
          \ Value must be treated as opaque by clients and passed unmodified back\
          \ to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
      selfLink:
        type: "string"
        description: "selfLink is a URL representing this object. Populated by the\
          \ system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this\
          \ field in 1.20 release and the field is planned to be removed in 1.21 release."
    description: "ListMeta describes metadata that synthetic resources must have,\
      \ including lists and various status objects. A resource may have only one of\
      \ {ObjectMeta, ListMeta}."
    example:
      remainingItemCount: 1
      continue: "continue"
      resourceVersion: "resourceVersion"
      selfLink: "selfLink"
  k8s.io.v1.LocalObjectReference:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
    description: "LocalObjectReference contains enough information to let you locate\
      \ the referenced object inside the same namespace."
    example:
      name: "name"
    x-kubernetes-map-type: "atomic"
  k8s.io.v1.ManagedFieldsEntry:
    type: "object"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the version of this resource that this field\
          \ set applies to. The format is \"group/version\" just like the top-level\
          \ APIVersion field. It is necessary to track the version of a field set\
          \ because it cannot be automatically converted."
      fieldsType:
        type: "string"
        description: "FieldsType is the discriminator for the different fields format\
          \ and version. There is currently only one possible value: \"FieldsV1\""
      fieldsV1:
        description: "FieldsV1 holds the first JSON version format as described in\
          \ the \"FieldsV1\" type."
        $ref: "#/definitions/k8s.io.v1.FieldsV1"
      manager:
        type: "string"
        description: "Manager is an identifier of the workflow managing these fields."
      operation:
        type: "string"
        description: "Operation is the type of operation which lead to this ManagedFieldsEntry\
          \ being created. The only valid values for this field are 'Apply' and 'Update'."
      subresource:
        type: "string"
        description: "Subresource is the name of the subresource used to update that\
          \ object, or empty string if the object was updated through the main resource.\
          \ The value of this field is used to distinguish between managers, even\
          \ if they share the same name. For example, a status update will be distinct\
          \ from a regular update using the same manager name. Note that the APIVersion\
          \ field is not related to the Subresource field and it always corresponds\
          \ to the version of the main resource."
      time:
        description: "Time is timestamp of when these fields were set. It should always\
          \ be empty if Operation is 'Apply'"
        $ref: "#/definitions/k8s.io.v1.Time"
    description: "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version\
      \ of the resource that the fieldset applies to."
    example:
      apiVersion: "apiVersion"
      fieldsV1: {}
      manager: "manager"
      subresource: "subresource"
      operation: "operation"
      fieldsType: "fieldsType"
  k8s.io.v1.NodeAffinity:
    type: "object"
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        type: "array"
        description: "The scheduler will prefer to schedule pods to nodes that satisfy\
          \ the affinity expressions specified by this field, but it may choose a\
          \ node that violates one or more of the expressions. The node that is most\
          \ preferred is the one with the greatest sum of weights, i.e. for each node\
          \ that meets all of the scheduling requirements (resource request, requiredDuringScheduling\
          \ affinity expressions, etc.), compute a sum by iterating through the elements\
          \ of this field and adding \"weight\" to the sum if the node matches the\
          \ corresponding matchExpressions; the node(s) with the highest sum are the\
          \ most preferred."
        items:
          $ref: "#/definitions/k8s.io.v1.PreferredSchedulingTerm"
      requiredDuringSchedulingIgnoredDuringExecution:
        description: "If the affinity requirements specified by this field are not\
          \ met at scheduling time, the pod will not be scheduled onto the node. If\
          \ the affinity requirements specified by this field cease to be met at some\
          \ point during pod execution (e.g. due to an update), the system may or\
          \ may not try to eventually evict the pod from its node."
        $ref: "#/definitions/k8s.io.v1.NodeSelector"
    description: "Node affinity is a group of node affinity scheduling rules."
    example:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
          matchFields:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
        - matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
          matchFields:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
      preferredDuringSchedulingIgnoredDuringExecution:
      - preference:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
          matchFields:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
        weight: 0
      - preference:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
          matchFields:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "DoesNotExist"
        weight: 0
  k8s.io.v1.NodeSelector:
    type: "object"
    required:
    - "nodeSelectorTerms"
    properties:
      nodeSelectorTerms:
        type: "array"
        description: "Required. A list of node selector terms. The terms are ORed."
        items:
          $ref: "#/definitions/k8s.io.v1.NodeSelectorTerm"
    description: "A node selector represents the union of the results of one or more\
      \ label queries over a set of nodes; that is, it represents the OR of the selectors\
      \ represented by the node selector terms."
    example:
      nodeSelectorTerms:
      - matchExpressions:
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "DoesNotExist"
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "DoesNotExist"
        matchFields:
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "DoesNotExist"
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "DoesNotExist"
      - matchExpressions:
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "DoesNotExist"
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "DoesNotExist"
        matchFields:
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "DoesNotExist"
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "DoesNotExist"
    x-kubernetes-map-type: "atomic"
  k8s.io.v1.NodeSelectorRequirement:
    type: "object"
    required:
    - "key"
    - "operator"
    properties:
      key:
        type: "string"
        description: "The label key that the selector applies to."
        default: ""
      operator:
        type: "string"
        description: "Represents a key's relationship to a set of values. Valid operators\
          \ are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n\nPossible enum values:\n\
          \ - `\"DoesNotExist\"`\n - `\"Exists\"`\n - `\"Gt\"`\n - `\"In\"`\n - `\"\
          Lt\"`\n - `\"NotIn\"`"
        default: ""
        enum:
        - "DoesNotExist"
        - "Exists"
        - "Gt"
        - "In"
        - "Lt"
        - "NotIn"
      values:
        type: "array"
        description: "An array of string values. If the operator is In or NotIn, the\
          \ values array must be non-empty. If the operator is Exists or DoesNotExist,\
          \ the values array must be empty. If the operator is Gt or Lt, the values\
          \ array must have a single element, which will be interpreted as an integer.\
          \ This array is replaced during a strategic merge patch."
        items:
          type: "string"
          default: ""
    description: "A node selector requirement is a selector that contains values,\
      \ a key, and an operator that relates the key and values."
    example:
      values:
      - "values"
      - "values"
      key: "key"
      operator: "DoesNotExist"
  k8s.io.v1.NodeSelectorTerm:
    type: "object"
    properties:
      matchExpressions:
        type: "array"
        description: "A list of node selector requirements by node's labels."
        items:
          $ref: "#/definitions/k8s.io.v1.NodeSelectorRequirement"
      matchFields:
        type: "array"
        description: "A list of node selector requirements by node's fields."
        items:
          $ref: "#/definitions/k8s.io.v1.NodeSelectorRequirement"
    description: "A null or empty node selector term matches no objects. The requirements\
      \ of them are ANDed. The TopologySelectorTerm type implements a subset of the\
      \ NodeSelectorTerm."
    example:
      matchExpressions:
      - values:
        - "values"
        - "values"
        key: "key"
        operator: "DoesNotExist"
      - values:
        - "values"
        - "values"
        key: "key"
        operator: "DoesNotExist"
      matchFields:
      - values:
        - "values"
        - "values"
        key: "key"
        operator: "DoesNotExist"
      - values:
        - "values"
        - "values"
        key: "key"
        operator: "DoesNotExist"
    x-kubernetes-map-type: "atomic"
  k8s.io.v1.ObjectFieldSelector:
    type: "object"
    required:
    - "fieldPath"
    properties:
      apiVersion:
        type: "string"
        description: "Version of the schema the FieldPath is written in terms of,\
          \ defaults to \"v1\"."
      fieldPath:
        type: "string"
        description: "Path of the field to select in the specified API version."
        default: ""
    description: "ObjectFieldSelector selects an APIVersioned field of an object."
    example:
      apiVersion: "apiVersion"
      fieldPath: "fieldPath"
    x-kubernetes-map-type: "atomic"
  k8s.io.v1.ObjectMeta:
    type: "object"
    required:
    - "name"
    properties:
      annotations:
        type: "object"
        description: "Annotations is an unstructured key value map stored with a resource\
          \ that may be set by external tools to store and retrieve arbitrary metadata.\
          \ They are not queryable and should be preserved when modifying objects.\
          \ More info: http://kubernetes.io/docs/user-guide/annotations"
        additionalProperties:
          type: "string"
          default: ""
      clusterName:
        type: "string"
        description: "The name of the cluster which the object belongs to. This is\
          \ used to distinguish resources with same name and namespace in different\
          \ clusters. This field is not set anywhere right now and apiserver is going\
          \ to ignore it if set in create or update request."
      creationTimestamp:
        description: "CreationTimestamp is a timestamp representing the server time\
          \ when this object was created. It is not guaranteed to be set in happens-before\
          \ order across separate operations. Clients may not set this value. It is\
          \ represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\
          \ Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        $ref: "#/definitions/k8s.io.v1.Time"
      deletionGracePeriodSeconds:
        type: "integer"
        format: "int64"
        description: "Number of seconds allowed for this object to gracefully terminate\
          \ before it will be removed from the system. Only set when deletionTimestamp\
          \ is also set. May only be shortened. Read-only."
      deletionTimestamp:
        description: "DeletionTimestamp is RFC 3339 date and time at which this resource\
          \ will be deleted. This field is set by the server when a graceful deletion\
          \ is requested by the user, and is not directly settable by a client. The\
          \ resource is expected to be deleted (no longer visible from resource lists,\
          \ and not reachable by name) after the time in this field, once the finalizers\
          \ list is empty. As long as the finalizers list contains items, deletion\
          \ is blocked. Once the deletionTimestamp is set, this value may not be unset\
          \ or be set further into the future, although it may be shortened or the\
          \ resource may be deleted prior to this time. For example, a user may request\
          \ that a pod is deleted in 30 seconds. The Kubelet will react by sending\
          \ a graceful termination signal to the containers in the pod. After that\
          \ 30 seconds, the Kubelet will send a hard termination signal (SIGKILL)\
          \ to the container and after cleanup, remove the pod from the API. In the\
          \ presence of network partitions, this object may still exist after this\
          \ timestamp, until an administrator or automated process can determine the\
          \ resource is fully terminated. If not set, graceful deletion of the object\
          \ has not been requested.\n\nPopulated by the system when a graceful deletion\
          \ is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        $ref: "#/definitions/k8s.io.v1.Time"
      finalizers:
        type: "array"
        description: "Must be empty before the object is deleted from the registry.\
          \ Each entry is an identifier for the responsible component that will remove\
          \ the entry from the list. If the deletionTimestamp of the object is non-nil,\
          \ entries in this list can only be removed. Finalizers may be processed\
          \ and removed in any order.  Order is NOT enforced because it introduces\
          \ significant risk of stuck finalizers. finalizers is a shared field, any\
          \ actor with permission can reorder it. If the finalizer list is processed\
          \ in order, then this can lead to a situation in which the component responsible\
          \ for the first finalizer in the list is waiting for a signal (field value,\
          \ external system, or other) produced by a component responsible for a finalizer\
          \ later in the list, resulting in a deadlock. Without enforced ordering\
          \ finalizers are free to order amongst themselves and are not vulnerable\
          \ to ordering changes in the list."
        items:
          type: "string"
          default: ""
        x-kubernetes-patch-strategy: "merge"
      generateName:
        type: "string"
        description: "GenerateName is an optional prefix, used by the server, to generate\
          \ a unique name ONLY IF the Name field has not been provided. If this field\
          \ is used, the name returned to the client will be different than the name\
          \ passed. This value will also be combined with a unique suffix. The provided\
          \ value has the same validation rules as the Name field, and may be truncated\
          \ by the length of the suffix required to make the value unique on the server.\n\
          \nIf this field is specified and the generated name exists, the server will\
          \ NOT return a 409 - instead, it will either return 201 Created or 500 with\
          \ Reason ServerTimeout indicating a unique name could not be found in the\
          \ time allotted, and the client should retry (optionally after the time\
          \ indicated in the Retry-After header).\n\nApplied only if Name is not specified.\
          \ More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
      generation:
        type: "integer"
        format: "int64"
        description: "A sequence number representing a specific generation of the\
          \ desired state. Populated by the system. Read-only."
      labels:
        type: "object"
        description: "Map of string keys and values that can be used to organize and\
          \ categorize (scope and select) objects. May match selectors of replication\
          \ controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
        additionalProperties:
          type: "string"
          default: ""
      managedFields:
        type: "array"
        description: "ManagedFields maps workflow-id and version to the set of fields\
          \ that are managed by that workflow. This is mostly for internal housekeeping,\
          \ and users typically shouldn't need to set or understand this field. A\
          \ workflow can be the user's name, a controller's name, or the name of a\
          \ specific apply path like \"ci-cd\". The set of fields is always in the\
          \ version that the workflow used when modifying the object."
        items:
          $ref: "#/definitions/k8s.io.v1.ManagedFieldsEntry"
      name:
        type: "string"
        description: "Name must be unique within a namespace. Is required when creating\
          \ resources, although some resources may allow a client to request the generation\
          \ of an appropriate name automatically. Name is primarily intended for creation\
          \ idempotence and configuration definition. Cannot be updated. More info:\
          \ http://kubernetes.io/docs/user-guide/identifiers#names"
      namespace:
        type: "string"
        description: "Namespace defines the space within which each name must be unique.\
          \ An empty namespace is equivalent to the \"default\" namespace, but \"\
          default\" is the canonical representation. Not all objects are required\
          \ to be scoped to a namespace - the value of this field for those objects\
          \ will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
      ownerReferences:
        type: "array"
        description: "List of objects depended by this object. If ALL objects in the\
          \ list have been deleted, this object will be garbage collected. If this\
          \ object is managed by a controller, then an entry in this list will point\
          \ to this controller, with the controller field set to true. There cannot\
          \ be more than one managing controller."
        items:
          $ref: "#/definitions/k8s.io.v1.OwnerReference"
        x-kubernetes-patch-strategy: "merge"
        x-kubernetes-patch-merge-key: "uid"
      resourceVersion:
        type: "string"
        description: "An opaque value that represents the internal version of this\
          \ object that can be used by clients to determine when objects have changed.\
          \ May be used for optimistic concurrency, change detection, and the watch\
          \ operation on a resource or set of resources. Clients must treat these\
          \ values as opaque and passed unmodified back to the server. They may only\
          \ be valid for a particular resource or set of resources.\n\nPopulated by\
          \ the system. Read-only. Value must be treated as opaque by clients and\
          \ . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
      selfLink:
        type: "string"
        description: "SelfLink is a URL representing this object. Populated by the\
          \ system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this\
          \ field in 1.20 release and the field is planned to be removed in 1.21 release."
      uid:
        type: "string"
        description: "UID is the unique in time and space value for this object. It\
          \ is typically generated by the server on successful creation of a resource\
          \ and is not allowed to change on PUT operations.\n\nPopulated by the system.\
          \ Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
    description: "ObjectMeta is metadata that all persisted resources must have, which\
      \ includes all objects users must create."
    example:
      generation: 6
      finalizers:
      - "finalizers"
      - "finalizers"
      resourceVersion: "resourceVersion"
      annotations:
        key: "annotations"
      generateName: "generateName"
      labels:
        key: "labels"
      ownerReferences:
      - uid: "uid"
        controller: true
        apiVersion: "apiVersion"
        kind: "kind"
        name: "name"
        blockOwnerDeletion: true
      - uid: "uid"
        controller: true
        apiVersion: "apiVersion"
        kind: "kind"
        name: "name"
        blockOwnerDeletion: true
      selfLink: "selfLink"
      deletionGracePeriodSeconds: 0
      uid: "uid"
      managedFields:
      - apiVersion: "apiVersion"
        fieldsV1: {}
        manager: "manager"
        subresource: "subresource"
        operation: "operation"
        fieldsType: "fieldsType"
      - apiVersion: "apiVersion"
        fieldsV1: {}
        manager: "manager"
        subresource: "subresource"
        operation: "operation"
        fieldsType: "fieldsType"
      clusterName: "clusterName"
      creationTimestamp: {}
      name: "name"
      namespace: "namespace"
  k8s.io.v1.OwnerReference:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    - "name"
    - "uid"
    properties:
      apiVersion:
        type: "string"
        description: "API version of the referent."
        default: ""
      blockOwnerDeletion:
        type: "boolean"
        description: "If true, AND if the owner has the \"foregroundDeletion\" finalizer,\
          \ then the owner cannot be deleted from the key-value store until this reference\
          \ is removed. Defaults to false. To set this field, a user needs \"delete\"\
          \ permission of the owner, otherwise 422 (Unprocessable Entity) will be\
          \ returned."
      controller:
        type: "boolean"
        description: "If true, this reference points to the managing controller."
      kind:
        type: "string"
        description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        default: ""
      name:
        type: "string"
        description: "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        default: ""
      uid:
        type: "string"
        description: "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
        default: ""
    description: "OwnerReference contains enough information to let you identify an\
      \ owning object. An owning object must be in the same namespace as the dependent,\
      \ or be cluster-scoped, so there is no namespace field."
    example:
      uid: "uid"
      controller: true
      apiVersion: "apiVersion"
      kind: "kind"
      name: "name"
      blockOwnerDeletion: true
    x-kubernetes-map-type: "atomic"
  k8s.io.v1.Patch:
    type: "object"
    description: "Patch is provided to give a concrete name and type to the Kubernetes\
      \ PATCH request body."
  k8s.io.v1.PersistentVolumeClaim:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        description: "Spec defines the desired characteristics of a volume requested\
          \ by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaimSpec"
      status:
        description: "Status represents the current information/status of a persistent\
          \ volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaimStatus"
    description: "PersistentVolumeClaim is a user's request for and claim to a persistent\
      \ volume"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        storageClassName: "storageClassName"
        dataSourceRef:
          apiGroup: "apiGroup"
          kind: "kind"
          name: "name"
        volumeName: "volumeName"
        resources:
          requests: {}
          limits:
            key: {}
        selector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        accessModes:
        - "accessModes"
        - "accessModes"
        dataSource:
          apiGroup: "apiGroup"
          kind: "kind"
          name: "name"
        volumeMode: "volumeMode"
      status:
        phase: "Bound"
        allocatedResources: {}
        accessModes:
        - "accessModes"
        - "accessModes"
        resizeStatus: "resizeStatus"
        conditions:
        - reason: "reason"
          message: "message"
          type: "type"
          status: "status"
        - reason: "reason"
          message: "message"
          type: "type"
          status: "status"
        capacity: {}
  k8s.io.v1.PersistentVolumeClaimCondition:
    type: "object"
    required:
    - "status"
    - "type"
    properties:
      lastProbeTime:
        description: "Last time we probed the condition."
        $ref: "#/definitions/k8s.io.v1.Time"
      lastTransitionTime:
        description: "Last time the condition transitioned from one status to another."
        $ref: "#/definitions/k8s.io.v1.Time"
      message:
        type: "string"
        description: "Human-readable message indicating details about last transition."
      reason:
        type: "string"
        description: "Unique, this should be a short, machine understandable string\
          \ that gives the reason for condition's last transition. If it reports \"\
          ResizeStarted\" that means the underlying persistent volume is being resized."
      status:
        type: "string"
        default: ""
      type:
        type: "string"
        default: ""
    description: "PersistentVolumeClaimCondition contails details about state of pvc"
    example:
      reason: "reason"
      message: "message"
      type: "type"
      status: "status"
  k8s.io.v1.PersistentVolumeClaimList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        description: "A list of persistent volume claims. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        items:
          $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaim"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "PersistentVolumeClaimList is a list of PersistentVolumeClaim items."
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          storageClassName: "storageClassName"
          dataSourceRef:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
          volumeName: "volumeName"
          resources:
            requests: {}
            limits:
              key: {}
          selector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          accessModes:
          - "accessModes"
          - "accessModes"
          dataSource:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
          volumeMode: "volumeMode"
        status:
          phase: "Bound"
          allocatedResources: {}
          accessModes:
          - "accessModes"
          - "accessModes"
          resizeStatus: "resizeStatus"
          conditions:
          - reason: "reason"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            message: "message"
            type: "type"
            status: "status"
          capacity: {}
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          storageClassName: "storageClassName"
          dataSourceRef:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
          volumeName: "volumeName"
          resources:
            requests: {}
            limits:
              key: {}
          selector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          accessModes:
          - "accessModes"
          - "accessModes"
          dataSource:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
          volumeMode: "volumeMode"
        status:
          phase: "Bound"
          allocatedResources: {}
          accessModes:
          - "accessModes"
          - "accessModes"
          resizeStatus: "resizeStatus"
          conditions:
          - reason: "reason"
            message: "message"
            type: "type"
            status: "status"
          - reason: "reason"
            message: "message"
            type: "type"
            status: "status"
          capacity: {}
  k8s.io.v1.PersistentVolumeClaimSpec:
    type: "object"
    properties:
      accessModes:
        type: "array"
        description: "AccessModes contains the desired access modes the volume should\
          \ have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"
        items:
          type: "string"
          default: ""
      dataSource:
        description: "This field can be used to specify either: * An existing VolumeSnapshot\
          \ object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim)\
          \ If the provisioner or an external controller can support the specified\
          \ data source, it will create a new volume based on the contents of the\
          \ specified data source. If the AnyVolumeDataSource feature gate is enabled,\
          \ this field will always have the same contents as the DataSourceRef field."
        $ref: "#/definitions/k8s.io.v1.TypedLocalObjectReference"
      dataSourceRef:
        description: "Specifies the object from which to populate the volume with\
          \ data, if a non-empty volume is desired. This may be any local object from\
          \ a non-empty API group (non core object) or a PersistentVolumeClaim object.\
          \ When this field is specified, volume binding will only succeed if the\
          \ type of the specified object matches some installed volume populator or\
          \ dynamic provisioner. This field will replace the functionality of the\
          \ DataSource field and as such if both fields are non-empty, they must have\
          \ the same value. For backwards compatibility, both fields (DataSource and\
          \ DataSourceRef) will be set to the same value automatically if one of them\
          \ is empty and the other is non-empty. There are two important differences\
          \ between DataSource and DataSourceRef: * While DataSource only allows two\
          \ specific types of objects, DataSourceRef\n  allows any non-core object,\
          \ as well as PersistentVolumeClaim objects.\n* While DataSource ignores\
          \ disallowed values (dropping them), DataSourceRef\n  preserves all values,\
          \ and generates an error if a disallowed value is\n  specified.\n(Alpha)\
          \ Using this field requires the AnyVolumeDataSource feature gate to be enabled."
        $ref: "#/definitions/k8s.io.v1.TypedLocalObjectReference"
      resources:
        description: "Resources represents the minimum resources the volume should\
          \ have. If RecoverVolumeExpansionFailure feature is enabled users are allowed\
          \ to specify resource requirements that are lower than previous value but\
          \ must still be higher than capacity recorded in the status field of the\
          \ claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
        $ref: "#/definitions/k8s.io.v1.ResourceRequirements"
      selector:
        description: "A label query over volumes to consider for binding."
        $ref: "#/definitions/k8s.io.v1.LabelSelector"
      storageClassName:
        type: "string"
        description: "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
      volumeMode:
        type: "string"
        description: "volumeMode defines what type of volume is required by the claim.\
          \ Value of Filesystem is implied when not included in claim spec."
      volumeName:
        type: "string"
        description: "VolumeName is the binding reference to the PersistentVolume\
          \ backing this claim."
    description: "PersistentVolumeClaimSpec describes the common attributes of storage\
      \ devices and allows a Source for provider-specific attributes"
    example:
      storageClassName: "storageClassName"
      dataSourceRef:
        apiGroup: "apiGroup"
        kind: "kind"
        name: "name"
      volumeName: "volumeName"
      resources:
        requests: {}
        limits:
          key: {}
      selector:
        matchExpressions:
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "operator"
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "operator"
        matchLabels:
          key: "matchLabels"
      accessModes:
      - "accessModes"
      - "accessModes"
      dataSource:
        apiGroup: "apiGroup"
        kind: "kind"
        name: "name"
      volumeMode: "volumeMode"
  k8s.io.v1.PersistentVolumeClaimStatus:
    type: "object"
    properties:
      accessModes:
        type: "array"
        description: "AccessModes contains the actual access modes the volume backing\
          \ the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"
        items:
          type: "string"
          default: ""
      allocatedResources:
        type: "object"
        description: "The storage resource within AllocatedResources tracks the capacity\
          \ allocated to a PVC. It may be larger than the actual capacity when a volume\
          \ expansion operation is requested. For storage quota, the larger value\
          \ from allocatedResources and PVC.spec.resources is used. If allocatedResources\
          \ is not set, PVC.spec.resources alone is used for quota calculation. If\
          \ a volume expansion capacity request is lowered, allocatedResources is\
          \ only lowered if there are no expansion operations in progress and if the\
          \ actual volume capacity is equal or lower than the requested capacity.\
          \ This is an alpha field and requires enabling RecoverVolumeExpansionFailure\
          \ feature."
        additionalProperties:
          $ref: "#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity"
      capacity:
        type: "object"
        description: "Represents the actual resources of the underlying volume."
        additionalProperties:
          $ref: "#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity"
      conditions:
        type: "array"
        description: "Current Condition of persistent volume claim. If underlying\
          \ persistent volume is being resized then the Condition will be set to 'ResizeStarted'."
        items:
          $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaimCondition"
        x-kubernetes-patch-strategy: "merge"
        x-kubernetes-patch-merge-key: "type"
      phase:
        type: "string"
        description: "Phase represents the current phase of PersistentVolumeClaim.\n\
          \nPossible enum values:\n - `\"Bound\"` used for PersistentVolumeClaims\
          \ that are bound\n - `\"Lost\"` used for PersistentVolumeClaims that lost\
          \ their underlying PersistentVolume. The claim was bound to a PersistentVolume\
          \ and this volume does not exist any longer and all data on it was lost.\n\
          \ - `\"Pending\"` used for PersistentVolumeClaims that are not yet bound"
        enum:
        - "Bound"
        - "Lost"
        - "Pending"
      resizeStatus:
        type: "string"
        description: "ResizeStatus stores status of resize operation. ResizeStatus\
          \ is not set by default but when expansion is complete resizeStatus is set\
          \ to empty string by resize controller or kubelet. This is an alpha field\
          \ and requires enabling RecoverVolumeExpansionFailure feature."
    description: "PersistentVolumeClaimStatus is the current status of a persistent\
      \ volume claim."
    example:
      phase: "Bound"
      allocatedResources: {}
      accessModes:
      - "accessModes"
      - "accessModes"
      resizeStatus: "resizeStatus"
      conditions:
      - reason: "reason"
        message: "message"
        type: "type"
        status: "status"
      - reason: "reason"
        message: "message"
        type: "type"
        status: "status"
      capacity: {}
  k8s.io.v1.PersistentVolumeClaimVolumeSource:
    type: "object"
    required:
    - "claimName"
    properties:
      claimName:
        type: "string"
        description: "ClaimName is the name of a PersistentVolumeClaim in the same\
          \ namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        default: ""
      readOnly:
        type: "boolean"
        description: "Will force the ReadOnly setting in VolumeMounts. Default false."
    description: "PersistentVolumeClaimVolumeSource references the user's PVC in the\
      \ same namespace. This volume finds the bound PV and mounts that volume for\
      \ the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around\
      \ another type of volume that is owned by someone else (the system)."
    example:
      claimName: "claimName"
      readOnly: true
  k8s.io.v1.PodAffinity:
    type: "object"
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        type: "array"
        description: "The scheduler will prefer to schedule pods to nodes that satisfy\
          \ the affinity expressions specified by this field, but it may choose a\
          \ node that violates one or more of the expressions. The node that is most\
          \ preferred is the one with the greatest sum of weights, i.e. for each node\
          \ that meets all of the scheduling requirements (resource request, requiredDuringScheduling\
          \ affinity expressions, etc.), compute a sum by iterating through the elements\
          \ of this field and adding \"weight\" to the sum if the node has pods which\
          \ matches the corresponding podAffinityTerm; the node(s) with the highest\
          \ sum are the most preferred."
        items:
          $ref: "#/definitions/k8s.io.v1.WeightedPodAffinityTerm"
      requiredDuringSchedulingIgnoredDuringExecution:
        type: "array"
        description: "If the affinity requirements specified by this field are not\
          \ met at scheduling time, the pod will not be scheduled onto the node. If\
          \ the affinity requirements specified by this field cease to be met at some\
          \ point during pod execution (e.g. due to a pod label update), the system\
          \ may or may not try to eventually evict the pod from its node. When there\
          \ are multiple elements, the lists of nodes corresponding to each podAffinityTerm\
          \ are intersected, i.e. all terms must be satisfied."
        items:
          $ref: "#/definitions/k8s.io.v1.PodAffinityTerm"
    description: "Pod affinity is a group of inter pod affinity scheduling rules."
    example:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        namespaceSelector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        topologyKey: "topologyKey"
        namespaces:
        - "namespaces"
        - "namespaces"
      - labelSelector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        namespaceSelector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        topologyKey: "topologyKey"
        namespaces:
        - "namespaces"
        - "namespaces"
      preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          namespaceSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          topologyKey: "topologyKey"
          namespaces:
          - "namespaces"
          - "namespaces"
        weight: 6
      - podAffinityTerm:
          labelSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          namespaceSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          topologyKey: "topologyKey"
          namespaces:
          - "namespaces"
          - "namespaces"
        weight: 6
  k8s.io.v1.PodAffinityTerm:
    type: "object"
    required:
    - "topologyKey"
    properties:
      labelSelector:
        description: "A label query over a set of resources, in this case pods."
        $ref: "#/definitions/k8s.io.v1.LabelSelector"
      namespaceSelector:
        description: "A label query over the set of namespaces that the term applies\
          \ to. The term is applied to the union of the namespaces selected by this\
          \ field and the ones listed in the namespaces field. null selector and null\
          \ or empty namespaces list means \"this pod's namespace\". An empty selector\
          \ ({}) matches all namespaces. This field is beta-level and is only honored\
          \ when PodAffinityNamespaceSelector feature is enabled."
        $ref: "#/definitions/k8s.io.v1.LabelSelector"
      namespaces:
        type: "array"
        description: "namespaces specifies a static list of namespace names that the\
          \ term applies to. The term is applied to the union of the namespaces listed\
          \ in this field and the ones selected by namespaceSelector. null or empty\
          \ namespaces list and null namespaceSelector means \"this pod's namespace\""
        items:
          type: "string"
          default: ""
      topologyKey:
        type: "string"
        description: "This pod should be co-located (affinity) or not co-located (anti-affinity)\
          \ with the pods matching the labelSelector in the specified namespaces,\
          \ where co-located is defined as running on a node whose value of the label\
          \ with key topologyKey matches that of any node on which any of the selected\
          \ pods is running. Empty topologyKey is not allowed."
        default: ""
    description: "Defines a set of pods (namely those matching the labelSelector relative\
      \ to the given namespace(s)) that this pod should be co-located (affinity) or\
      \ not co-located (anti-affinity) with, where co-located is defined as running\
      \ on a node whose value of the label with key <topologyKey> matches that of\
      \ any node on which a pod of the set of pods is running"
    example:
      labelSelector:
        matchExpressions:
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "operator"
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "operator"
        matchLabels:
          key: "matchLabels"
      namespaceSelector:
        matchExpressions:
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "operator"
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "operator"
        matchLabels:
          key: "matchLabels"
      topologyKey: "topologyKey"
      namespaces:
      - "namespaces"
      - "namespaces"
  k8s.io.v1.PodAntiAffinity:
    type: "object"
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        type: "array"
        description: "The scheduler will prefer to schedule pods to nodes that satisfy\
          \ the anti-affinity expressions specified by this field, but it may choose\
          \ a node that violates one or more of the expressions. The node that is\
          \ most preferred is the one with the greatest sum of weights, i.e. for each\
          \ node that meets all of the scheduling requirements (resource request,\
          \ requiredDuringScheduling anti-affinity expressions, etc.), compute a sum\
          \ by iterating through the elements of this field and adding \"weight\"\
          \ to the sum if the node has pods which matches the corresponding podAffinityTerm;\
          \ the node(s) with the highest sum are the most preferred."
        items:
          $ref: "#/definitions/k8s.io.v1.WeightedPodAffinityTerm"
      requiredDuringSchedulingIgnoredDuringExecution:
        type: "array"
        description: "If the anti-affinity requirements specified by this field are\
          \ not met at scheduling time, the pod will not be scheduled onto the node.\
          \ If the anti-affinity requirements specified by this field cease to be\
          \ met at some point during pod execution (e.g. due to a pod label update),\
          \ the system may or may not try to eventually evict the pod from its node.\
          \ When there are multiple elements, the lists of nodes corresponding to\
          \ each podAffinityTerm are intersected, i.e. all terms must be satisfied."
        items:
          $ref: "#/definitions/k8s.io.v1.PodAffinityTerm"
    description: "Pod anti affinity is a group of inter pod anti affinity scheduling\
      \ rules."
    example:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        namespaceSelector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        topologyKey: "topologyKey"
        namespaces:
        - "namespaces"
        - "namespaces"
      - labelSelector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        namespaceSelector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        topologyKey: "topologyKey"
        namespaces:
        - "namespaces"
        - "namespaces"
      preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          namespaceSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          topologyKey: "topologyKey"
          namespaces:
          - "namespaces"
          - "namespaces"
        weight: 6
      - podAffinityTerm:
          labelSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          namespaceSelector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          topologyKey: "topologyKey"
          namespaces:
          - "namespaces"
          - "namespaces"
        weight: 6
  k8s.io.v1.PodDNSConfig:
    type: "object"
    properties:
      nameservers:
        type: "array"
        description: "A list of DNS name server IP addresses. This will be appended\
          \ to the base nameservers generated from DNSPolicy. Duplicated nameservers\
          \ will be removed."
        items:
          type: "string"
          default: ""
      options:
        type: "array"
        description: "A list of DNS resolver options. This will be merged with the\
          \ base options generated from DNSPolicy. Duplicated entries will be removed.\
          \ Resolution options given in Options will override those that appear in\
          \ the base DNSPolicy."
        items:
          $ref: "#/definitions/k8s.io.v1.PodDNSConfigOption"
      searches:
        type: "array"
        description: "A list of DNS search domains for host-name lookup. This will\
          \ be appended to the base search paths generated from DNSPolicy. Duplicated\
          \ search paths will be removed."
        items:
          type: "string"
          default: ""
    description: "PodDNSConfig defines the DNS parameters of a pod in addition to\
      \ those generated from DNSPolicy."
    example:
      searches:
      - "searches"
      - "searches"
      nameservers:
      - "nameservers"
      - "nameservers"
      options:
      - name: "name"
        value: "value"
      - name: "name"
        value: "value"
  k8s.io.v1.PodDNSConfigOption:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Required."
      value:
        type: "string"
    description: "PodDNSConfigOption defines DNS resolver options of a pod."
    example:
      name: "name"
      value: "value"
  k8s.io.v1.Preconditions:
    type: "object"
    properties:
      resourceVersion:
        type: "string"
        description: "Specifies the target ResourceVersion"
      uid:
        type: "string"
        description: "Specifies the target UID."
    description: "Preconditions must be fulfilled before an operation (update, delete,\
      \ etc.) is carried out."
  k8s.io.v1.PreferredSchedulingTerm:
    type: "object"
    required:
    - "preference"
    - "weight"
    properties:
      preference:
        description: "A node selector term, associated with the corresponding weight."
        $ref: "#/definitions/k8s.io.v1.NodeSelectorTerm"
      weight:
        type: "integer"
        format: "int32"
        description: "Weight associated with matching the corresponding nodeSelectorTerm,\
          \ in the range 1-100."
        default: 0
    description: "An empty preferred scheduling term matches all objects with implicit\
      \ weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no\
      \ objects (i.e. is also a no-op)."
    example:
      preference:
        matchExpressions:
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "DoesNotExist"
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "DoesNotExist"
        matchFields:
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "DoesNotExist"
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "DoesNotExist"
      weight: 0
  k8s.io.v1.ResourceFieldSelector:
    type: "object"
    required:
    - "resource"
    properties:
      containerName:
        type: "string"
        description: "Container name: required for volumes, optional for env vars"
      divisor:
        description: "Specifies the output format of the exposed resources, defaults\
          \ to \"1\""
        $ref: "#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity"
      resource:
        type: "string"
        description: "Required: resource to select"
        default: ""
    description: "ResourceFieldSelector represents container resources (cpu, memory)\
      \ and their output format"
    example:
      resource: "resource"
      containerName: "containerName"
    x-kubernetes-map-type: "atomic"
  k8s.io.v1.ResourceRequirements:
    type: "object"
    properties:
      limits:
        type: "object"
        description: "Limits describes the maximum amount of compute resources allowed.\
          \ More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        additionalProperties:
          $ref: "#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity"
      requests:
        type: "object"
        description: "Requests describes the minimum amount of compute resources required.\
          \ If Requests is omitted for a container, it defaults to Limits if that\
          \ is explicitly specified, otherwise to an implementation-defined value.\
          \ More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        additionalProperties:
          $ref: "#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity"
    description: "ResourceRequirements describes the compute resource requirements."
    example:
      requests: {}
      limits:
        key: {}
  k8s.io.v1.Status:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      code:
        type: "integer"
        format: "int32"
        description: "Suggested HTTP return code for this status, 0 if not set."
      details:
        description: "Extended data associated with the reason.  Each reason may define\
          \ its own extended details. This field is optional and the data returned\
          \ is not guaranteed to conform to any schema except that defined by the\
          \ reason type."
        $ref: "#/definitions/k8s.io.v1.StatusDetails"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      message:
        type: "string"
        description: "A human-readable description of the status of this operation."
      metadata:
        description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        $ref: "#/definitions/k8s.io.v1.ListMeta"
      reason:
        type: "string"
        description: "A machine-readable description of why this operation is in the\
          \ \"Failure\" status. If this value is empty there is no information available.\
          \ A Reason clarifies an HTTP status code but does not override it."
      status:
        type: "string"
        description: "Status of the operation. One of: \"Success\" or \"Failure\"\
          . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
    description: "Status is a return value for calls that don't return other objects."
    example:
      reason: "reason"
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      code: 0
      kind: "kind"
      details:
        uid: "uid"
        kind: "kind"
        causes:
        - reason: "reason"
          field: "field"
          message: "message"
        - reason: "reason"
          field: "field"
          message: "message"
        retryAfterSeconds: 6
        name: "name"
        group: "group"
      message: "message"
      status: "status"
  k8s.io.v1.StatusCause:
    type: "object"
    properties:
      field:
        type: "string"
        description: "The field of the resource that has caused this error, as named\
          \ by its JSON serialization. May include dot and postfix notation for nested\
          \ attributes. Arrays are zero-indexed.  Fields may appear more than once\
          \ in an array of causes due to fields having multiple errors. Optional.\n\
          \nExamples:\n  \"name\" - the field \"name\" on the current resource\n \
          \ \"items[0].name\" - the field \"name\" on the first array entry in \"\
          items\""
      message:
        type: "string"
        description: "A human-readable description of the cause of the error.  This\
          \ field may be presented as-is to a reader."
      reason:
        type: "string"
        description: "A machine-readable description of the cause of the error. If\
          \ this value is empty there is no information available."
    description: "StatusCause provides more information about an api.Status failure,\
      \ including cases when multiple errors are encountered."
    example:
      reason: "reason"
      field: "field"
      message: "message"
  k8s.io.v1.StatusDetails:
    type: "object"
    properties:
      causes:
        type: "array"
        description: "The Causes array includes more details associated with the StatusReason\
          \ failure. Not all StatusReasons may provide detailed causes."
        items:
          $ref: "#/definitions/k8s.io.v1.StatusCause"
      group:
        type: "string"
        description: "The group attribute of the resource associated with the status\
          \ StatusReason."
      kind:
        type: "string"
        description: "The kind attribute of the resource associated with the status\
          \ StatusReason. On some operations may differ from the requested resource\
          \ Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      name:
        type: "string"
        description: "The name attribute of the resource associated with the status\
          \ StatusReason (when there is a single name which can be described)."
      retryAfterSeconds:
        type: "integer"
        format: "int32"
        description: "If specified, the time in seconds before the operation should\
          \ be retried. Some errors may indicate the client must take an alternate\
          \ action - for those errors this field may indicate how long to wait before\
          \ taking the alternate action."
      uid:
        type: "string"
        description: "UID of the resource. (when there is a single resource which\
          \ can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
    description: "StatusDetails is a set of additional properties that MAY be set\
      \ by the server to provide additional information about a response. The Reason\
      \ field of a Status object defines what attributes will be set. Clients must\
      \ ignore fields that do not match the defined type of each attribute, and should\
      \ assume that any attribute may be empty, invalid, or under defined."
    example:
      uid: "uid"
      kind: "kind"
      causes:
      - reason: "reason"
        field: "field"
        message: "message"
      - reason: "reason"
        field: "field"
        message: "message"
      retryAfterSeconds: 6
      name: "name"
      group: "group"
  k8s.io.v1.TCPSocketAction:
    type: "object"
    required:
    - "port"
    properties:
      host:
        type: "string"
        description: "Optional: Host name to connect to, defaults to the pod IP."
      port:
        description: "Number or name of the port to access on the container. Number\
          \ must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        $ref: "#/definitions/k8s.io.apimachinery.pkg.util.intstr.IntOrString"
    description: "TCPSocketAction describes an action based on opening a socket"
    example:
      host: "host"
  k8s.io.v1.Time:
    type: "string"
    format: "date-time"
    description: "Time is a wrapper around time.Time which supports correct marshaling\
      \ to YAML and JSON.  Wrappers are provided for many of the factory methods that\
      \ the time package offers."
  k8s.io.v1.Toleration:
    type: "object"
    properties:
      effect:
        type: "string"
        description: "Effect indicates the taint effect to match. Empty means match\
          \ all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule\
          \ and NoExecute.\n\nPossible enum values:\n - `\"NoExecute\"` Evict any\
          \ already-running pods that do not tolerate the taint. Currently enforced\
          \ by NodeController.\n - `\"NoSchedule\"` Do not allow new pods to schedule\
          \ onto the node unless they tolerate the taint, but allow all pods submitted\
          \ to Kubelet without going through the scheduler to start, and allow all\
          \ already-running pods to continue running. Enforced by the scheduler.\n\
          \ - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler\
          \ tries not to schedule new pods onto the node, rather than prohibiting\
          \ new pods from scheduling onto the node entirely. Enforced by the scheduler."
        enum:
        - "NoExecute"
        - "NoSchedule"
        - "PreferNoSchedule"
      key:
        type: "string"
        description: "Key is the taint key that the toleration applies to. Empty means\
          \ match all taint keys. If the key is empty, operator must be Exists; this\
          \ combination means to match all values and all keys."
      operator:
        type: "string"
        description: "Operator represents a key's relationship to the value. Valid\
          \ operators are Exists and Equal. Defaults to Equal. Exists is equivalent\
          \ to wildcard for value, so that a pod can tolerate all taints of a particular\
          \ category.\n\nPossible enum values:\n - `\"Equal\"`\n - `\"Exists\"`"
        enum:
        - "Equal"
        - "Exists"
      tolerationSeconds:
        type: "integer"
        format: "int64"
        description: "TolerationSeconds represents the period of time the toleration\
          \ (which must be of effect NoExecute, otherwise this field is ignored) tolerates\
          \ the taint. By default, it is not set, which means tolerate the taint forever\
          \ (do not evict). Zero and negative values will be treated as 0 (evict immediately)\
          \ by the system."
      value:
        type: "string"
        description: "Value is the taint value the toleration matches to. If the operator\
          \ is Exists, the value should be empty, otherwise just a regular string."
    description: "The pod this Toleration is attached to tolerates any taint that\
      \ matches the triple <key,value,effect> using the matching operator <operator>."
    example:
      effect: "NoExecute"
      tolerationSeconds: 5
      value: "value"
      key: "key"
      operator: "Equal"
  k8s.io.v1.TypedLocalObjectReference:
    type: "object"
    required:
    - "kind"
    - "name"
    properties:
      apiGroup:
        type: "string"
        description: "APIGroup is the group for the resource being referenced. If\
          \ APIGroup is not specified, the specified Kind must be in the core API\
          \ group. For any other third-party types, APIGroup is required."
      kind:
        type: "string"
        description: "Kind is the type of resource being referenced"
        default: ""
      name:
        type: "string"
        description: "Name is the name of resource being referenced"
        default: ""
    description: "TypedLocalObjectReference contains enough information to let you\
      \ locate the typed referenced object inside the same namespace."
    example:
      apiGroup: "apiGroup"
      kind: "kind"
      name: "name"
    x-kubernetes-map-type: "atomic"
  k8s.io.v1.WeightedPodAffinityTerm:
    type: "object"
    required:
    - "podAffinityTerm"
    - "weight"
    properties:
      podAffinityTerm:
        description: "Required. A pod affinity term, associated with the corresponding\
          \ weight."
        $ref: "#/definitions/k8s.io.v1.PodAffinityTerm"
      weight:
        type: "integer"
        format: "int32"
        description: "weight associated with matching the corresponding podAffinityTerm,\
          \ in the range 1-100."
        default: 0
    description: "The weights of all of the matched WeightedPodAffinityTerm fields\
      \ are added per-node to find the most preferred node(s)"
    example:
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        namespaceSelector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        topologyKey: "topologyKey"
        namespaces:
        - "namespaces"
        - "namespaces"
      weight: 6
  kubevirt.io.api.core.v1.AccessCredential:
    type: "object"
    properties:
      sshPublicKey:
        description: "SSHPublicKey represents the source and method of applying a\
          \ ssh public key into a guest virtual machine."
        $ref: "#/definitions/kubevirt.io.api.core.v1.SSHPublicKeyAccessCredential"
      userPassword:
        description: "UserPassword represents the source and method for applying a\
          \ guest user's password"
        $ref: "#/definitions/kubevirt.io.api.core.v1.UserPasswordAccessCredential"
    description: "AccessCredential represents a credential source that can be used\
      \ to authorize remote access to the vm guest Only one of its members may be\
      \ specified."
    example:
      sshPublicKey:
        propagationMethod:
          configDrive: {}
          qemuGuestAgent:
            users:
            - "users"
            - "users"
        source:
          secret:
            secretName: "secretName"
      userPassword:
        propagationMethod:
          qemuGuestAgent: {}
        source:
          secret:
            secretName: "secretName"
  kubevirt.io.api.core.v1.AccessCredentialSecretSource:
    type: "object"
    required:
    - "secretName"
    properties:
      secretName:
        type: "string"
        description: "SecretName represents the name of the secret in the VMI's namespace"
        default: ""
    example:
      secretName: "secretName"
  kubevirt.io.api.core.v1.AddVolumeOptions:
    type: "object"
    required:
    - "disk"
    - "name"
    - "volumeSource"
    properties:
      disk:
        description: "Disk represents the hotplug disk that will be plugged into the\
          \ running VMI"
        $ref: "#/definitions/kubevirt.io.api.core.v1.Disk"
      dryRun:
        type: "array"
        description: "When present, indicates that modifications should not be persisted.\
          \ An invalid or unrecognized dryRun directive will result in an error response\
          \ and no further processing of the request. Valid values are: - All: all\
          \ dry run stages will be processed"
        items:
          type: "string"
          default: ""
        x-kubernetes-list-type: "atomic"
      name:
        type: "string"
        description: "Name represents the name that will be used to map the disk to\
          \ the corresponding volume. This overrides any name set inside the Disk\
          \ struct itself."
        default: ""
      volumeSource:
        description: "VolumeSource represents the source of the volume to map to the\
          \ disk."
        $ref: "#/definitions/kubevirt.io.api.core.v1.HotplugVolumeSource"
    description: "AddVolumeOptions is provided when dynamically hot plugging a volume\
      \ and disk"
    example:
      disk:
        shareable: true
        cache: "cache"
        dedicatedIOThread: true
        disk:
          bus: "bus"
          readonly: true
          pciAddress: "pciAddress"
        lun:
          bus: "bus"
          readonly: true
        bootOrder: 3
        serial: "serial"
        io: "io"
        name: "name"
        tag: "tag"
        cdrom:
          tray: "tray"
          bus: "bus"
          readonly: true
        blockSize:
          custom:
            physical: 9
            logical: 7
          matchVolume:
            enabled: true
      dryRun:
      - "dryRun"
      - "dryRun"
      name: "name"
      volumeSource:
        dataVolume:
          hotpluggable: true
          name: "name"
        persistentVolumeClaim:
          claimName: "claimName"
          hotpluggable: true
          readOnly: true
  kubevirt.io.api.core.v1.BIOS:
    type: "object"
    properties:
      useSerial:
        type: "boolean"
        description: "If set, the BIOS output will be transmitted over serial"
    description: "If set (default), BIOS will be used."
    example:
      useSerial: true
  kubevirt.io.api.core.v1.BlockSize:
    type: "object"
    properties:
      custom:
        $ref: "#/definitions/kubevirt.io.api.core.v1.CustomBlockSize"
      matchVolume:
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
    description: "BlockSize provides the option to change the block size presented\
      \ to the VM for a disk. Only one of its members may be specified."
    example:
      custom:
        physical: 9
        logical: 7
      matchVolume:
        enabled: true
  kubevirt.io.api.core.v1.Bootloader:
    type: "object"
    properties:
      bios:
        description: "If set (default), BIOS will be used."
        $ref: "#/definitions/kubevirt.io.api.core.v1.BIOS"
      efi:
        description: "If set, EFI will be used instead of BIOS."
        $ref: "#/definitions/kubevirt.io.api.core.v1.EFI"
    description: "Represents the firmware blob used to assist in the domain creation\
      \ process. Used for setting the QEMU BIOS file path for the libvirt domain."
    example:
      bios:
        useSerial: true
      efi:
        secureBoot: true
  kubevirt.io.api.core.v1.CDRomTarget:
    type: "object"
    properties:
      bus:
        type: "string"
        description: "Bus indicates the type of disk device to emulate. supported\
          \ values: virtio, sata, scsi."
      readonly:
        type: "boolean"
        description: "ReadOnly. Defaults to true."
      tray:
        type: "string"
        description: "Tray indicates if the tray of the device is open or closed.\
          \ Allowed values are \"open\" and \"closed\". Defaults to closed."
    example:
      tray: "tray"
      bus: "bus"
      readonly: true
  kubevirt.io.api.core.v1.CPU:
    type: "object"
    properties:
      cores:
        type: "integer"
        format: "int64"
        description: "Cores specifies the number of cores inside the vmi. Must be\
          \ a value greater or equal 1."
      dedicatedCpuPlacement:
        type: "boolean"
        description: "DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance\
          \ on a node with enough dedicated pCPUs and pin the vCPUs to it."
      features:
        type: "array"
        description: "Features specifies the CPU features list inside the VMI."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.CPUFeature"
      isolateEmulatorThread:
        type: "boolean"
        description: "IsolateEmulatorThread requests one more dedicated pCPU to be\
          \ allocated for the VMI to place the emulator thread on it."
      model:
        type: "string"
        description: "Model specifies the CPU model inside the VMI. List of available\
          \ models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It\
          \ is possible to specify special cases like \"host-passthrough\" to get\
          \ the same CPU as the node and \"host-model\" to get CPU closest to the\
          \ node one. Defaults to host-model."
      numa:
        description: "NUMA allows specifying settings for the guest NUMA topology"
        $ref: "#/definitions/kubevirt.io.api.core.v1.NUMA"
      realtime:
        description: "Realtime instructs the virt-launcher to tune the VMI for lower\
          \ latency, optional for real time workloads"
        $ref: "#/definitions/kubevirt.io.api.core.v1.Realtime"
      sockets:
        type: "integer"
        format: "int64"
        description: "Sockets specifies the number of sockets inside the vmi. Must\
          \ be a value greater or equal 1."
      threads:
        type: "integer"
        format: "int64"
        description: "Threads specifies the number of threads inside the vmi. Must\
          \ be a value greater or equal 1."
    description: "CPU allows specifying the CPU topology."
    example:
      features:
      - name: "name"
        policy: "policy"
      - name: "name"
        policy: "policy"
      realtime:
        mask: "mask"
      cores: 5
      dedicatedCpuPlacement: true
      numa:
        guestMappingPassthrough: {}
      threads: 2
      model: "model"
      sockets: 5
      isolateEmulatorThread: true
  kubevirt.io.api.core.v1.CPUFeature:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Name of the CPU feature"
        default: ""
      policy:
        type: "string"
        description: "Policy is the CPU feature attribute which can have the following\
          \ attributes: force    - The virtual CPU will claim the feature is supported\
          \ regardless of it being supported by host CPU. require  - Guest creation\
          \ will fail unless the feature is supported by the host CPU or the hypervisor\
          \ is able to emulate it. optional - The feature will be supported by virtual\
          \ CPU if and only if it is supported by host CPU. disable  - The feature\
          \ will not be supported by virtual CPU. forbid   - Guest creation will fail\
          \ if the feature is supported by host CPU. Defaults to require"
    description: "CPUFeature allows specifying a CPU feature."
    example:
      name: "name"
      policy: "policy"
  kubevirt.io.api.core.v1.Chassis:
    type: "object"
    properties:
      asset:
        type: "string"
      manufacturer:
        type: "string"
      serial:
        type: "string"
      sku:
        type: "string"
      version:
        type: "string"
    description: "Chassis specifies the chassis info passed to the domain."
    example:
      serial: "serial"
      asset: "asset"
      sku: "sku"
      version: "version"
      manufacturer: "manufacturer"
  kubevirt.io.api.core.v1.ClientPassthroughDevices:
    type: "object"
    description: "Represent a subset of client devices that can be accessed by VMI.\
      \ At the moment only, USB devices using Usbredir's library and tooling. Another\
      \ fit would be a smartcard with libcacard.\n\nThe struct is currently empty\
      \ as there is no immediate request for user-facing APIs. This structure simply\
      \ turns on USB redirection of UsbClientPassthroughMaxNumberOf devices."
  kubevirt.io.api.core.v1.Clock:
    type: "object"
    properties:
      timer:
        description: "Timer specifies whih timers are attached to the vmi."
        $ref: "#/definitions/kubevirt.io.api.core.v1.Timer"
      timezone:
        type: "string"
        description: "Timezone sets the guest clock to the specified timezone. Zone\
          \ name follows the TZ environment variable format (e.g. 'America/New_York')."
      utc:
        description: "UTC sets the guest clock to UTC on each boot. If an offset is\
          \ specified, guest changes to the clock will be kept during reboots and\
          \ are not reset."
        $ref: "#/definitions/kubevirt.io.api.core.v1.ClockOffsetUTC"
    description: "Represents the clock and timers of a vmi."
    example:
      timer:
        rtc:
          tickPolicy: "tickPolicy"
          present: true
          track: "track"
        kvm:
          present: true
        hpet:
          tickPolicy: "tickPolicy"
          present: true
        pit:
          tickPolicy: "tickPolicy"
          present: true
        hyperv:
          present: true
      utc:
        offsetSeconds: 1
      timezone: "timezone"
  kubevirt.io.api.core.v1.ClockOffsetUTC:
    type: "object"
    properties:
      offsetSeconds:
        type: "integer"
        format: "int32"
        description: "OffsetSeconds specifies an offset in seconds, relative to UTC.\
          \ If set, guest changes to the clock will be kept during reboots and not\
          \ reset."
    description: "UTC sets the guest clock to UTC on each boot."
    example:
      offsetSeconds: 1
  kubevirt.io.api.core.v1.CloudInitConfigDriveSource:
    type: "object"
    properties:
      networkData:
        type: "string"
        description: "NetworkData contains config drive inline cloud-init networkdata."
      networkDataBase64:
        type: "string"
        description: "NetworkDataBase64 contains config drive cloud-init networkdata\
          \ as a base64 encoded string."
      networkDataSecretRef:
        description: "NetworkDataSecretRef references a k8s secret that contains config\
          \ drive networkdata."
        $ref: "#/definitions/k8s.io.v1.LocalObjectReference"
      secretRef:
        description: "UserDataSecretRef references a k8s secret that contains config\
          \ drive userdata."
        $ref: "#/definitions/k8s.io.v1.LocalObjectReference"
      userData:
        type: "string"
        description: "UserData contains config drive inline cloud-init userdata."
      userDataBase64:
        type: "string"
        description: "UserDataBase64 contains config drive cloud-init userdata as\
          \ a base64 encoded string."
    description: "Represents a cloud-init config drive user data source. More info:\
      \ https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html"
    example:
      networkDataSecretRef:
        name: "name"
      userData: "userData"
      networkData: "networkData"
      networkDataBase64: "networkDataBase64"
      secretRef:
        name: "name"
      userDataBase64: "userDataBase64"
  kubevirt.io.api.core.v1.CloudInitNoCloudSource:
    type: "object"
    properties:
      networkData:
        type: "string"
        description: "NetworkData contains NoCloud inline cloud-init networkdata."
      networkDataBase64:
        type: "string"
        description: "NetworkDataBase64 contains NoCloud cloud-init networkdata as\
          \ a base64 encoded string."
      networkDataSecretRef:
        description: "NetworkDataSecretRef references a k8s secret that contains NoCloud\
          \ networkdata."
        $ref: "#/definitions/k8s.io.v1.LocalObjectReference"
      secretRef:
        description: "UserDataSecretRef references a k8s secret that contains NoCloud\
          \ userdata."
        $ref: "#/definitions/k8s.io.v1.LocalObjectReference"
      userData:
        type: "string"
        description: "UserData contains NoCloud inline cloud-init userdata."
      userDataBase64:
        type: "string"
        description: "UserDataBase64 contains NoCloud cloud-init userdata as a base64\
          \ encoded string."
    description: "Represents a cloud-init nocloud user data source. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html"
    example:
      networkDataSecretRef:
        name: "name"
      userData: "userData"
      networkData: "networkData"
      networkDataBase64: "networkDataBase64"
      secretRef:
        name: "name"
      userDataBase64: "userDataBase64"
  kubevirt.io.api.core.v1.ConfigDriveSSHPublicKeyAccessCredentialPropagation:
    type: "object"
  kubevirt.io.api.core.v1.ConfigMapVolumeSource:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
      optional:
        type: "boolean"
        description: "Specify whether the ConfigMap or it's keys must be defined"
      volumeLabel:
        type: "string"
        description: "The volume label of the resulting disk inside the VMI. Different\
          \ bootstrapping mechanisms require different values. Typical values are\
          \ \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart)."
    description: "ConfigMapVolumeSource adapts a ConfigMap into a volume. More info:\
      \ https://kubernetes.io/docs/concepts/storage/volumes/#configmap"
    example:
      volumeLabel: "volumeLabel"
      name: "name"
      optional: true
  kubevirt.io.api.core.v1.ContainerDiskSource:
    type: "object"
    required:
    - "image"
    properties:
      image:
        type: "string"
        description: "Image is the name of the image with the embedded disk."
        default: ""
      imagePullPolicy:
        type: "string"
        description: "Image pull policy. One of Always, Never, IfNotPresent. Defaults\
          \ to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot\
          \ be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\
          \nPossible enum values:\n - `\"Always\"` means that kubelet always attempts\
          \ to pull the latest image. Container will fail If the pull fails.\n - `\"\
          IfNotPresent\"` means that kubelet pulls if the image isn't present on disk.\
          \ Container will fail if the image isn't present and the pull fails.\n -\
          \ `\"Never\"` means that kubelet never pulls an image, but only uses a local\
          \ image. Container will fail if the image isn't present"
        enum:
        - "Always"
        - "IfNotPresent"
        - "Never"
      imagePullSecret:
        type: "string"
        description: "ImagePullSecret is the name of the Docker registry secret required\
          \ to pull the image. The secret must already exist."
      path:
        type: "string"
        description: "Path defines the path to disk file in the container"
    description: "Represents a docker image with an embedded disk."
    example:
      image: "image"
      imagePullPolicy: "Always"
      imagePullSecret: "imagePullSecret"
      path: "path"
  kubevirt.io.api.core.v1.CustomBlockSize:
    type: "object"
    required:
    - "logical"
    - "physical"
    properties:
      logical:
        type: "integer"
        format: "int32"
        default: 0
      physical:
        type: "integer"
        format: "int32"
        default: 0
    description: "CustomBlockSize represents the desired logical and physical block\
      \ size for a VM disk."
    example:
      physical: 9
      logical: 7
  kubevirt.io.api.core.v1.DHCPOptions:
    type: "object"
    properties:
      bootFileName:
        type: "string"
        description: "If specified will pass option 67 to interface's DHCP server"
      ntpServers:
        type: "array"
        description: "If specified will pass the configured NTP server to the VM via\
          \ DHCP option 042."
        items:
          type: "string"
          default: ""
      privateOptions:
        type: "array"
        description: "If specified will pass extra DHCP options for private use, range:\
          \ 224-254"
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.DHCPPrivateOptions"
      tftpServerName:
        type: "string"
        description: "If specified will pass option 66 to interface's DHCP server"
    description: "Extra DHCP options to use in the interface."
    example:
      ntpServers:
      - "ntpServers"
      - "ntpServers"
      tftpServerName: "tftpServerName"
      bootFileName: "bootFileName"
      privateOptions:
      - value: "value"
        option: 4
      - value: "value"
        option: 4
  kubevirt.io.api.core.v1.DHCPPrivateOptions:
    type: "object"
    required:
    - "option"
    - "value"
    properties:
      option:
        type: "integer"
        format: "int32"
        description: "Option is an Integer value from 224-254 Required."
        default: 0
      value:
        type: "string"
        description: "Value is a String value for the Option provided Required."
        default: ""
    description: "DHCPExtraOptions defines Extra DHCP options for a VM."
    example:
      value: "value"
      option: 4
  kubevirt.io.api.core.v1.DataVolumeSource:
    type: "object"
    required:
    - "name"
    properties:
      hotpluggable:
        type: "boolean"
        description: "Hotpluggable indicates whether the volume can be hotplugged\
          \ and hotunplugged."
      name:
        type: "string"
        description: "Name represents the name of the DataVolume in the same namespace"
        default: ""
    example:
      hotpluggable: true
      name: "name"
  kubevirt.io.api.core.v1.DataVolumeTemplateDummyStatus:
    type: "object"
  kubevirt.io.api.core.v1.DataVolumeTemplateSpec:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    - "spec"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        description: "DataVolumeSpec contains the DataVolume specification."
        $ref: "#/definitions/kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSpec"
      status:
        description: "DataVolumeTemplateDummyStatus is here simply for backwards compatibility\
          \ with a previous API."
        $ref: "#/definitions/kubevirt.io.api.core.v1.DataVolumeTemplateDummyStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        finalCheckpoint: true
        preallocation: true
        priorityClassName: "priorityClassName"
        checkpoints:
        - current: "current"
          previous: "previous"
        - current: "current"
          previous: "previous"
        source:
          s3:
            secretRef: "secretRef"
            certConfigMap: "certConfigMap"
            url: "url"
          registry:
            imageStream: "imageStream"
            pullMethod: "pullMethod"
            secretRef: "secretRef"
            certConfigMap: "certConfigMap"
            url: "url"
          vddk:
            backingFile: "backingFile"
            initImageURL: "initImageURL"
            secretRef: "secretRef"
            thumbprint: "thumbprint"
            uuid: "uuid"
            url: "url"
          blank: {}
          imageio:
            secretRef: "secretRef"
            certConfigMap: "certConfigMap"
            diskId: "diskId"
            url: "url"
          upload: {}
          http:
            secretExtraHeaders:
            - "secretExtraHeaders"
            - "secretExtraHeaders"
            secretRef: "secretRef"
            certConfigMap: "certConfigMap"
            extraHeaders:
            - "extraHeaders"
            - "extraHeaders"
            url: "url"
          pvc:
            name: "name"
            namespace: "namespace"
        storage:
          storageClassName: "storageClassName"
          volumeName: "volumeName"
          resources:
            requests: {}
            limits:
              key: {}
          selector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          accessModes:
          - "accessModes"
          - "accessModes"
          dataSource:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
          volumeMode: "volumeMode"
        pvc:
          storageClassName: "storageClassName"
          dataSourceRef:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
          volumeName: "volumeName"
          resources:
            requests: {}
            limits:
              key: {}
          selector:
            matchExpressions:
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            - values:
              - "values"
              - "values"
              key: "key"
              operator: "operator"
            matchLabels:
              key: "matchLabels"
          accessModes:
          - "accessModes"
          - "accessModes"
          dataSource:
            apiGroup: "apiGroup"
            kind: "kind"
            name: "name"
          volumeMode: "volumeMode"
        sourceRef:
          kind: "kind"
          name: "name"
          namespace: "namespace"
        contentType: "contentType"
      status: {}
  kubevirt.io.api.core.v1.Devices:
    type: "object"
    properties:
      autoattachGraphicsDevice:
        type: "boolean"
        description: "Whether to attach the default graphics device or not. VNC will\
          \ not be available if set to false. Defaults to true."
      autoattachMemBalloon:
        type: "boolean"
        description: "Whether to attach the Memory balloon device with default period.\
          \ Period can be adjusted in virt-config. Defaults to true."
      autoattachPodInterface:
        type: "boolean"
        description: "Whether to attach a pod network interface. Defaults to true."
      autoattachSerialConsole:
        type: "boolean"
        description: "Whether to attach the default serial console or not. Serial\
          \ console access will not be available if set to false. Defaults to true."
      blockMultiQueue:
        type: "boolean"
        description: "Whether or not to enable virtio multi-queue for block devices.\
          \ Defaults to false."
      clientPassthrough:
        description: "To configure and access client devices such as redirecting USB"
        $ref: "#/definitions/kubevirt.io.api.core.v1.ClientPassthroughDevices"
      disableHotplug:
        type: "boolean"
        description: "DisableHotplug disabled the ability to hotplug disks."
      disks:
        type: "array"
        description: "Disks describes disks, cdroms and luns which are connected to\
          \ the vmi."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.Disk"
      filesystems:
        type: "array"
        description: "Filesystems describes filesystem which is connected to the vmi."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.Filesystem"
        x-kubernetes-list-type: "atomic"
      gpus:
        type: "array"
        description: "Whether to attach a GPU device to the vmi."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.GPU"
        x-kubernetes-list-type: "atomic"
      hostDevices:
        type: "array"
        description: "Whether to attach a host device to the vmi."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.HostDevice"
        x-kubernetes-list-type: "atomic"
      inputs:
        type: "array"
        description: "Inputs describe input devices"
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.Input"
      interfaces:
        type: "array"
        description: "Interfaces describe network interfaces which are added to the\
          \ vmi."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.Interface"
      networkInterfaceMultiqueue:
        type: "boolean"
        description: "If specified, virtual network interfaces configured with a virtio\
          \ bus will also enable the vhost multiqueue feature for network devices.\
          \ The number of queues created depends on additional factors of the VirtualMachineInstance,\
          \ like the number of guest CPUs."
      rng:
        description: "Whether to have random number generator from host"
        $ref: "#/definitions/kubevirt.io.api.core.v1.Rng"
      sound:
        description: "Whether to emulate a sound device."
        $ref: "#/definitions/kubevirt.io.api.core.v1.SoundDevice"
      tpm:
        description: "Whether to emulate a TPM device."
        $ref: "#/definitions/kubevirt.io.api.core.v1.TPMDevice"
      useVirtioTransitional:
        type: "boolean"
        description: "Fall back to legacy virtio 0.9 support if virtio bus is selected\
          \ on devices. This is helpful for old machines like CentOS6 or RHEL6 which\
          \ do not understand virtio_non_transitional (virtio 1.0)."
      watchdog:
        description: "Watchdog describes a watchdog device which can be added to the\
          \ vmi."
        $ref: "#/definitions/kubevirt.io.api.core.v1.Watchdog"
    example:
      autoattachPodInterface: true
      interfaces:
      - dhcpOptions:
          ntpServers:
          - "ntpServers"
          - "ntpServers"
          tftpServerName: "tftpServerName"
          bootFileName: "bootFileName"
          privateOptions:
          - value: "value"
            option: 4
          - value: "value"
            option: 4
        slirp: {}
        macvtap: {}
        ports:
        - protocol: "protocol"
          port: 7
          name: "name"
        - protocol: "protocol"
          port: 7
          name: "name"
        macAddress: "macAddress"
        masquerade: {}
        bootOrder: 2
        name: "name"
        sriov: {}
        model: "model"
        pciAddress: "pciAddress"
        bridge: {}
        tag: "tag"
      - dhcpOptions:
          ntpServers:
          - "ntpServers"
          - "ntpServers"
          tftpServerName: "tftpServerName"
          bootFileName: "bootFileName"
          privateOptions:
          - value: "value"
            option: 4
          - value: "value"
            option: 4
        slirp: {}
        macvtap: {}
        ports:
        - protocol: "protocol"
          port: 7
          name: "name"
        - protocol: "protocol"
          port: 7
          name: "name"
        macAddress: "macAddress"
        masquerade: {}
        bootOrder: 2
        name: "name"
        sriov: {}
        model: "model"
        pciAddress: "pciAddress"
        bridge: {}
        tag: "tag"
      disks:
      - shareable: true
        cache: "cache"
        dedicatedIOThread: true
        disk:
          bus: "bus"
          readonly: true
          pciAddress: "pciAddress"
        lun:
          bus: "bus"
          readonly: true
        bootOrder: 3
        serial: "serial"
        io: "io"
        name: "name"
        tag: "tag"
        cdrom:
          tray: "tray"
          bus: "bus"
          readonly: true
        blockSize:
          custom:
            physical: 9
            logical: 7
          matchVolume:
            enabled: true
      - shareable: true
        cache: "cache"
        dedicatedIOThread: true
        disk:
          bus: "bus"
          readonly: true
          pciAddress: "pciAddress"
        lun:
          bus: "bus"
          readonly: true
        bootOrder: 3
        serial: "serial"
        io: "io"
        name: "name"
        tag: "tag"
        cdrom:
          tray: "tray"
          bus: "bus"
          readonly: true
        blockSize:
          custom:
            physical: 9
            logical: 7
          matchVolume:
            enabled: true
      inputs:
      - bus: "bus"
        name: "name"
        type: "type"
      - bus: "bus"
        name: "name"
        type: "type"
      sound:
        name: "name"
        model: "model"
      useVirtioTransitional: true
      rng: {}
      autoattachSerialConsole: true
      filesystems:
      - name: "name"
        virtiofs: {}
      - name: "name"
        virtiofs: {}
      hostDevices:
      - name: "name"
        tag: "tag"
        deviceName: "deviceName"
      - name: "name"
        tag: "tag"
        deviceName: "deviceName"
      networkInterfaceMultiqueue: true
      autoattachMemBalloon: true
      tpm: {}
      clientPassthrough: {}
      watchdog:
        i6300esb:
          action: "action"
        name: "name"
      blockMultiQueue: true
      gpus:
      - name: "name"
        tag: "tag"
        virtualGPUOptions:
          display:
            enabled: true
            ramFB:
              enabled: true
        deviceName: "deviceName"
      - name: "name"
        tag: "tag"
        virtualGPUOptions:
          display:
            enabled: true
            ramFB:
              enabled: true
        deviceName: "deviceName"
      disableHotplug: true
      autoattachGraphicsDevice: true
  kubevirt.io.api.core.v1.Disk:
    type: "object"
    required:
    - "name"
    properties:
      blockSize:
        description: "If specified, the virtual disk will be presented with the given\
          \ block sizes."
        $ref: "#/definitions/kubevirt.io.api.core.v1.BlockSize"
      bootOrder:
        type: "integer"
        format: "int32"
        description: "BootOrder is an integer value > 0, used to determine ordering\
          \ of boot devices. Lower values take precedence. Each disk or interface\
          \ that has a boot order must have a unique value. Disks without a boot order\
          \ are not tried if a disk with a boot order exists."
      cache:
        type: "string"
        description: "Cache specifies which kvm disk cache mode should be used. Supported\
          \ values are: CacheNone, CacheWriteThrough."
      cdrom:
        description: "Attach a volume as a cdrom to the vmi."
        $ref: "#/definitions/kubevirt.io.api.core.v1.CDRomTarget"
      dedicatedIOThread:
        type: "boolean"
        description: "dedicatedIOThread indicates this disk should have an exclusive\
          \ IO Thread. Enabling this implies useIOThreads = true. Defaults to false."
      disk:
        description: "Attach a volume as a disk to the vmi."
        $ref: "#/definitions/kubevirt.io.api.core.v1.DiskTarget"
      io:
        type: "string"
        description: "IO specifies which QEMU disk IO mode should be used. Supported\
          \ values are: native, default, threads."
      lun:
        description: "Attach a volume as a LUN to the vmi."
        $ref: "#/definitions/kubevirt.io.api.core.v1.LunTarget"
      name:
        type: "string"
        description: "Name is the device name"
        default: ""
      serial:
        type: "string"
        description: "Serial provides the ability to specify a serial number for the\
          \ disk device."
      shareable:
        type: "boolean"
        description: "If specified the disk is made sharable and multiple write from\
          \ different VMs are permitted"
      tag:
        type: "string"
        description: "If specified, disk address and its tag will be provided to the\
          \ guest via config drive metadata"
    example:
      shareable: true
      cache: "cache"
      dedicatedIOThread: true
      disk:
        bus: "bus"
        readonly: true
        pciAddress: "pciAddress"
      lun:
        bus: "bus"
        readonly: true
      bootOrder: 3
      serial: "serial"
      io: "io"
      name: "name"
      tag: "tag"
      cdrom:
        tray: "tray"
        bus: "bus"
        readonly: true
      blockSize:
        custom:
          physical: 9
          logical: 7
        matchVolume:
          enabled: true
  kubevirt.io.api.core.v1.DiskTarget:
    type: "object"
    properties:
      bus:
        type: "string"
        description: "Bus indicates the type of disk device to emulate. supported\
          \ values: virtio, sata, scsi."
      pciAddress:
        type: "string"
        description: "If specified, the virtual disk will be placed on the guests\
          \ pci address with the specified PCI address. For example: 0000:81:01.10"
      readonly:
        type: "boolean"
        description: "ReadOnly. Defaults to false."
    example:
      bus: "bus"
      readonly: true
      pciAddress: "pciAddress"
  kubevirt.io.api.core.v1.DomainSpec:
    type: "object"
    required:
    - "devices"
    properties:
      chassis:
        description: "Chassis specifies the chassis info passed to the domain."
        $ref: "#/definitions/kubevirt.io.api.core.v1.Chassis"
      clock:
        description: "Clock sets the clock and timers of the vmi."
        $ref: "#/definitions/kubevirt.io.api.core.v1.Clock"
      cpu:
        description: "CPU allow specified the detailed CPU topology inside the vmi."
        $ref: "#/definitions/kubevirt.io.api.core.v1.CPU"
      devices:
        description: "Devices allows adding disks, network interfaces, and others"
        $ref: "#/definitions/kubevirt.io.api.core.v1.Devices"
      features:
        description: "Features like acpi, apic, hyperv, smm."
        $ref: "#/definitions/kubevirt.io.api.core.v1.Features"
      firmware:
        description: "Firmware."
        $ref: "#/definitions/kubevirt.io.api.core.v1.Firmware"
      ioThreadsPolicy:
        type: "string"
        description: "Controls whether or not disks will share IOThreads. Omitting\
          \ IOThreadsPolicy disables use of IOThreads. One of: shared, auto"
      launchSecurity:
        description: "Launch Security setting of the vmi."
        $ref: "#/definitions/kubevirt.io.api.core.v1.LaunchSecurity"
      machine:
        description: "Machine type."
        $ref: "#/definitions/kubevirt.io.api.core.v1.Machine"
      memory:
        description: "Memory allow specifying the VMI memory features."
        $ref: "#/definitions/kubevirt.io.api.core.v1.Memory"
      resources:
        description: "Resources describes the Compute Resources required by this vmi."
        $ref: "#/definitions/kubevirt.io.api.core.v1.ResourceRequirements"
    example:
      features:
        smm:
          enabled: true
        kvm:
          hidden: true
        apic:
          endOfInterrupt: true
          enabled: true
        acpi:
          enabled: true
        pvspinlock:
          enabled: true
        hyperv:
          vpindex:
            enabled: true
          ipi:
            enabled: true
          reenlightenment:
            enabled: true
          runtime:
            enabled: true
          vendorid:
            vendorid: "vendorid"
            enabled: true
          evmcs:
            enabled: true
          synictimer:
            direct:
              enabled: true
            enabled: true
          spinlocks:
            spinlocks: 1
            enabled: true
          tlbflush:
            enabled: true
          synic:
            enabled: true
          relaxed:
            enabled: true
          vapic:
            enabled: true
          reset:
            enabled: true
          frequencies:
            enabled: true
      ioThreadsPolicy: "ioThreadsPolicy"
      memory:
        hugepages:
          pageSize: "pageSize"
        guest: {}
      devices:
        autoattachPodInterface: true
        interfaces:
        - dhcpOptions:
            ntpServers:
            - "ntpServers"
            - "ntpServers"
            tftpServerName: "tftpServerName"
            bootFileName: "bootFileName"
            privateOptions:
            - value: "value"
              option: 4
            - value: "value"
              option: 4
          slirp: {}
          macvtap: {}
          ports:
          - protocol: "protocol"
            port: 7
            name: "name"
          - protocol: "protocol"
            port: 7
            name: "name"
          macAddress: "macAddress"
          masquerade: {}
          bootOrder: 2
          name: "name"
          sriov: {}
          model: "model"
          pciAddress: "pciAddress"
          bridge: {}
          tag: "tag"
        - dhcpOptions:
            ntpServers:
            - "ntpServers"
            - "ntpServers"
            tftpServerName: "tftpServerName"
            bootFileName: "bootFileName"
            privateOptions:
            - value: "value"
              option: 4
            - value: "value"
              option: 4
          slirp: {}
          macvtap: {}
          ports:
          - protocol: "protocol"
            port: 7
            name: "name"
          - protocol: "protocol"
            port: 7
            name: "name"
          macAddress: "macAddress"
          masquerade: {}
          bootOrder: 2
          name: "name"
          sriov: {}
          model: "model"
          pciAddress: "pciAddress"
          bridge: {}
          tag: "tag"
        disks:
        - shareable: true
          cache: "cache"
          dedicatedIOThread: true
          disk:
            bus: "bus"
            readonly: true
            pciAddress: "pciAddress"
          lun:
            bus: "bus"
            readonly: true
          bootOrder: 3
          serial: "serial"
          io: "io"
          name: "name"
          tag: "tag"
          cdrom:
            tray: "tray"
            bus: "bus"
            readonly: true
          blockSize:
            custom:
              physical: 9
              logical: 7
            matchVolume:
              enabled: true
        - shareable: true
          cache: "cache"
          dedicatedIOThread: true
          disk:
            bus: "bus"
            readonly: true
            pciAddress: "pciAddress"
          lun:
            bus: "bus"
            readonly: true
          bootOrder: 3
          serial: "serial"
          io: "io"
          name: "name"
          tag: "tag"
          cdrom:
            tray: "tray"
            bus: "bus"
            readonly: true
          blockSize:
            custom:
              physical: 9
              logical: 7
            matchVolume:
              enabled: true
        inputs:
        - bus: "bus"
          name: "name"
          type: "type"
        - bus: "bus"
          name: "name"
          type: "type"
        sound:
          name: "name"
          model: "model"
        useVirtioTransitional: true
        rng: {}
        autoattachSerialConsole: true
        filesystems:
        - name: "name"
          virtiofs: {}
        - name: "name"
          virtiofs: {}
        hostDevices:
        - name: "name"
          tag: "tag"
          deviceName: "deviceName"
        - name: "name"
          tag: "tag"
          deviceName: "deviceName"
        networkInterfaceMultiqueue: true
        autoattachMemBalloon: true
        tpm: {}
        clientPassthrough: {}
        watchdog:
          i6300esb:
            action: "action"
          name: "name"
        blockMultiQueue: true
        gpus:
        - name: "name"
          tag: "tag"
          virtualGPUOptions:
            display:
              enabled: true
              ramFB:
                enabled: true
          deviceName: "deviceName"
        - name: "name"
          tag: "tag"
          virtualGPUOptions:
            display:
              enabled: true
              ramFB:
                enabled: true
          deviceName: "deviceName"
        disableHotplug: true
        autoattachGraphicsDevice: true
      machine:
        type: "type"
      cpu:
        features:
        - name: "name"
          policy: "policy"
        - name: "name"
          policy: "policy"
        realtime:
          mask: "mask"
        cores: 5
        dedicatedCpuPlacement: true
        numa:
          guestMappingPassthrough: {}
        threads: 2
        model: "model"
        sockets: 5
        isolateEmulatorThread: true
      resources:
        overcommitGuestOverhead: true
        requests: {}
        limits: {}
      chassis:
        serial: "serial"
        asset: "asset"
        sku: "sku"
        version: "version"
        manufacturer: "manufacturer"
      clock:
        timer:
          rtc:
            tickPolicy: "tickPolicy"
            present: true
            track: "track"
          kvm:
            present: true
          hpet:
            tickPolicy: "tickPolicy"
            present: true
          pit:
            tickPolicy: "tickPolicy"
            present: true
          hyperv:
            present: true
        utc:
          offsetSeconds: 1
        timezone: "timezone"
      firmware:
        serial: "serial"
        bootloader:
          bios:
            useSerial: true
          efi:
            secureBoot: true
        uuid: "uuid"
        kernelBoot:
          container:
            image: "image"
            imagePullPolicy: "Always"
            imagePullSecret: "imagePullSecret"
            initrdPath: "initrdPath"
            kernelPath: "kernelPath"
          kernelArgs: "kernelArgs"
      launchSecurity:
        sev: {}
  kubevirt.io.api.core.v1.DownwardAPIVolumeSource:
    type: "object"
    properties:
      fields:
        type: "array"
        description: "Fields is a list of downward API volume file"
        items:
          $ref: "#/definitions/k8s.io.v1.DownwardAPIVolumeFile"
      volumeLabel:
        type: "string"
        description: "The volume label of the resulting disk inside the VMI. Different\
          \ bootstrapping mechanisms require different values. Typical values are\
          \ \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart)."
    description: "DownwardAPIVolumeSource represents a volume containing downward\
      \ API info."
    example:
      volumeLabel: "volumeLabel"
      fields:
      - mode: 9
        path: "path"
        resourceFieldRef:
          resource: "resource"
          containerName: "containerName"
        fieldRef:
          apiVersion: "apiVersion"
          fieldPath: "fieldPath"
      - mode: 9
        path: "path"
        resourceFieldRef:
          resource: "resource"
          containerName: "containerName"
        fieldRef:
          apiVersion: "apiVersion"
          fieldPath: "fieldPath"
  kubevirt.io.api.core.v1.DownwardMetricsVolumeSource:
    type: "object"
    description: "DownwardMetricsVolumeSource adds a very small disk to VMIs which\
      \ contains a limited view of host and guest metrics. The disk content is compatible\
      \ with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics."
  kubevirt.io.api.core.v1.EFI:
    type: "object"
    properties:
      secureBoot:
        type: "boolean"
        description: "If set, SecureBoot will be enabled and the OVMF roms will be\
          \ swapped for SecureBoot-enabled ones. Requires SMM to be enabled. Defaults\
          \ to true"
    description: "If set, EFI will be used instead of BIOS."
    example:
      secureBoot: true
  kubevirt.io.api.core.v1.EmptyDiskSource:
    type: "object"
    required:
    - "capacity"
    properties:
      capacity:
        description: "Capacity of the sparse disk."
        $ref: "#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity"
    description: "EmptyDisk represents a temporary disk which shares the vmis lifecycle."
    example: {}
  kubevirt.io.api.core.v1.EphemeralVolumeSource:
    type: "object"
    properties:
      persistentVolumeClaim:
        description: "PersistentVolumeClaimVolumeSource represents a reference to\
          \ a PersistentVolumeClaim in the same namespace. Directly attached to the\
          \ vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaimVolumeSource"
    example:
      persistentVolumeClaim:
        claimName: "claimName"
        readOnly: true
  kubevirt.io.api.core.v1.FeatureAPIC:
    type: "object"
    properties:
      enabled:
        type: "boolean"
        description: "Enabled determines if the feature should be enabled or disabled\
          \ on the guest. Defaults to true."
      endOfInterrupt:
        type: "boolean"
        description: "EndOfInterrupt enables the end of interrupt notification in\
          \ the guest. Defaults to false."
    example:
      endOfInterrupt: true
      enabled: true
  kubevirt.io.api.core.v1.FeatureHyperv:
    type: "object"
    properties:
      evmcs:
        description: "EVMCS Speeds up L2 vmexits, but disables other virtualization\
          \ features. Requires vapic. Defaults to the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
      frequencies:
        description: "Frequencies improves the TSC clock source handling for Hyper-V\
          \ on KVM. Defaults to the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
      ipi:
        description: "IPI improves performances in overcommited environments. Requires\
          \ vpindex. Defaults to the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
      reenlightenment:
        description: "Reenlightenment enables the notifications on TSC frequency changes.\
          \ Defaults to the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
      relaxed:
        description: "Relaxed instructs the guest OS to disable watchdog timeouts.\
          \ Defaults to the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
      reset:
        description: "Reset enables Hyperv reboot/reset for the vmi. Requires synic.\
          \ Defaults to the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
      runtime:
        description: "Runtime improves the time accounting to improve scheduling in\
          \ the guest. Defaults to the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
      spinlocks:
        description: "Spinlocks allows to configure the spinlock retry attempts."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureSpinlocks"
      synic:
        description: "SyNIC enables the Synthetic Interrupt Controller. Defaults to\
          \ the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
      synictimer:
        description: "SyNICTimer enables Synthetic Interrupt Controller Timers, reducing\
          \ CPU load. Defaults to the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.SyNICTimer"
      tlbflush:
        description: "TLBFlush improves performances in overcommited environments.\
          \ Requires vpindex. Defaults to the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
      vapic:
        description: "VAPIC improves the paravirtualized handling of interrupts. Defaults\
          \ to the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
      vendorid:
        description: "VendorID allows setting the hypervisor vendor id. Defaults to\
          \ the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureVendorID"
      vpindex:
        description: "VPIndex enables the Virtual Processor Index to help windows\
          \ identifying virtual processors. Defaults to the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
    description: "Hyperv specific features."
    example:
      vpindex:
        enabled: true
      ipi:
        enabled: true
      reenlightenment:
        enabled: true
      runtime:
        enabled: true
      vendorid:
        vendorid: "vendorid"
        enabled: true
      evmcs:
        enabled: true
      synictimer:
        direct:
          enabled: true
        enabled: true
      spinlocks:
        spinlocks: 1
        enabled: true
      tlbflush:
        enabled: true
      synic:
        enabled: true
      relaxed:
        enabled: true
      vapic:
        enabled: true
      reset:
        enabled: true
      frequencies:
        enabled: true
  kubevirt.io.api.core.v1.FeatureKVM:
    type: "object"
    properties:
      hidden:
        type: "boolean"
        description: "Hide the KVM hypervisor from standard MSR based discovery. Defaults\
          \ to false"
    example:
      hidden: true
  kubevirt.io.api.core.v1.FeatureSpinlocks:
    type: "object"
    properties:
      enabled:
        type: "boolean"
        description: "Enabled determines if the feature should be enabled or disabled\
          \ on the guest. Defaults to true."
      spinlocks:
        type: "integer"
        format: "int64"
        description: "Retries indicates the number of retries. Must be a value greater\
          \ or equal 4096. Defaults to 4096."
    example:
      spinlocks: 1
      enabled: true
  kubevirt.io.api.core.v1.FeatureState:
    type: "object"
    properties:
      enabled:
        type: "boolean"
        description: "Enabled determines if the feature should be enabled or disabled\
          \ on the guest. Defaults to true."
    description: "Represents if a feature is enabled or disabled."
    example:
      enabled: true
  kubevirt.io.api.core.v1.FeatureVendorID:
    type: "object"
    properties:
      enabled:
        type: "boolean"
        description: "Enabled determines if the feature should be enabled or disabled\
          \ on the guest. Defaults to true."
      vendorid:
        type: "string"
        description: "VendorID sets the hypervisor vendor id, visible to the vmi.\
          \ String up to twelve characters."
    example:
      vendorid: "vendorid"
      enabled: true
  kubevirt.io.api.core.v1.Features:
    type: "object"
    properties:
      acpi:
        description: "ACPI enables/disables ACPI inside the guest. Defaults to enabled."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
      apic:
        description: "Defaults to the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureAPIC"
      hyperv:
        description: "Defaults to the machine type setting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureHyperv"
      kvm:
        description: "Configure how KVM presence is exposed to the guest."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureKVM"
      pvspinlock:
        description: "Notify the guest that the host supports paravirtual spinlocks.\
          \ For older kernels this feature should be explicitly disabled."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
      smm:
        description: "SMM enables/disables System Management Mode. TSEG not yet implemented."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
    example:
      smm:
        enabled: true
      kvm:
        hidden: true
      apic:
        endOfInterrupt: true
        enabled: true
      acpi:
        enabled: true
      pvspinlock:
        enabled: true
      hyperv:
        vpindex:
          enabled: true
        ipi:
          enabled: true
        reenlightenment:
          enabled: true
        runtime:
          enabled: true
        vendorid:
          vendorid: "vendorid"
          enabled: true
        evmcs:
          enabled: true
        synictimer:
          direct:
            enabled: true
          enabled: true
        spinlocks:
          spinlocks: 1
          enabled: true
        tlbflush:
          enabled: true
        synic:
          enabled: true
        relaxed:
          enabled: true
        vapic:
          enabled: true
        reset:
          enabled: true
        frequencies:
          enabled: true
  kubevirt.io.api.core.v1.Filesystem:
    type: "object"
    required:
    - "name"
    - "virtiofs"
    properties:
      name:
        type: "string"
        description: "Name is the device name"
        default: ""
      virtiofs:
        description: "Virtiofs is supported"
        $ref: "#/definitions/kubevirt.io.api.core.v1.FilesystemVirtiofs"
    example:
      name: "name"
      virtiofs: {}
  kubevirt.io.api.core.v1.FilesystemVirtiofs:
    type: "object"
  kubevirt.io.api.core.v1.Firmware:
    type: "object"
    properties:
      bootloader:
        description: "Settings to control the bootloader that is used."
        $ref: "#/definitions/kubevirt.io.api.core.v1.Bootloader"
      kernelBoot:
        description: "Settings to set the kernel for booting."
        $ref: "#/definitions/kubevirt.io.api.core.v1.KernelBoot"
      serial:
        type: "string"
        description: "The system-serial-number in SMBIOS"
      uuid:
        type: "string"
        description: "UUID reported by the vmi bios. Defaults to a random generated\
          \ uid."
    example:
      serial: "serial"
      bootloader:
        bios:
          useSerial: true
        efi:
          secureBoot: true
      uuid: "uuid"
      kernelBoot:
        container:
          image: "image"
          imagePullPolicy: "Always"
          imagePullSecret: "imagePullSecret"
          initrdPath: "initrdPath"
          kernelPath: "kernelPath"
        kernelArgs: "kernelArgs"
  kubevirt.io.api.core.v1.FlavorMatcher:
    type: "object"
    required:
    - "name"
    properties:
      kind:
        type: "string"
        description: "Kind specifies which flavor resource is referenced. Allowed\
          \ values are: \"VirtualMachineFlavor\" and \"VirtualMachineClusterFlavor\"\
          . If not specified, \"VirtualMachineClusterFlavor\" is used by default."
      name:
        type: "string"
        description: "Name is the name of the VirtualMachineFlavor or VirtualMachineClusterFlavor"
        default: ""
    description: "FlavorMatcher references a flavor that is used to fill fields in\
      \ the VMI template."
    example:
      kind: "kind"
      name: "name"
  kubevirt.io.api.core.v1.GPU:
    type: "object"
    required:
    - "deviceName"
    - "name"
    properties:
      deviceName:
        type: "string"
        default: ""
      name:
        type: "string"
        description: "Name of the GPU device as exposed by a device plugin"
        default: ""
      tag:
        type: "string"
        description: "If specified, the virtual network interface address and its\
          \ tag will be provided to the guest via config drive"
      virtualGPUOptions:
        $ref: "#/definitions/kubevirt.io.api.core.v1.VGPUOptions"
    example:
      name: "name"
      tag: "tag"
      virtualGPUOptions:
        display:
          enabled: true
          ramFB:
            enabled: true
      deviceName: "deviceName"
  kubevirt.io.api.core.v1.GuestAgentPing:
    type: "object"
    description: "GuestAgentPing configures the guest-agent based ping probe"
  kubevirt.io.api.core.v1.HPETTimer:
    type: "object"
    properties:
      present:
        type: "boolean"
        description: "Enabled set to false makes sure that the machine type or a preset\
          \ can't add the timer. Defaults to true."
      tickPolicy:
        type: "string"
        description: "TickPolicy determines what happens when QEMU misses a deadline\
          \ for injecting a tick to the guest. One of \"delay\", \"catchup\", \"merge\"\
          , \"discard\"."
    example:
      tickPolicy: "tickPolicy"
      present: true
  kubevirt.io.api.core.v1.HostDevice:
    type: "object"
    required:
    - "deviceName"
    - "name"
    properties:
      deviceName:
        type: "string"
        description: "DeviceName is the resource name of the host device exposed by\
          \ a device plugin"
        default: ""
      name:
        type: "string"
        default: ""
      tag:
        type: "string"
        description: "If specified, the virtual network interface address and its\
          \ tag will be provided to the guest via config drive"
    example:
      name: "name"
      tag: "tag"
      deviceName: "deviceName"
  kubevirt.io.api.core.v1.HostDisk:
    type: "object"
    required:
    - "path"
    - "type"
    properties:
      capacity:
        description: "Capacity of the sparse disk"
        $ref: "#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity"
      path:
        type: "string"
        description: "The path to HostDisk image located on the cluster"
        default: ""
      shared:
        type: "boolean"
        description: "Shared indicate whether the path is shared between nodes"
      type:
        type: "string"
        description: "Contains information if disk.img exists or should be created\
          \ allowed options are 'Disk' and 'DiskOrCreate'"
        default: ""
    description: "Represents a disk created on the cluster level"
    example:
      path: "path"
      shared: true
      type: "type"
  kubevirt.io.api.core.v1.HotplugVolumeSource:
    type: "object"
    properties:
      dataVolume:
        description: "DataVolume represents the dynamic creation a PVC for this volume\
          \ as well as the process of populating that PVC with a disk image."
        $ref: "#/definitions/kubevirt.io.api.core.v1.DataVolumeSource"
      persistentVolumeClaim:
        description: "PersistentVolumeClaimVolumeSource represents a reference to\
          \ a PersistentVolumeClaim in the same namespace. Directly attached to the\
          \ vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        $ref: "#/definitions/kubevirt.io.api.core.v1.PersistentVolumeClaimVolumeSource"
    description: "HotplugVolumeSource Represents the source of a volume to mount which\
      \ are capable of being hotplugged on a live running VMI. Only one of its members\
      \ may be specified."
    example:
      dataVolume:
        hotpluggable: true
        name: "name"
      persistentVolumeClaim:
        claimName: "claimName"
        hotpluggable: true
        readOnly: true
  kubevirt.io.api.core.v1.HotplugVolumeStatus:
    type: "object"
    properties:
      attachPodName:
        type: "string"
        description: "AttachPodName is the name of the pod used to attach the volume\
          \ to the node."
      attachPodUID:
        type: "string"
        description: "AttachPodUID is the UID of the pod used to attach the volume\
          \ to the node."
    description: "HotplugVolumeStatus represents the hotplug status of the volume"
    example:
      attachPodUID: "attachPodUID"
      attachPodName: "attachPodName"
  kubevirt.io.api.core.v1.Hugepages:
    type: "object"
    properties:
      pageSize:
        type: "string"
        description: "PageSize specifies the hugepage size, for x86_64 architecture\
          \ valid values are 1Gi and 2Mi."
    description: "Hugepages allow to use hugepages for the VirtualMachineInstance\
      \ instead of regular memory."
    example:
      pageSize: "pageSize"
  kubevirt.io.api.core.v1.HypervTimer:
    type: "object"
    properties:
      present:
        type: "boolean"
        description: "Enabled set to false makes sure that the machine type or a preset\
          \ can't add the timer. Defaults to true."
    example:
      present: true
  kubevirt.io.api.core.v1.I6300ESBWatchdog:
    type: "object"
    properties:
      action:
        type: "string"
        description: "The action to take. Valid values are poweroff, reset, shutdown.\
          \ Defaults to reset."
    description: "i6300esb watchdog device."
    example:
      action: "action"
  kubevirt.io.api.core.v1.Input:
    type: "object"
    required:
    - "name"
    - "type"
    properties:
      bus:
        type: "string"
        description: "Bus indicates the bus of input device to emulate. Supported\
          \ values: virtio, usb."
      name:
        type: "string"
        description: "Name is the device name"
        default: ""
      type:
        type: "string"
        description: "Type indicated the type of input device. Supported values: tablet."
        default: ""
    example:
      bus: "bus"
      name: "name"
      type: "type"
  kubevirt.io.api.core.v1.Interface:
    type: "object"
    required:
    - "name"
    properties:
      bootOrder:
        type: "integer"
        format: "int32"
        description: "BootOrder is an integer value > 0, used to determine ordering\
          \ of boot devices. Lower values take precedence. Each interface or disk\
          \ that has a boot order must have a unique value. Interfaces without a boot\
          \ order are not tried."
      bridge:
        $ref: "#/definitions/kubevirt.io.api.core.v1.InterfaceBridge"
      dhcpOptions:
        description: "If specified the network interface will pass additional DHCP\
          \ options to the VMI"
        $ref: "#/definitions/kubevirt.io.api.core.v1.DHCPOptions"
      macAddress:
        type: "string"
        description: "Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF."
      macvtap:
        $ref: "#/definitions/kubevirt.io.api.core.v1.InterfaceMacvtap"
      masquerade:
        $ref: "#/definitions/kubevirt.io.api.core.v1.InterfaceMasquerade"
      model:
        type: "string"
        description: "Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139,\
          \ virtio. Defaults to virtio."
      name:
        type: "string"
        description: "Logical name of the interface as well as a reference to the\
          \ associated networks. Must match the Name of a Network."
        default: ""
      pciAddress:
        type: "string"
        description: "If specified, the virtual network interface will be placed on\
          \ the guests pci address with the specified PCI address. For example: 0000:81:01.10"
      ports:
        type: "array"
        description: "List of ports to be forwarded to the virtual machine."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.Port"
      slirp:
        $ref: "#/definitions/kubevirt.io.api.core.v1.InterfaceSlirp"
      sriov:
        $ref: "#/definitions/kubevirt.io.api.core.v1.InterfaceSRIOV"
      tag:
        type: "string"
        description: "If specified, the virtual network interface address and its\
          \ tag will be provided to the guest via config drive"
    example:
      dhcpOptions:
        ntpServers:
        - "ntpServers"
        - "ntpServers"
        tftpServerName: "tftpServerName"
        bootFileName: "bootFileName"
        privateOptions:
        - value: "value"
          option: 4
        - value: "value"
          option: 4
      slirp: {}
      macvtap: {}
      ports:
      - protocol: "protocol"
        port: 7
        name: "name"
      - protocol: "protocol"
        port: 7
        name: "name"
      macAddress: "macAddress"
      masquerade: {}
      bootOrder: 2
      name: "name"
      sriov: {}
      model: "model"
      pciAddress: "pciAddress"
      bridge: {}
      tag: "tag"
  kubevirt.io.api.core.v1.InterfaceBridge:
    type: "object"
    description: "InterfaceBridge connects to a given network via a linux bridge."
  kubevirt.io.api.core.v1.InterfaceMacvtap:
    type: "object"
    description: "InterfaceMacvtap connects to a given network by extending the Kubernetes\
      \ node's L2 networks via a macvtap interface."
  kubevirt.io.api.core.v1.InterfaceMasquerade:
    type: "object"
    description: "InterfaceMasquerade connects to a given network using netfilter\
      \ rules to nat the traffic."
  kubevirt.io.api.core.v1.InterfaceSRIOV:
    type: "object"
    description: "InterfaceSRIOV connects to a given network by passing-through an\
      \ SR-IOV PCI device via vfio."
  kubevirt.io.api.core.v1.InterfaceSlirp:
    type: "object"
    description: "InterfaceSlirp connects to a given network using QEMU user networking\
      \ mode."
  kubevirt.io.api.core.v1.KVMTimer:
    type: "object"
    properties:
      present:
        type: "boolean"
        description: "Enabled set to false makes sure that the machine type or a preset\
          \ can't add the timer. Defaults to true."
    example:
      present: true
  kubevirt.io.api.core.v1.KernelBoot:
    type: "object"
    properties:
      container:
        description: "Container defines the container that containes kernel artifacts"
        $ref: "#/definitions/kubevirt.io.api.core.v1.KernelBootContainer"
      kernelArgs:
        type: "string"
        description: "Arguments to be passed to the kernel at boot time"
    description: "Represents the firmware blob used to assist in the kernel boot process.\
      \ Used for setting the kernel, initrd and command line arguments"
    example:
      container:
        image: "image"
        imagePullPolicy: "Always"
        imagePullSecret: "imagePullSecret"
        initrdPath: "initrdPath"
        kernelPath: "kernelPath"
      kernelArgs: "kernelArgs"
  kubevirt.io.api.core.v1.KernelBootContainer:
    type: "object"
    required:
    - "image"
    properties:
      image:
        type: "string"
        description: "Image that contains initrd / kernel files."
        default: ""
      imagePullPolicy:
        type: "string"
        description: "Image pull policy. One of Always, Never, IfNotPresent. Defaults\
          \ to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot\
          \ be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\
          \nPossible enum values:\n - `\"Always\"` means that kubelet always attempts\
          \ to pull the latest image. Container will fail If the pull fails.\n - `\"\
          IfNotPresent\"` means that kubelet pulls if the image isn't present on disk.\
          \ Container will fail if the image isn't present and the pull fails.\n -\
          \ `\"Never\"` means that kubelet never pulls an image, but only uses a local\
          \ image. Container will fail if the image isn't present"
        enum:
        - "Always"
        - "IfNotPresent"
        - "Never"
      imagePullSecret:
        type: "string"
        description: "ImagePullSecret is the name of the Docker registry secret required\
          \ to pull the image. The secret must already exist."
      initrdPath:
        type: "string"
        description: "the fully-qualified path to the ramdisk image in the host OS"
      kernelPath:
        type: "string"
        description: "The fully-qualified path to the kernel image in the host OS"
    description: "If set, the VM will be booted from the defined kernel / initrd."
    example:
      image: "image"
      imagePullPolicy: "Always"
      imagePullSecret: "imagePullSecret"
      initrdPath: "initrdPath"
      kernelPath: "kernelPath"
  kubevirt.io.api.core.v1.LaunchSecurity:
    type: "object"
    properties:
      sev:
        description: "AMD Secure Encrypted Virtualization (SEV)."
        $ref: "#/definitions/kubevirt.io.api.core.v1.SEV"
    example:
      sev: {}
  kubevirt.io.api.core.v1.LunTarget:
    type: "object"
    properties:
      bus:
        type: "string"
        description: "Bus indicates the type of disk device to emulate. supported\
          \ values: virtio, sata, scsi."
      readonly:
        type: "boolean"
        description: "ReadOnly. Defaults to false."
    example:
      bus: "bus"
      readonly: true
  kubevirt.io.api.core.v1.Machine:
    type: "object"
    properties:
      type:
        type: "string"
        description: "QEMU machine type is the actual chipset of the VirtualMachineInstance."
        default: ""
    example:
      type: "type"
  kubevirt.io.api.core.v1.Memory:
    type: "object"
    properties:
      guest:
        description: "Guest allows to specifying the amount of memory which is visible\
          \ inside the Guest OS. The Guest must lie between Requests and Limits from\
          \ the resources section. Defaults to the requested memory in the resources\
          \ section if not specified."
        $ref: "#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity"
      hugepages:
        description: "Hugepages allow to use hugepages for the VirtualMachineInstance\
          \ instead of regular memory."
        $ref: "#/definitions/kubevirt.io.api.core.v1.Hugepages"
    description: "Memory allows specifying the VirtualMachineInstance memory features."
    example:
      hugepages:
        pageSize: "pageSize"
      guest: {}
  kubevirt.io.api.core.v1.MigrationConfiguration:
    type: "object"
    properties:
      allowAutoConverge:
        type: "boolean"
      allowPostCopy:
        type: "boolean"
      bandwidthPerMigration:
        $ref: "#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity"
      completionTimeoutPerGiB:
        type: "integer"
        format: "int64"
      disableTLS:
        type: "boolean"
      network:
        type: "string"
      nodeDrainTaintKey:
        type: "string"
      parallelMigrationsPerCluster:
        type: "integer"
        format: "int64"
      parallelOutboundMigrationsPerNode:
        type: "integer"
        format: "int64"
      progressTimeout:
        type: "integer"
        format: "int64"
      unsafeMigrationOverride:
        type: "boolean"
    description: "MigrationConfiguration holds migration options"
    example:
      completionTimeoutPerGiB: 0
      unsafeMigrationOverride: true
      allowPostCopy: true
      disableTLS: true
      parallelMigrationsPerCluster: 6
      allowAutoConverge: true
      bandwidthPerMigration: {}
      parallelOutboundMigrationsPerNode: 1
      nodeDrainTaintKey: "nodeDrainTaintKey"
      progressTimeout: 5
      network: "network"
  kubevirt.io.api.core.v1.MultusNetwork:
    type: "object"
    required:
    - "networkName"
    properties:
      default:
        type: "boolean"
        description: "Select the default network and add it to the multus-cni.io/default-network\
          \ annotation."
      networkName:
        type: "string"
        description: "References to a NetworkAttachmentDefinition CRD object. Format:\
          \ <networkName>, <namespace>/<networkName>. If namespace is not specified,\
          \ VMI namespace is assumed."
        default: ""
    description: "Represents the multus cni network."
    example:
      default: true
      networkName: "networkName"
  kubevirt.io.api.core.v1.NUMA:
    type: "object"
    properties:
      guestMappingPassthrough:
        description: "GuestMappingPassthrough will create an efficient guest topology\
          \ based on host CPUs exclusively assigned to a pod. The created topology\
          \ ensures that memory and CPUs on the virtual numa nodes never cross boundaries\
          \ of host numa nodes."
        $ref: "#/definitions/kubevirt.io.api.core.v1.NUMAGuestMappingPassthrough"
    example:
      guestMappingPassthrough: {}
  kubevirt.io.api.core.v1.NUMAGuestMappingPassthrough:
    type: "object"
    description: "NUMAGuestMappingPassthrough instructs kubevirt to model numa topology\
      \ which is compatible with the CPU pinning on the guest. This will result in\
      \ a subset of the node numa topology being passed through, ensuring that virtual\
      \ numa nodes and their memory never cross boundaries coming from the node numa\
      \ mapping."
  kubevirt.io.api.core.v1.Network:
    type: "object"
    required:
    - "name"
    properties:
      multus:
        $ref: "#/definitions/kubevirt.io.api.core.v1.MultusNetwork"
      name:
        type: "string"
        description: "Network name. Must be a DNS_LABEL and unique within the vm.\
          \ More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        default: ""
      pod:
        $ref: "#/definitions/kubevirt.io.api.core.v1.PodNetwork"
    description: "Network represents a network type and a resource that should be\
      \ connected to the vm."
    example:
      pod:
        vmNetworkCIDR: "vmNetworkCIDR"
        vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
      name: "name"
      multus:
        default: true
        networkName: "networkName"
  kubevirt.io.api.core.v1.PITTimer:
    type: "object"
    properties:
      present:
        type: "boolean"
        description: "Enabled set to false makes sure that the machine type or a preset\
          \ can't add the timer. Defaults to true."
      tickPolicy:
        type: "string"
        description: "TickPolicy determines what happens when QEMU misses a deadline\
          \ for injecting a tick to the guest. One of \"delay\", \"catchup\", \"discard\"\
          ."
    example:
      tickPolicy: "tickPolicy"
      present: true
  kubevirt.io.api.core.v1.PersistentVolumeClaimInfo:
    type: "object"
    properties:
      accessModes:
        type: "array"
        description: "AccessModes contains the desired access modes the volume should\
          \ have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"
        items:
          type: "string"
          default: ""
        x-kubernetes-list-type: "atomic"
      capacity:
        type: "object"
        description: "Capacity represents the capacity set on the corresponding PVC\
          \ status"
        additionalProperties:
          $ref: "#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity"
      filesystemOverhead:
        type: "string"
        description: "Percentage of filesystem's size to be reserved when resizing\
          \ the PVC"
      preallocated:
        type: "boolean"
        description: "Preallocated indicates if the PVC's storage is preallocated\
          \ or not"
      requests:
        type: "object"
        description: "Requests represents the resources requested by the corresponding\
          \ PVC spec"
        additionalProperties:
          $ref: "#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity"
      volumeMode:
        type: "string"
        description: "VolumeMode defines what type of volume is required by the claim.\
          \ Value of Filesystem is implied when not included in claim spec."
    description: "PersistentVolumeClaimInfo contains the relavant information virt-handler\
      \ needs cached about a PVC"
    example:
      filesystemOverhead: "filesystemOverhead"
      preallocated: true
      accessModes:
      - "accessModes"
      - "accessModes"
      requests: {}
      capacity: {}
      volumeMode: "volumeMode"
  kubevirt.io.api.core.v1.PersistentVolumeClaimVolumeSource:
    type: "object"
    required:
    - "claimName"
    properties:
      claimName:
        type: "string"
        description: "ClaimName is the name of a PersistentVolumeClaim in the same\
          \ namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        default: ""
      hotpluggable:
        type: "boolean"
        description: "Hotpluggable indicates whether the volume can be hotplugged\
          \ and hotunplugged."
      readOnly:
        type: "boolean"
        description: "Will force the ReadOnly setting in VolumeMounts. Default false."
    description: "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim\
      \ in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
    example:
      claimName: "claimName"
      hotpluggable: true
      readOnly: true
  kubevirt.io.api.core.v1.PodNetwork:
    type: "object"
    properties:
      vmIPv6NetworkCIDR:
        type: "string"
        description: "IPv6 CIDR for the vm network. Defaults to fd10:0:2::/120 if\
          \ not specified."
      vmNetworkCIDR:
        type: "string"
        description: "CIDR for vm network. Default 10.0.2.0/24 if not specified."
    description: "Represents the stock pod network interface."
    example:
      vmNetworkCIDR: "vmNetworkCIDR"
      vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
  kubevirt.io.api.core.v1.Port:
    type: "object"
    required:
    - "port"
    properties:
      name:
        type: "string"
        description: "If specified, this must be an IANA_SVC_NAME and unique within\
          \ the pod. Each named port in a pod must have a unique name. Name for the\
          \ port that can be referred to by services."
      port:
        type: "integer"
        format: "int32"
        description: "Number of port to expose for the virtual machine. This must\
          \ be a valid port number, 0 < x < 65536."
        default: 0
      protocol:
        type: "string"
        description: "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
    description: "Port represents a port to expose from the virtual machine. Default\
      \ protocol TCP. The port field is mandatory"
    example:
      protocol: "protocol"
      port: 7
      name: "name"
  kubevirt.io.api.core.v1.Probe:
    type: "object"
    properties:
      exec:
        description: "One and only one of the following should be specified. Exec\
          \ specifies the action to take, it will be executed on the guest through\
          \ the qemu-guest-agent. If the guest agent is not available, this probe\
          \ will fail."
        $ref: "#/definitions/k8s.io.v1.ExecAction"
      failureThreshold:
        type: "integer"
        format: "int32"
        description: "Minimum consecutive failures for the probe to be considered\
          \ failed after having succeeded. Defaults to 3. Minimum value is 1."
      guestAgentPing:
        description: "GuestAgentPing contacts the qemu-guest-agent for availability\
          \ checks."
        $ref: "#/definitions/kubevirt.io.api.core.v1.GuestAgentPing"
      httpGet:
        description: "HTTPGet specifies the http request to perform."
        $ref: "#/definitions/k8s.io.v1.HTTPGetAction"
      initialDelaySeconds:
        type: "integer"
        format: "int32"
        description: "Number of seconds after the VirtualMachineInstance has started\
          \ before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
      periodSeconds:
        type: "integer"
        format: "int32"
        description: "How often (in seconds) to perform the probe. Default to 10 seconds.\
          \ Minimum value is 1."
      successThreshold:
        type: "integer"
        format: "int32"
        description: "Minimum consecutive successes for the probe to be considered\
          \ successful after having failed. Defaults to 1. Must be 1 for liveness.\
          \ Minimum value is 1."
      tcpSocket:
        description: "TCPSocket specifies an action involving a TCP port. TCP hooks\
          \ not yet supported"
        $ref: "#/definitions/k8s.io.v1.TCPSocketAction"
      timeoutSeconds:
        type: "integer"
        format: "int32"
        description: "Number of seconds after which the probe times out. For exec\
          \ probes the timeout fails the probe but does not terminate the command\
          \ running on the guest. This means a blocking command can result in an increasing\
          \ load on the guest. A small buffer will be added to the resulting workload\
          \ exec probe to compensate for delays caused by the qemu guest exec mechanism.\
          \ Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
    description: "Probe describes a health check to be performed against a VirtualMachineInstance\
      \ to determine whether it is alive or ready to receive traffic."
    example:
      failureThreshold: 1
      periodSeconds: 6
      tcpSocket:
        host: "host"
      timeoutSeconds: 1
      guestAgentPing: {}
      successThreshold: 7
      initialDelaySeconds: 1
      exec:
        command:
        - "command"
        - "command"
      httpGet:
        path: "path"
        scheme: "HTTP"
        port: {}
        host: "host"
        httpHeaders:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
  kubevirt.io.api.core.v1.QemuGuestAgentSSHPublicKeyAccessCredentialPropagation:
    type: "object"
    required:
    - "users"
    properties:
      users:
        type: "array"
        description: "Users represents a list of guest users that should have the\
          \ ssh public keys added to their authorized_keys file."
        items:
          type: "string"
          default: ""
        x-kubernetes-list-type: "set"
    example:
      users:
      - "users"
      - "users"
  kubevirt.io.api.core.v1.QemuGuestAgentUserPasswordAccessCredentialPropagation:
    type: "object"
  kubevirt.io.api.core.v1.RTCTimer:
    type: "object"
    properties:
      present:
        type: "boolean"
        description: "Enabled set to false makes sure that the machine type or a preset\
          \ can't add the timer. Defaults to true."
      tickPolicy:
        type: "string"
        description: "TickPolicy determines what happens when QEMU misses a deadline\
          \ for injecting a tick to the guest. One of \"delay\", \"catchup\"."
      track:
        type: "string"
        description: "Track the guest or the wall clock."
    example:
      tickPolicy: "tickPolicy"
      present: true
      track: "track"
  kubevirt.io.api.core.v1.Realtime:
    type: "object"
    properties:
      mask:
        type: "string"
        description: "Mask defines the vcpu mask expression that defines which vcpus\
          \ are used for realtime. Format matches libvirt's expressions. Example:\
          \ \"0-3,^1\",\"0,2,3\",\"2-3\""
    description: "Realtime holds the tuning knobs specific for realtime workloads."
    example:
      mask: "mask"
  kubevirt.io.api.core.v1.RemoveVolumeOptions:
    type: "object"
    required:
    - "name"
    properties:
      dryRun:
        type: "array"
        description: "When present, indicates that modifications should not be persisted.\
          \ An invalid or unrecognized dryRun directive will result in an error response\
          \ and no further processing of the request. Valid values are: - All: all\
          \ dry run stages will be processed"
        items:
          type: "string"
          default: ""
        x-kubernetes-list-type: "atomic"
      name:
        type: "string"
        description: "Name represents the name that maps to both the disk and volume\
          \ that should be removed"
        default: ""
    description: "RemoveVolumeOptions is provided when dynamically hot unplugging\
      \ volume and disk"
    example:
      dryRun:
      - "dryRun"
      - "dryRun"
      name: "name"
  kubevirt.io.api.core.v1.ResourceRequirements:
    type: "object"
    properties:
      limits:
        type: "object"
        description: "Limits describes the maximum amount of compute resources allowed.\
          \ Valid resource keys are \"memory\" and \"cpu\"."
        additionalProperties:
          $ref: "#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity"
      overcommitGuestOverhead:
        type: "boolean"
        description: "Don't ask the scheduler to take the guest-management overhead\
          \ into account. Instead put the overhead only into the container's memory\
          \ limit. This can lead to crashes if all memory is in use on a node. Defaults\
          \ to false."
      requests:
        type: "object"
        description: "Requests is a description of the initial vmi resources. Valid\
          \ resource keys are \"memory\" and \"cpu\"."
        additionalProperties:
          $ref: "#/definitions/k8s.io.apimachinery.pkg.api.resource.Quantity"
    example:
      overcommitGuestOverhead: true
      requests: {}
      limits: {}
  kubevirt.io.api.core.v1.Rng:
    type: "object"
    description: "Rng represents the random device passed from host"
  kubevirt.io.api.core.v1.SEV:
    type: "object"
  kubevirt.io.api.core.v1.SSHPublicKeyAccessCredential:
    type: "object"
    required:
    - "propagationMethod"
    - "source"
    properties:
      propagationMethod:
        description: "PropagationMethod represents how the public key is injected\
          \ into the vm guest."
        $ref: "#/definitions/kubevirt.io.api.core.v1.SSHPublicKeyAccessCredentialPropagationMethod"
      source:
        description: "Source represents where the public keys are pulled from"
        $ref: "#/definitions/kubevirt.io.api.core.v1.SSHPublicKeyAccessCredentialSource"
    description: "SSHPublicKeyAccessCredential represents a source and propagation\
      \ method for injecting ssh public keys into a vm guest"
    example:
      propagationMethod:
        configDrive: {}
        qemuGuestAgent:
          users:
          - "users"
          - "users"
      source:
        secret:
          secretName: "secretName"
  kubevirt.io.api.core.v1.SSHPublicKeyAccessCredentialPropagationMethod:
    type: "object"
    properties:
      configDrive:
        description: "ConfigDrivePropagation means that the ssh public keys are injected\
          \ into the VM using metadata using the configDrive cloud-init provider"
        $ref: "#/definitions/kubevirt.io.api.core.v1.ConfigDriveSSHPublicKeyAccessCredentialPropagation"
      qemuGuestAgent:
        description: "QemuGuestAgentAccessCredentailPropagation means ssh public keys\
          \ are dynamically injected into the vm at runtime via the qemu guest agent.\
          \ This feature requires the qemu guest agent to be running within the guest."
        $ref: "#/definitions/kubevirt.io.api.core.v1.QemuGuestAgentSSHPublicKeyAccessCredentialPropagation"
    description: "SSHPublicKeyAccessCredentialPropagationMethod represents the method\
      \ used to inject a ssh public key into the vm guest. Only one of its members\
      \ may be specified."
    example:
      configDrive: {}
      qemuGuestAgent:
        users:
        - "users"
        - "users"
  kubevirt.io.api.core.v1.SSHPublicKeyAccessCredentialSource:
    type: "object"
    properties:
      secret:
        description: "Secret means that the access credential is pulled from a kubernetes\
          \ secret"
        $ref: "#/definitions/kubevirt.io.api.core.v1.AccessCredentialSecretSource"
    description: "SSHPublicKeyAccessCredentialSource represents where to retrieve\
      \ the ssh key credentials Only one of its members may be specified."
    example:
      secret:
        secretName: "secretName"
  kubevirt.io.api.core.v1.SecretVolumeSource:
    type: "object"
    properties:
      optional:
        type: "boolean"
        description: "Specify whether the Secret or it's keys must be defined"
      secretName:
        type: "string"
        description: "Name of the secret in the pod's namespace to use. More info:\
          \ https://kubernetes.io/docs/concepts/storage/volumes#secret"
      volumeLabel:
        type: "string"
        description: "The volume label of the resulting disk inside the VMI. Different\
          \ bootstrapping mechanisms require different values. Typical values are\
          \ \"cidata\" (cloud-init), \"config-2\" (cloud-init) or \"OEMDRV\" (kickstart)."
    description: "SecretVolumeSource adapts a Secret into a volume."
    example:
      secretName: "secretName"
      volumeLabel: "volumeLabel"
      optional: true
  kubevirt.io.api.core.v1.ServiceAccountVolumeSource:
    type: "object"
    properties:
      serviceAccountName:
        type: "string"
        description: "Name of the service account in the pod's namespace to use. More\
          \ info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
    description: "ServiceAccountVolumeSource adapts a ServiceAccount into a volume."
    example:
      serviceAccountName: "serviceAccountName"
  kubevirt.io.api.core.v1.SoundDevice:
    type: "object"
    required:
    - "name"
    properties:
      model:
        type: "string"
        description: "We only support ich9 or ac97. If SoundDevice is not set: No\
          \ sound card is emulated. If SoundDevice is set but Model is not: ich9"
      name:
        type: "string"
        description: "User's defined name for this sound device"
        default: ""
    description: "Represents the user's configuration to emulate sound cards in the\
      \ VMI."
    example:
      name: "name"
      model: "model"
  kubevirt.io.api.core.v1.SyNICTimer:
    type: "object"
    properties:
      direct:
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
      enabled:
        type: "boolean"
    example:
      direct:
        enabled: true
      enabled: true
  kubevirt.io.api.core.v1.SysprepSource:
    type: "object"
    properties:
      configMap:
        description: "ConfigMap references a ConfigMap that contains Sysprep answer\
          \ file named autounattend.xml that should be attached as disk of CDROM type."
        $ref: "#/definitions/k8s.io.v1.LocalObjectReference"
      secret:
        description: "Secret references a k8s Secret that contains Sysprep answer\
          \ file named autounattend.xml that should be attached as disk of CDROM type."
        $ref: "#/definitions/k8s.io.v1.LocalObjectReference"
    description: "Represents a Sysprep volume source."
    example:
      configMap:
        name: "name"
      secret:
        name: "name"
  kubevirt.io.api.core.v1.TPMDevice:
    type: "object"
  kubevirt.io.api.core.v1.Timer:
    type: "object"
    properties:
      hpet:
        description: "HPET (High Precision Event Timer) - multiple timers with periodic\
          \ interrupts."
        $ref: "#/definitions/kubevirt.io.api.core.v1.HPETTimer"
      hyperv:
        description: "Hyperv (Hypervclock) - lets guests read the host’s wall clock\
          \ time (paravirtualized). For windows guests."
        $ref: "#/definitions/kubevirt.io.api.core.v1.HypervTimer"
      kvm:
        description: "KVM \t(KVM clock) - lets guests read the host’s wall clock time\
          \ (paravirtualized). For linux guests."
        $ref: "#/definitions/kubevirt.io.api.core.v1.KVMTimer"
      pit:
        description: "PIT (Programmable Interval Timer) - a timer with periodic interrupts."
        $ref: "#/definitions/kubevirt.io.api.core.v1.PITTimer"
      rtc:
        description: "RTC (Real Time Clock) - a continuously running timer with periodic\
          \ interrupts."
        $ref: "#/definitions/kubevirt.io.api.core.v1.RTCTimer"
    description: "Represents all available timers in a vmi."
    example:
      rtc:
        tickPolicy: "tickPolicy"
        present: true
        track: "track"
      kvm:
        present: true
      hpet:
        tickPolicy: "tickPolicy"
        present: true
      pit:
        tickPolicy: "tickPolicy"
        present: true
      hyperv:
        present: true
  kubevirt.io.api.core.v1.TopologyHints:
    type: "object"
    properties:
      tscFrequency:
        type: "integer"
        format: "int64"
    example:
      tscFrequency: 9
  kubevirt.io.api.core.v1.UserPasswordAccessCredential:
    type: "object"
    required:
    - "propagationMethod"
    - "source"
    properties:
      propagationMethod:
        description: "propagationMethod represents how the user passwords are injected\
          \ into the vm guest."
        $ref: "#/definitions/kubevirt.io.api.core.v1.UserPasswordAccessCredentialPropagationMethod"
      source:
        description: "Source represents where the user passwords are pulled from"
        $ref: "#/definitions/kubevirt.io.api.core.v1.UserPasswordAccessCredentialSource"
    description: "UserPasswordAccessCredential represents a source and propagation\
      \ method for injecting user passwords into a vm guest Only one of its members\
      \ may be specified."
    example:
      propagationMethod:
        qemuGuestAgent: {}
      source:
        secret:
          secretName: "secretName"
  kubevirt.io.api.core.v1.UserPasswordAccessCredentialPropagationMethod:
    type: "object"
    properties:
      qemuGuestAgent:
        description: "QemuGuestAgentAccessCredentailPropagation means passwords are\
          \ dynamically injected into the vm at runtime via the qemu guest agent.\
          \ This feature requires the qemu guest agent to be running within the guest."
        $ref: "#/definitions/kubevirt.io.api.core.v1.QemuGuestAgentUserPasswordAccessCredentialPropagation"
    description: "UserPasswordAccessCredentialPropagationMethod represents the method\
      \ used to inject a user passwords into the vm guest. Only one of its members\
      \ may be specified."
    example:
      qemuGuestAgent: {}
  kubevirt.io.api.core.v1.UserPasswordAccessCredentialSource:
    type: "object"
    properties:
      secret:
        description: "Secret means that the access credential is pulled from a kubernetes\
          \ secret"
        $ref: "#/definitions/kubevirt.io.api.core.v1.AccessCredentialSecretSource"
    description: "UserPasswordAccessCredentialSource represents where to retrieve\
      \ the user password credentials Only one of its members may be specified."
    example:
      secret:
        secretName: "secretName"
  kubevirt.io.api.core.v1.VGPUDisplayOptions:
    type: "object"
    properties:
      enabled:
        type: "boolean"
        description: "Enabled determines if a display addapter backed by a vGPU should\
          \ be enabled or disabled on the guest. Defaults to true."
      ramFB:
        description: "Enables a boot framebuffer, until the guest OS loads a real\
          \ GPU driver Defaults to true."
        $ref: "#/definitions/kubevirt.io.api.core.v1.FeatureState"
    example:
      enabled: true
      ramFB:
        enabled: true
  kubevirt.io.api.core.v1.VGPUOptions:
    type: "object"
    properties:
      display:
        $ref: "#/definitions/kubevirt.io.api.core.v1.VGPUDisplayOptions"
    example:
      display:
        enabled: true
        ramFB:
          enabled: true
  kubevirt.io.api.core.v1.VirtualMachine:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    - "spec"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        description: "Spec contains the specification of VirtualMachineInstance created"
        $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineSpec"
      status:
        description: "Status holds the current state of the controller and brief information\
          \ about its associated VirtualMachineInstance"
        $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineStatus"
    description: "VirtualMachine handles the VirtualMachines that are not running\
      \ or are in a stopped state The VirtualMachine contains the template to create\
      \ the VirtualMachineInstance. It also mirrors the running state of the created\
      \ VirtualMachineInstance in its status."
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        flavor:
          kind: "kind"
          name: "name"
        running: true
        template:
          metadata:
            generation: 6
            finalizers:
            - "finalizers"
            - "finalizers"
            resourceVersion: "resourceVersion"
            annotations:
              key: "annotations"
            generateName: "generateName"
            labels:
              key: "labels"
            ownerReferences:
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            selfLink: "selfLink"
            deletionGracePeriodSeconds: 0
            uid: "uid"
            managedFields:
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            clusterName: "clusterName"
            creationTimestamp: {}
            name: "name"
            namespace: "namespace"
          spec:
            dnsPolicy: "ClusterFirst"
            livenessProbe:
              failureThreshold: 1
              periodSeconds: 6
              tcpSocket:
                host: "host"
              timeoutSeconds: 1
              guestAgentPing: {}
              successThreshold: 7
              initialDelaySeconds: 1
              exec:
                command:
                - "command"
                - "command"
              httpGet:
                path: "path"
                scheme: "HTTP"
                port: {}
                host: "host"
                httpHeaders:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
            terminationGracePeriodSeconds: 4
            dnsConfig:
              searches:
              - "searches"
              - "searches"
              nameservers:
              - "nameservers"
              - "nameservers"
              options:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
            priorityClassName: "priorityClassName"
            volumes:
            - downwardAPI:
                volumeLabel: "volumeLabel"
                fields:
                - mode: 9
                  path: "path"
                  resourceFieldRef:
                    resource: "resource"
                    containerName: "containerName"
                  fieldRef:
                    apiVersion: "apiVersion"
                    fieldPath: "fieldPath"
                - mode: 9
                  path: "path"
                  resourceFieldRef:
                    resource: "resource"
                    containerName: "containerName"
                  fieldRef:
                    apiVersion: "apiVersion"
                    fieldPath: "fieldPath"
              cloudInitConfigDrive:
                networkDataSecretRef:
                  name: "name"
                userData: "userData"
                networkData: "networkData"
                networkDataBase64: "networkDataBase64"
                secretRef:
                  name: "name"
                userDataBase64: "userDataBase64"
              downwardMetrics: {}
              ephemeral:
                persistentVolumeClaim:
                  claimName: "claimName"
                  readOnly: true
              serviceAccount:
                serviceAccountName: "serviceAccountName"
              sysprep:
                configMap:
                  name: "name"
                secret:
                  name: "name"
              containerDisk:
                image: "image"
                imagePullPolicy: "Always"
                imagePullSecret: "imagePullSecret"
                path: "path"
              hostDisk:
                path: "path"
                shared: true
                type: "type"
              secret:
                secretName: "secretName"
                volumeLabel: "volumeLabel"
                optional: true
              cloudInitNoCloud:
                networkDataSecretRef:
                  name: "name"
                userData: "userData"
                networkData: "networkData"
                networkDataBase64: "networkDataBase64"
                secretRef:
                  name: "name"
                userDataBase64: "userDataBase64"
              configMap:
                volumeLabel: "volumeLabel"
                name: "name"
                optional: true
              dataVolume:
                hotpluggable: true
                name: "name"
              name: "name"
              persistentVolumeClaim:
                claimName: "claimName"
                hotpluggable: true
                readOnly: true
              emptyDisk: {}
            - downwardAPI:
                volumeLabel: "volumeLabel"
                fields:
                - mode: 9
                  path: "path"
                  resourceFieldRef:
                    resource: "resource"
                    containerName: "containerName"
                  fieldRef:
                    apiVersion: "apiVersion"
                    fieldPath: "fieldPath"
                - mode: 9
                  path: "path"
                  resourceFieldRef:
                    resource: "resource"
                    containerName: "containerName"
                  fieldRef:
                    apiVersion: "apiVersion"
                    fieldPath: "fieldPath"
              cloudInitConfigDrive:
                networkDataSecretRef:
                  name: "name"
                userData: "userData"
                networkData: "networkData"
                networkDataBase64: "networkDataBase64"
                secretRef:
                  name: "name"
                userDataBase64: "userDataBase64"
              downwardMetrics: {}
              ephemeral:
                persistentVolumeClaim:
                  claimName: "claimName"
                  readOnly: true
              serviceAccount:
                serviceAccountName: "serviceAccountName"
              sysprep:
                configMap:
                  name: "name"
                secret:
                  name: "name"
              containerDisk:
                image: "image"
                imagePullPolicy: "Always"
                imagePullSecret: "imagePullSecret"
                path: "path"
              hostDisk:
                path: "path"
                shared: true
                type: "type"
              secret:
                secretName: "secretName"
                volumeLabel: "volumeLabel"
                optional: true
              cloudInitNoCloud:
                networkDataSecretRef:
                  name: "name"
                userData: "userData"
                networkData: "networkData"
                networkDataBase64: "networkDataBase64"
                secretRef:
                  name: "name"
                userDataBase64: "userDataBase64"
              configMap:
                volumeLabel: "volumeLabel"
                name: "name"
                optional: true
              dataVolume:
                hotpluggable: true
                name: "name"
              name: "name"
              persistentVolumeClaim:
                claimName: "claimName"
                hotpluggable: true
                readOnly: true
              emptyDisk: {}
            networks:
            - pod:
                vmNetworkCIDR: "vmNetworkCIDR"
                vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
              name: "name"
              multus:
                default: true
                networkName: "networkName"
            - pod:
                vmNetworkCIDR: "vmNetworkCIDR"
                vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
              name: "name"
              multus:
                default: true
                networkName: "networkName"
            nodeSelector:
              key: "nodeSelector"
            hostname: "hostname"
            tolerations:
            - effect: "NoExecute"
              tolerationSeconds: 5
              value: "value"
              key: "key"
              operator: "Equal"
            - effect: "NoExecute"
              tolerationSeconds: 5
              value: "value"
              key: "key"
              operator: "Equal"
            accessCredentials:
            - sshPublicKey:
                propagationMethod:
                  configDrive: {}
                  qemuGuestAgent:
                    users:
                    - "users"
                    - "users"
                source:
                  secret:
                    secretName: "secretName"
              userPassword:
                propagationMethod:
                  qemuGuestAgent: {}
                source:
                  secret:
                    secretName: "secretName"
            - sshPublicKey:
                propagationMethod:
                  configDrive: {}
                  qemuGuestAgent:
                    users:
                    - "users"
                    - "users"
                source:
                  secret:
                    secretName: "secretName"
              userPassword:
                propagationMethod:
                  qemuGuestAgent: {}
                source:
                  secret:
                    secretName: "secretName"
            startStrategy: "startStrategy"
            domain:
              features:
                smm:
                  enabled: true
                kvm:
                  hidden: true
                apic:
                  endOfInterrupt: true
                  enabled: true
                acpi:
                  enabled: true
                pvspinlock:
                  enabled: true
                hyperv:
                  vpindex:
                    enabled: true
                  ipi:
                    enabled: true
                  reenlightenment:
                    enabled: true
                  runtime:
                    enabled: true
                  vendorid:
                    vendorid: "vendorid"
                    enabled: true
                  evmcs:
                    enabled: true
                  synictimer:
                    direct:
                      enabled: true
                    enabled: true
                  spinlocks:
                    spinlocks: 1
                    enabled: true
                  tlbflush:
                    enabled: true
                  synic:
                    enabled: true
                  relaxed:
                    enabled: true
                  vapic:
                    enabled: true
                  reset:
                    enabled: true
                  frequencies:
                    enabled: true
              ioThreadsPolicy: "ioThreadsPolicy"
              memory:
                hugepages:
                  pageSize: "pageSize"
                guest: {}
              devices:
                autoattachPodInterface: true
                interfaces:
                - dhcpOptions:
                    ntpServers:
                    - "ntpServers"
                    - "ntpServers"
                    tftpServerName: "tftpServerName"
                    bootFileName: "bootFileName"
                    privateOptions:
                    - value: "value"
                      option: 4
                    - value: "value"
                      option: 4
                  slirp: {}
                  macvtap: {}
                  ports:
                  - protocol: "protocol"
                    port: 7
                    name: "name"
                  - protocol: "protocol"
                    port: 7
                    name: "name"
                  macAddress: "macAddress"
                  masquerade: {}
                  bootOrder: 2
                  name: "name"
                  sriov: {}
                  model: "model"
                  pciAddress: "pciAddress"
                  bridge: {}
                  tag: "tag"
                - dhcpOptions:
                    ntpServers:
                    - "ntpServers"
                    - "ntpServers"
                    tftpServerName: "tftpServerName"
                    bootFileName: "bootFileName"
                    privateOptions:
                    - value: "value"
                      option: 4
                    - value: "value"
                      option: 4
                  slirp: {}
                  macvtap: {}
                  ports:
                  - protocol: "protocol"
                    port: 7
                    name: "name"
                  - protocol: "protocol"
                    port: 7
                    name: "name"
                  macAddress: "macAddress"
                  masquerade: {}
                  bootOrder: 2
                  name: "name"
                  sriov: {}
                  model: "model"
                  pciAddress: "pciAddress"
                  bridge: {}
                  tag: "tag"
                disks:
                - shareable: true
                  cache: "cache"
                  dedicatedIOThread: true
                  disk:
                    bus: "bus"
                    readonly: true
                    pciAddress: "pciAddress"
                  lun:
                    bus: "bus"
                    readonly: true
                  bootOrder: 3
                  serial: "serial"
                  io: "io"
                  name: "name"
                  tag: "tag"
                  cdrom:
                    tray: "tray"
                    bus: "bus"
                    readonly: true
                  blockSize:
                    custom:
                      physical: 9
                      logical: 7
                    matchVolume:
                      enabled: true
                - shareable: true
                  cache: "cache"
                  dedicatedIOThread: true
                  disk:
                    bus: "bus"
                    readonly: true
                    pciAddress: "pciAddress"
                  lun:
                    bus: "bus"
                    readonly: true
                  bootOrder: 3
                  serial: "serial"
                  io: "io"
                  name: "name"
                  tag: "tag"
                  cdrom:
                    tray: "tray"
                    bus: "bus"
                    readonly: true
                  blockSize:
                    custom:
                      physical: 9
                      logical: 7
                    matchVolume:
                      enabled: true
                inputs:
                - bus: "bus"
                  name: "name"
                  type: "type"
                - bus: "bus"
                  name: "name"
                  type: "type"
                sound:
                  name: "name"
                  model: "model"
                useVirtioTransitional: true
                rng: {}
                autoattachSerialConsole: true
                filesystems:
                - name: "name"
                  virtiofs: {}
                - name: "name"
                  virtiofs: {}
                hostDevices:
                - name: "name"
                  tag: "tag"
                  deviceName: "deviceName"
                - name: "name"
                  tag: "tag"
                  deviceName: "deviceName"
                networkInterfaceMultiqueue: true
                autoattachMemBalloon: true
                tpm: {}
                clientPassthrough: {}
                watchdog:
                  i6300esb:
                    action: "action"
                  name: "name"
                blockMultiQueue: true
                gpus:
                - name: "name"
                  tag: "tag"
                  virtualGPUOptions:
                    display:
                      enabled: true
                      ramFB:
                        enabled: true
                  deviceName: "deviceName"
                - name: "name"
                  tag: "tag"
                  virtualGPUOptions:
                    display:
                      enabled: true
                      ramFB:
                        enabled: true
                  deviceName: "deviceName"
                disableHotplug: true
                autoattachGraphicsDevice: true
              machine:
                type: "type"
              cpu:
                features:
                - name: "name"
                  policy: "policy"
                - name: "name"
                  policy: "policy"
                realtime:
                  mask: "mask"
                cores: 5
                dedicatedCpuPlacement: true
                numa:
                  guestMappingPassthrough: {}
                threads: 2
                model: "model"
                sockets: 5
                isolateEmulatorThread: true
              resources:
                overcommitGuestOverhead: true
                requests: {}
                limits: {}
              chassis:
                serial: "serial"
                asset: "asset"
                sku: "sku"
                version: "version"
                manufacturer: "manufacturer"
              clock:
                timer:
                  rtc:
                    tickPolicy: "tickPolicy"
                    present: true
                    track: "track"
                  kvm:
                    present: true
                  hpet:
                    tickPolicy: "tickPolicy"
                    present: true
                  pit:
                    tickPolicy: "tickPolicy"
                    present: true
                  hyperv:
                    present: true
                utc:
                  offsetSeconds: 1
                timezone: "timezone"
              firmware:
                serial: "serial"
                bootloader:
                  bios:
                    useSerial: true
                  efi:
                    secureBoot: true
                uuid: "uuid"
                kernelBoot:
                  container:
                    image: "image"
                    imagePullPolicy: "Always"
                    imagePullSecret: "imagePullSecret"
                    initrdPath: "initrdPath"
                    kernelPath: "kernelPath"
                  kernelArgs: "kernelArgs"
              launchSecurity:
                sev: {}
            readinessProbe:
              failureThreshold: 1
              periodSeconds: 6
              tcpSocket:
                host: "host"
              timeoutSeconds: 1
              guestAgentPing: {}
              successThreshold: 7
              initialDelaySeconds: 1
              exec:
                command:
                - "command"
                - "command"
              httpGet:
                path: "path"
                scheme: "HTTP"
                port: {}
                host: "host"
                httpHeaders:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
            subdomain: "subdomain"
            evictionStrategy: "evictionStrategy"
            schedulerName: "schedulerName"
            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                  - matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    matchFields:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                  - matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    matchFields:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    matchFields:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                  weight: 0
                - preference:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    matchFields:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "DoesNotExist"
                  weight: 0
              podAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                - labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  weight: 6
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  weight: 6
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                - labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  weight: 6
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  weight: 6
        dataVolumeTemplates:
        - metadata:
            generation: 6
            finalizers:
            - "finalizers"
            - "finalizers"
            resourceVersion: "resourceVersion"
            annotations:
              key: "annotations"
            generateName: "generateName"
            labels:
              key: "labels"
            ownerReferences:
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            selfLink: "selfLink"
            deletionGracePeriodSeconds: 0
            uid: "uid"
            managedFields:
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            clusterName: "clusterName"
            creationTimestamp: {}
            name: "name"
            namespace: "namespace"
          apiVersion: "apiVersion"
          kind: "kind"
          spec:
            finalCheckpoint: true
            preallocation: true
            priorityClassName: "priorityClassName"
            checkpoints:
            - current: "current"
              previous: "previous"
            - current: "current"
              previous: "previous"
            source:
              s3:
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                url: "url"
              registry:
                imageStream: "imageStream"
                pullMethod: "pullMethod"
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                url: "url"
              vddk:
                backingFile: "backingFile"
                initImageURL: "initImageURL"
                secretRef: "secretRef"
                thumbprint: "thumbprint"
                uuid: "uuid"
                url: "url"
              blank: {}
              imageio:
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                diskId: "diskId"
                url: "url"
              upload: {}
              http:
                secretExtraHeaders:
                - "secretExtraHeaders"
                - "secretExtraHeaders"
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                extraHeaders:
                - "extraHeaders"
                - "extraHeaders"
                url: "url"
              pvc:
                name: "name"
                namespace: "namespace"
            storage:
              storageClassName: "storageClassName"
              volumeName: "volumeName"
              resources:
                requests: {}
                limits:
                  key: {}
              selector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              accessModes:
              - "accessModes"
              - "accessModes"
              dataSource:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeMode: "volumeMode"
            pvc:
              storageClassName: "storageClassName"
              dataSourceRef:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeName: "volumeName"
              resources:
                requests: {}
                limits:
                  key: {}
              selector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              accessModes:
              - "accessModes"
              - "accessModes"
              dataSource:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeMode: "volumeMode"
            sourceRef:
              kind: "kind"
              name: "name"
              namespace: "namespace"
            contentType: "contentType"
          status: {}
        - metadata:
            generation: 6
            finalizers:
            - "finalizers"
            - "finalizers"
            resourceVersion: "resourceVersion"
            annotations:
              key: "annotations"
            generateName: "generateName"
            labels:
              key: "labels"
            ownerReferences:
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            - uid: "uid"
              controller: true
              apiVersion: "apiVersion"
              kind: "kind"
              name: "name"
              blockOwnerDeletion: true
            selfLink: "selfLink"
            deletionGracePeriodSeconds: 0
            uid: "uid"
            managedFields:
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            - apiVersion: "apiVersion"
              fieldsV1: {}
              manager: "manager"
              subresource: "subresource"
              operation: "operation"
              fieldsType: "fieldsType"
            clusterName: "clusterName"
            creationTimestamp: {}
            name: "name"
            namespace: "namespace"
          apiVersion: "apiVersion"
          kind: "kind"
          spec:
            finalCheckpoint: true
            preallocation: true
            priorityClassName: "priorityClassName"
            checkpoints:
            - current: "current"
              previous: "previous"
            - current: "current"
              previous: "previous"
            source:
              s3:
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                url: "url"
              registry:
                imageStream: "imageStream"
                pullMethod: "pullMethod"
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                url: "url"
              vddk:
                backingFile: "backingFile"
                initImageURL: "initImageURL"
                secretRef: "secretRef"
                thumbprint: "thumbprint"
                uuid: "uuid"
                url: "url"
              blank: {}
              imageio:
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                diskId: "diskId"
                url: "url"
              upload: {}
              http:
                secretExtraHeaders:
                - "secretExtraHeaders"
                - "secretExtraHeaders"
                secretRef: "secretRef"
                certConfigMap: "certConfigMap"
                extraHeaders:
                - "extraHeaders"
                - "extraHeaders"
                url: "url"
              pvc:
                name: "name"
                namespace: "namespace"
            storage:
              storageClassName: "storageClassName"
              volumeName: "volumeName"
              resources:
                requests: {}
                limits:
                  key: {}
              selector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              accessModes:
              - "accessModes"
              - "accessModes"
              dataSource:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeMode: "volumeMode"
            pvc:
              storageClassName: "storageClassName"
              dataSourceRef:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeName: "volumeName"
              resources:
                requests: {}
                limits:
                  key: {}
              selector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              accessModes:
              - "accessModes"
              - "accessModes"
              dataSource:
                apiGroup: "apiGroup"
                kind: "kind"
                name: "name"
              volumeMode: "volumeMode"
            sourceRef:
              kind: "kind"
              name: "name"
              namespace: "namespace"
            contentType: "contentType"
          status: {}
        runStrategy: "runStrategy"
      status:
        startFailure:
          consecutiveFailCount: 0
          lastFailedVMIUID: "lastFailedVMIUID"
        snapshotInProgress: "snapshotInProgress"
        created: true
        ready: true
        printableStatus: "printableStatus"
        conditions:
        - reason: "reason"
          message: "message"
          type: "type"
          lastProbeTime: {}
          status: "status"
        - reason: "reason"
          message: "message"
          type: "type"
          lastProbeTime: {}
          status: "status"
        stateChangeRequests:
        - uid: "uid"
          data:
            key: "data"
          action: "action"
        - uid: "uid"
          data:
            key: "data"
          action: "action"
        volumeRequests:
        - removeVolumeOptions:
            dryRun:
            - "dryRun"
            - "dryRun"
            name: "name"
          addVolumeOptions:
            disk:
              shareable: true
              cache: "cache"
              dedicatedIOThread: true
              disk:
                bus: "bus"
                readonly: true
                pciAddress: "pciAddress"
              lun:
                bus: "bus"
                readonly: true
              bootOrder: 3
              serial: "serial"
              io: "io"
              name: "name"
              tag: "tag"
              cdrom:
                tray: "tray"
                bus: "bus"
                readonly: true
              blockSize:
                custom:
                  physical: 9
                  logical: 7
                matchVolume:
                  enabled: true
            dryRun:
            - "dryRun"
            - "dryRun"
            name: "name"
            volumeSource:
              dataVolume:
                hotpluggable: true
                name: "name"
              persistentVolumeClaim:
                claimName: "claimName"
                hotpluggable: true
                readOnly: true
        - removeVolumeOptions:
            dryRun:
            - "dryRun"
            - "dryRun"
            name: "name"
          addVolumeOptions:
            disk:
              shareable: true
              cache: "cache"
              dedicatedIOThread: true
              disk:
                bus: "bus"
                readonly: true
                pciAddress: "pciAddress"
              lun:
                bus: "bus"
                readonly: true
              bootOrder: 3
              serial: "serial"
              io: "io"
              name: "name"
              tag: "tag"
              cdrom:
                tray: "tray"
                bus: "bus"
                readonly: true
              blockSize:
                custom:
                  physical: 9
                  logical: 7
                matchVolume:
                  enabled: true
            dryRun:
            - "dryRun"
            - "dryRun"
            name: "name"
            volumeSource:
              dataVolume:
                hotpluggable: true
                name: "name"
              persistentVolumeClaim:
                claimName: "claimName"
                hotpluggable: true
                readOnly: true
        volumeSnapshotStatuses:
        - reason: "reason"
          name: "name"
          enabled: false
        - reason: "reason"
          name: "name"
          enabled: false
        restoreInProgress: "restoreInProgress"
  kubevirt.io.api.core.v1.VirtualMachineCondition:
    type: "object"
    required:
    - "status"
    - "type"
    properties:
      lastProbeTime:
        $ref: "#/definitions/k8s.io.v1.Time"
      lastTransitionTime:
        $ref: "#/definitions/k8s.io.v1.Time"
      message:
        type: "string"
      reason:
        type: "string"
      status:
        type: "string"
        default: ""
      type:
        type: "string"
        default: ""
    description: "VirtualMachineCondition represents the state of VirtualMachine"
    example:
      reason: "reason"
      message: "message"
      type: "type"
      lastProbeTime: {}
      status: "status"
  kubevirt.io.api.core.v1.VirtualMachineInstance:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    - "spec"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        description: "VirtualMachineInstance Spec contains the VirtualMachineInstance\
          \ specification."
        $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceSpec"
      status:
        description: "Status is the high level overview of how the VirtualMachineInstance\
          \ is doing. It contains information available to controllers and users."
        $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceStatus"
    description: "VirtualMachineInstance is *the* VirtualMachineInstance Definition.\
      \ It represents a virtual machine in the runtime environment of kubernetes."
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        dnsPolicy: "ClusterFirst"
        livenessProbe:
          failureThreshold: 1
          periodSeconds: 6
          tcpSocket:
            host: "host"
          timeoutSeconds: 1
          guestAgentPing: {}
          successThreshold: 7
          initialDelaySeconds: 1
          exec:
            command:
            - "command"
            - "command"
          httpGet:
            path: "path"
            scheme: "HTTP"
            port: {}
            host: "host"
            httpHeaders:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
        terminationGracePeriodSeconds: 4
        dnsConfig:
          searches:
          - "searches"
          - "searches"
          nameservers:
          - "nameservers"
          - "nameservers"
          options:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        priorityClassName: "priorityClassName"
        volumes:
        - downwardAPI:
            volumeLabel: "volumeLabel"
            fields:
            - mode: 9
              path: "path"
              resourceFieldRef:
                resource: "resource"
                containerName: "containerName"
              fieldRef:
                apiVersion: "apiVersion"
                fieldPath: "fieldPath"
            - mode: 9
              path: "path"
              resourceFieldRef:
                resource: "resource"
                containerName: "containerName"
              fieldRef:
                apiVersion: "apiVersion"
                fieldPath: "fieldPath"
          cloudInitConfigDrive:
            networkDataSecretRef:
              name: "name"
            userData: "userData"
            networkData: "networkData"
            networkDataBase64: "networkDataBase64"
            secretRef:
              name: "name"
            userDataBase64: "userDataBase64"
          downwardMetrics: {}
          ephemeral:
            persistentVolumeClaim:
              claimName: "claimName"
              readOnly: true
          serviceAccount:
            serviceAccountName: "serviceAccountName"
          sysprep:
            configMap:
              name: "name"
            secret:
              name: "name"
          containerDisk:
            image: "image"
            imagePullPolicy: "Always"
            imagePullSecret: "imagePullSecret"
            path: "path"
          hostDisk:
            path: "path"
            shared: true
            type: "type"
          secret:
            secretName: "secretName"
            volumeLabel: "volumeLabel"
            optional: true
          cloudInitNoCloud:
            networkDataSecretRef:
              name: "name"
            userData: "userData"
            networkData: "networkData"
            networkDataBase64: "networkDataBase64"
            secretRef:
              name: "name"
            userDataBase64: "userDataBase64"
          configMap:
            volumeLabel: "volumeLabel"
            name: "name"
            optional: true
          dataVolume:
            hotpluggable: true
            name: "name"
          name: "name"
          persistentVolumeClaim:
            claimName: "claimName"
            hotpluggable: true
            readOnly: true
          emptyDisk: {}
        - downwardAPI:
            volumeLabel: "volumeLabel"
            fields:
            - mode: 9
              path: "path"
              resourceFieldRef:
                resource: "resource"
                containerName: "containerName"
              fieldRef:
                apiVersion: "apiVersion"
                fieldPath: "fieldPath"
            - mode: 9
              path: "path"
              resourceFieldRef:
                resource: "resource"
                containerName: "containerName"
              fieldRef:
                apiVersion: "apiVersion"
                fieldPath: "fieldPath"
          cloudInitConfigDrive:
            networkDataSecretRef:
              name: "name"
            userData: "userData"
            networkData: "networkData"
            networkDataBase64: "networkDataBase64"
            secretRef:
              name: "name"
            userDataBase64: "userDataBase64"
          downwardMetrics: {}
          ephemeral:
            persistentVolumeClaim:
              claimName: "claimName"
              readOnly: true
          serviceAccount:
            serviceAccountName: "serviceAccountName"
          sysprep:
            configMap:
              name: "name"
            secret:
              name: "name"
          containerDisk:
            image: "image"
            imagePullPolicy: "Always"
            imagePullSecret: "imagePullSecret"
            path: "path"
          hostDisk:
            path: "path"
            shared: true
            type: "type"
          secret:
            secretName: "secretName"
            volumeLabel: "volumeLabel"
            optional: true
          cloudInitNoCloud:
            networkDataSecretRef:
              name: "name"
            userData: "userData"
            networkData: "networkData"
            networkDataBase64: "networkDataBase64"
            secretRef:
              name: "name"
            userDataBase64: "userDataBase64"
          configMap:
            volumeLabel: "volumeLabel"
            name: "name"
            optional: true
          dataVolume:
            hotpluggable: true
            name: "name"
          name: "name"
          persistentVolumeClaim:
            claimName: "claimName"
            hotpluggable: true
            readOnly: true
          emptyDisk: {}
        networks:
        - pod:
            vmNetworkCIDR: "vmNetworkCIDR"
            vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
          name: "name"
          multus:
            default: true
            networkName: "networkName"
        - pod:
            vmNetworkCIDR: "vmNetworkCIDR"
            vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
          name: "name"
          multus:
            default: true
            networkName: "networkName"
        nodeSelector:
          key: "nodeSelector"
        hostname: "hostname"
        tolerations:
        - effect: "NoExecute"
          tolerationSeconds: 5
          value: "value"
          key: "key"
          operator: "Equal"
        - effect: "NoExecute"
          tolerationSeconds: 5
          value: "value"
          key: "key"
          operator: "Equal"
        accessCredentials:
        - sshPublicKey:
            propagationMethod:
              configDrive: {}
              qemuGuestAgent:
                users:
                - "users"
                - "users"
            source:
              secret:
                secretName: "secretName"
          userPassword:
            propagationMethod:
              qemuGuestAgent: {}
            source:
              secret:
                secretName: "secretName"
        - sshPublicKey:
            propagationMethod:
              configDrive: {}
              qemuGuestAgent:
                users:
                - "users"
                - "users"
            source:
              secret:
                secretName: "secretName"
          userPassword:
            propagationMethod:
              qemuGuestAgent: {}
            source:
              secret:
                secretName: "secretName"
        startStrategy: "startStrategy"
        domain:
          features:
            smm:
              enabled: true
            kvm:
              hidden: true
            apic:
              endOfInterrupt: true
              enabled: true
            acpi:
              enabled: true
            pvspinlock:
              enabled: true
            hyperv:
              vpindex:
                enabled: true
              ipi:
                enabled: true
              reenlightenment:
                enabled: true
              runtime:
                enabled: true
              vendorid:
                vendorid: "vendorid"
                enabled: true
              evmcs:
                enabled: true
              synictimer:
                direct:
                  enabled: true
                enabled: true
              spinlocks:
                spinlocks: 1
                enabled: true
              tlbflush:
                enabled: true
              synic:
                enabled: true
              relaxed:
                enabled: true
              vapic:
                enabled: true
              reset:
                enabled: true
              frequencies:
                enabled: true
          ioThreadsPolicy: "ioThreadsPolicy"
          memory:
            hugepages:
              pageSize: "pageSize"
            guest: {}
          devices:
            autoattachPodInterface: true
            interfaces:
            - dhcpOptions:
                ntpServers:
                - "ntpServers"
                - "ntpServers"
                tftpServerName: "tftpServerName"
                bootFileName: "bootFileName"
                privateOptions:
                - value: "value"
                  option: 4
                - value: "value"
                  option: 4
              slirp: {}
              macvtap: {}
              ports:
              - protocol: "protocol"
                port: 7
                name: "name"
              - protocol: "protocol"
                port: 7
                name: "name"
              macAddress: "macAddress"
              masquerade: {}
              bootOrder: 2
              name: "name"
              sriov: {}
              model: "model"
              pciAddress: "pciAddress"
              bridge: {}
              tag: "tag"
            - dhcpOptions:
                ntpServers:
                - "ntpServers"
                - "ntpServers"
                tftpServerName: "tftpServerName"
                bootFileName: "bootFileName"
                privateOptions:
                - value: "value"
                  option: 4
                - value: "value"
                  option: 4
              slirp: {}
              macvtap: {}
              ports:
              - protocol: "protocol"
                port: 7
                name: "name"
              - protocol: "protocol"
                port: 7
                name: "name"
              macAddress: "macAddress"
              masquerade: {}
              bootOrder: 2
              name: "name"
              sriov: {}
              model: "model"
              pciAddress: "pciAddress"
              bridge: {}
              tag: "tag"
            disks:
            - shareable: true
              cache: "cache"
              dedicatedIOThread: true
              disk:
                bus: "bus"
                readonly: true
                pciAddress: "pciAddress"
              lun:
                bus: "bus"
                readonly: true
              bootOrder: 3
              serial: "serial"
              io: "io"
              name: "name"
              tag: "tag"
              cdrom:
                tray: "tray"
                bus: "bus"
                readonly: true
              blockSize:
                custom:
                  physical: 9
                  logical: 7
                matchVolume:
                  enabled: true
            - shareable: true
              cache: "cache"
              dedicatedIOThread: true
              disk:
                bus: "bus"
                readonly: true
                pciAddress: "pciAddress"
              lun:
                bus: "bus"
                readonly: true
              bootOrder: 3
              serial: "serial"
              io: "io"
              name: "name"
              tag: "tag"
              cdrom:
                tray: "tray"
                bus: "bus"
                readonly: true
              blockSize:
                custom:
                  physical: 9
                  logical: 7
                matchVolume:
                  enabled: true
            inputs:
            - bus: "bus"
              name: "name"
              type: "type"
            - bus: "bus"
              name: "name"
              type: "type"
            sound:
              name: "name"
              model: "model"
            useVirtioTransitional: true
            rng: {}
            autoattachSerialConsole: true
            filesystems:
            - name: "name"
              virtiofs: {}
            - name: "name"
              virtiofs: {}
            hostDevices:
            - name: "name"
              tag: "tag"
              deviceName: "deviceName"
            - name: "name"
              tag: "tag"
              deviceName: "deviceName"
            networkInterfaceMultiqueue: true
            autoattachMemBalloon: true
            tpm: {}
            clientPassthrough: {}
            watchdog:
              i6300esb:
                action: "action"
              name: "name"
            blockMultiQueue: true
            gpus:
            - name: "name"
              tag: "tag"
              virtualGPUOptions:
                display:
                  enabled: true
                  ramFB:
                    enabled: true
              deviceName: "deviceName"
            - name: "name"
              tag: "tag"
              virtualGPUOptions:
                display:
                  enabled: true
                  ramFB:
                    enabled: true
              deviceName: "deviceName"
            disableHotplug: true
            autoattachGraphicsDevice: true
          machine:
            type: "type"
          cpu:
            features:
            - name: "name"
              policy: "policy"
            - name: "name"
              policy: "policy"
            realtime:
              mask: "mask"
            cores: 5
            dedicatedCpuPlacement: true
            numa:
              guestMappingPassthrough: {}
            threads: 2
            model: "model"
            sockets: 5
            isolateEmulatorThread: true
          resources:
            overcommitGuestOverhead: true
            requests: {}
            limits: {}
          chassis:
            serial: "serial"
            asset: "asset"
            sku: "sku"
            version: "version"
            manufacturer: "manufacturer"
          clock:
            timer:
              rtc:
                tickPolicy: "tickPolicy"
                present: true
                track: "track"
              kvm:
                present: true
              hpet:
                tickPolicy: "tickPolicy"
                present: true
              pit:
                tickPolicy: "tickPolicy"
                present: true
              hyperv:
                present: true
            utc:
              offsetSeconds: 1
            timezone: "timezone"
          firmware:
            serial: "serial"
            bootloader:
              bios:
                useSerial: true
              efi:
                secureBoot: true
            uuid: "uuid"
            kernelBoot:
              container:
                image: "image"
                imagePullPolicy: "Always"
                imagePullSecret: "imagePullSecret"
                initrdPath: "initrdPath"
                kernelPath: "kernelPath"
              kernelArgs: "kernelArgs"
          launchSecurity:
            sev: {}
        readinessProbe:
          failureThreshold: 1
          periodSeconds: 6
          tcpSocket:
            host: "host"
          timeoutSeconds: 1
          guestAgentPing: {}
          successThreshold: 7
          initialDelaySeconds: 1
          exec:
            command:
            - "command"
            - "command"
          httpGet:
            path: "path"
            scheme: "HTTP"
            port: {}
            host: "host"
            httpHeaders:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
        subdomain: "subdomain"
        evictionStrategy: "evictionStrategy"
        schedulerName: "schedulerName"
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                matchFields:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
              - matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                matchFields:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                matchFields:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
              weight: 0
            - preference:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                matchFields:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
              weight: 0
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              namespaceSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              topologyKey: "topologyKey"
              namespaces:
              - "namespaces"
              - "namespaces"
            - labelSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              namespaceSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              topologyKey: "topologyKey"
              namespaces:
              - "namespaces"
              - "namespaces"
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              weight: 6
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              weight: 6
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              namespaceSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              topologyKey: "topologyKey"
              namespaces:
              - "namespaces"
              - "namespaces"
            - labelSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              namespaceSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              topologyKey: "topologyKey"
              namespaces:
              - "namespaces"
              - "namespaces"
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              weight: 6
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              weight: 6
      status:
        nodeName: "nodeName"
        phase: "phase"
        reason: "reason"
        interfaces:
        - ipAddress: "ipAddress"
          name: "name"
          ipAddresses:
          - "ipAddresses"
          - "ipAddresses"
          interfaceName: "interfaceName"
          infoSource: "infoSource"
          mac: "mac"
        - ipAddress: "ipAddress"
          name: "name"
          ipAddresses:
          - "ipAddresses"
          - "ipAddresses"
          interfaceName: "interfaceName"
          infoSource: "infoSource"
          mac: "mac"
        fsFreezeStatus: "fsFreezeStatus"
        activePods:
          key: "activePods"
        topologyHints:
          tscFrequency: 9
        evacuationNodeName: "evacuationNodeName"
        virtualMachineRevisionName: "virtualMachineRevisionName"
        phaseTransitionTimestamps:
        - phase: "phase"
        - phase: "phase"
        migrationTransport: "migrationTransport"
        volumeStatus:
        - phase: "phase"
          reason: "reason"
          size: 3
          hotplugVolume:
            attachPodUID: "attachPodUID"
            attachPodName: "attachPodName"
          name: "name"
          message: "message"
          persistentVolumeClaimInfo:
            filesystemOverhead: "filesystemOverhead"
            preallocated: true
            accessModes:
            - "accessModes"
            - "accessModes"
            requests: {}
            capacity: {}
            volumeMode: "volumeMode"
          target: "target"
        - phase: "phase"
          reason: "reason"
          size: 3
          hotplugVolume:
            attachPodUID: "attachPodUID"
            attachPodName: "attachPodName"
          name: "name"
          message: "message"
          persistentVolumeClaimInfo:
            filesystemOverhead: "filesystemOverhead"
            preallocated: true
            accessModes:
            - "accessModes"
            - "accessModes"
            requests: {}
            capacity: {}
            volumeMode: "volumeMode"
          target: "target"
        guestOSInfo:
          kernelRelease: "kernelRelease"
          versionId: "versionId"
          prettyName: "prettyName"
          machine: "machine"
          kernelVersion: "kernelVersion"
          name: "name"
          id: "id"
          version: "version"
        launcherContainerImageVersion: "launcherContainerImageVersion"
        qosClass: "qosClass"
        conditions:
        - reason: "reason"
          message: "message"
          type: "type"
          lastProbeTime: {}
          status: "status"
        - reason: "reason"
          message: "message"
          type: "type"
          lastProbeTime: {}
          status: "status"
        migrationState:
          sourceNode: "sourceNode"
          targetDirectMigrationNodePorts:
            key: 2
          targetNodeAddress: "targetNodeAddress"
          completed: true
          failed: true
          targetNode: "targetNode"
          migrationPolicyName: "migrationPolicyName"
          targetAttachmentPodUID: "targetAttachmentPodUID"
          mode: "mode"
          targetNodeTopology: "targetNodeTopology"
          migrationUid: "migrationUid"
          targetNodeDomainDetected: true
          migrationConfiguration:
            completionTimeoutPerGiB: 0
            unsafeMigrationOverride: true
            allowPostCopy: true
            disableTLS: true
            parallelMigrationsPerCluster: 6
            allowAutoConverge: true
            bandwidthPerMigration: {}
            parallelOutboundMigrationsPerNode: 1
            nodeDrainTaintKey: "nodeDrainTaintKey"
            progressTimeout: 5
            network: "network"
          targetPod: "targetPod"
          abortRequested: true
          targetCPUSet:
          - 5
          - 5
          abortStatus: "abortStatus"
        migrationMethod: "migrationMethod"
        runtimeUser: 7
  kubevirt.io.api.core.v1.VirtualMachineInstanceCondition:
    type: "object"
    required:
    - "status"
    - "type"
    properties:
      lastProbeTime:
        $ref: "#/definitions/k8s.io.v1.Time"
      lastTransitionTime:
        $ref: "#/definitions/k8s.io.v1.Time"
      message:
        type: "string"
      reason:
        type: "string"
      status:
        type: "string"
        default: ""
      type:
        type: "string"
        default: ""
    example:
      reason: "reason"
      message: "message"
      type: "type"
      lastProbeTime: {}
      status: "status"
  kubevirt.io.api.core.v1.VirtualMachineInstanceGuestOSInfo:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Guest OS Id"
      kernelRelease:
        type: "string"
        description: "Guest OS Kernel Release"
      kernelVersion:
        type: "string"
        description: "Kernel version of the Guest OS"
      machine:
        type: "string"
        description: "Machine type of the Guest OS"
      name:
        type: "string"
        description: "Name of the Guest OS"
      prettyName:
        type: "string"
        description: "Guest OS Pretty Name"
      version:
        type: "string"
        description: "Guest OS Version"
      versionId:
        type: "string"
        description: "Version ID of the Guest OS"
    example:
      kernelRelease: "kernelRelease"
      versionId: "versionId"
      prettyName: "prettyName"
      machine: "machine"
      kernelVersion: "kernelVersion"
      name: "name"
      id: "id"
      version: "version"
  kubevirt.io.api.core.v1.VirtualMachineInstanceList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstance"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "VirtualMachineInstanceList is a list of VirtualMachines"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          dnsPolicy: "ClusterFirst"
          livenessProbe:
            failureThreshold: 1
            periodSeconds: 6
            tcpSocket:
              host: "host"
            timeoutSeconds: 1
            guestAgentPing: {}
            successThreshold: 7
            initialDelaySeconds: 1
            exec:
              command:
              - "command"
              - "command"
            httpGet:
              path: "path"
              scheme: "HTTP"
              port: {}
              host: "host"
              httpHeaders:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
          terminationGracePeriodSeconds: 4
          dnsConfig:
            searches:
            - "searches"
            - "searches"
            nameservers:
            - "nameservers"
            - "nameservers"
            options:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          priorityClassName: "priorityClassName"
          volumes:
          - downwardAPI:
              volumeLabel: "volumeLabel"
              fields:
              - mode: 9
                path: "path"
                resourceFieldRef:
                  resource: "resource"
                  containerName: "containerName"
                fieldRef:
                  apiVersion: "apiVersion"
                  fieldPath: "fieldPath"
              - mode: 9
                path: "path"
                resourceFieldRef:
                  resource: "resource"
                  containerName: "containerName"
                fieldRef:
                  apiVersion: "apiVersion"
                  fieldPath: "fieldPath"
            cloudInitConfigDrive:
              networkDataSecretRef:
                name: "name"
              userData: "userData"
              networkData: "networkData"
              networkDataBase64: "networkDataBase64"
              secretRef:
                name: "name"
              userDataBase64: "userDataBase64"
            downwardMetrics: {}
            ephemeral:
              persistentVolumeClaim:
                claimName: "claimName"
                readOnly: true
            serviceAccount:
              serviceAccountName: "serviceAccountName"
            sysprep:
              configMap:
                name: "name"
              secret:
                name: "name"
            containerDisk:
              image: "image"
              imagePullPolicy: "Always"
              imagePullSecret: "imagePullSecret"
              path: "path"
            hostDisk:
              path: "path"
              shared: true
              type: "type"
            secret:
              secretName: "secretName"
              volumeLabel: "volumeLabel"
              optional: true
            cloudInitNoCloud:
              networkDataSecretRef:
                name: "name"
              userData: "userData"
              networkData: "networkData"
              networkDataBase64: "networkDataBase64"
              secretRef:
                name: "name"
              userDataBase64: "userDataBase64"
            configMap:
              volumeLabel: "volumeLabel"
              name: "name"
              optional: true
            dataVolume:
              hotpluggable: true
              name: "name"
            name: "name"
            persistentVolumeClaim:
              claimName: "claimName"
              hotpluggable: true
              readOnly: true
            emptyDisk: {}
          - downwardAPI:
              volumeLabel: "volumeLabel"
              fields:
              - mode: 9
                path: "path"
                resourceFieldRef:
                  resource: "resource"
                  containerName: "containerName"
                fieldRef:
                  apiVersion: "apiVersion"
                  fieldPath: "fieldPath"
              - mode: 9
                path: "path"
                resourceFieldRef:
                  resource: "resource"
                  containerName: "containerName"
                fieldRef:
                  apiVersion: "apiVersion"
                  fieldPath: "fieldPath"
            cloudInitConfigDrive:
              networkDataSecretRef:
                name: "name"
              userData: "userData"
              networkData: "networkData"
              networkDataBase64: "networkDataBase64"
              secretRef:
                name: "name"
              userDataBase64: "userDataBase64"
            downwardMetrics: {}
            ephemeral:
              persistentVolumeClaim:
                claimName: "claimName"
                readOnly: true
            serviceAccount:
              serviceAccountName: "serviceAccountName"
            sysprep:
              configMap:
                name: "name"
              secret:
                name: "name"
            containerDisk:
              image: "image"
              imagePullPolicy: "Always"
              imagePullSecret: "imagePullSecret"
              path: "path"
            hostDisk:
              path: "path"
              shared: true
              type: "type"
            secret:
              secretName: "secretName"
              volumeLabel: "volumeLabel"
              optional: true
            cloudInitNoCloud:
              networkDataSecretRef:
                name: "name"
              userData: "userData"
              networkData: "networkData"
              networkDataBase64: "networkDataBase64"
              secretRef:
                name: "name"
              userDataBase64: "userDataBase64"
            configMap:
              volumeLabel: "volumeLabel"
              name: "name"
              optional: true
            dataVolume:
              hotpluggable: true
              name: "name"
            name: "name"
            persistentVolumeClaim:
              claimName: "claimName"
              hotpluggable: true
              readOnly: true
            emptyDisk: {}
          networks:
          - pod:
              vmNetworkCIDR: "vmNetworkCIDR"
              vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
            name: "name"
            multus:
              default: true
              networkName: "networkName"
          - pod:
              vmNetworkCIDR: "vmNetworkCIDR"
              vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
            name: "name"
            multus:
              default: true
              networkName: "networkName"
          nodeSelector:
            key: "nodeSelector"
          hostname: "hostname"
          tolerations:
          - effect: "NoExecute"
            tolerationSeconds: 5
            value: "value"
            key: "key"
            operator: "Equal"
          - effect: "NoExecute"
            tolerationSeconds: 5
            value: "value"
            key: "key"
            operator: "Equal"
          accessCredentials:
          - sshPublicKey:
              propagationMethod:
                configDrive: {}
                qemuGuestAgent:
                  users:
                  - "users"
                  - "users"
              source:
                secret:
                  secretName: "secretName"
            userPassword:
              propagationMethod:
                qemuGuestAgent: {}
              source:
                secret:
                  secretName: "secretName"
          - sshPublicKey:
              propagationMethod:
                configDrive: {}
                qemuGuestAgent:
                  users:
                  - "users"
                  - "users"
              source:
                secret:
                  secretName: "secretName"
            userPassword:
              propagationMethod:
                qemuGuestAgent: {}
              source:
                secret:
                  secretName: "secretName"
          startStrategy: "startStrategy"
          domain:
            features:
              smm:
                enabled: true
              kvm:
                hidden: true
              apic:
                endOfInterrupt: true
                enabled: true
              acpi:
                enabled: true
              pvspinlock:
                enabled: true
              hyperv:
                vpindex:
                  enabled: true
                ipi:
                  enabled: true
                reenlightenment:
                  enabled: true
                runtime:
                  enabled: true
                vendorid:
                  vendorid: "vendorid"
                  enabled: true
                evmcs:
                  enabled: true
                synictimer:
                  direct:
                    enabled: true
                  enabled: true
                spinlocks:
                  spinlocks: 1
                  enabled: true
                tlbflush:
                  enabled: true
                synic:
                  enabled: true
                relaxed:
                  enabled: true
                vapic:
                  enabled: true
                reset:
                  enabled: true
                frequencies:
                  enabled: true
            ioThreadsPolicy: "ioThreadsPolicy"
            memory:
              hugepages:
                pageSize: "pageSize"
              guest: {}
            devices:
              autoattachPodInterface: true
              interfaces:
              - dhcpOptions:
                  ntpServers:
                  - "ntpServers"
                  - "ntpServers"
                  tftpServerName: "tftpServerName"
                  bootFileName: "bootFileName"
                  privateOptions:
                  - value: "value"
                    option: 4
                  - value: "value"
                    option: 4
                slirp: {}
                macvtap: {}
                ports:
                - protocol: "protocol"
                  port: 7
                  name: "name"
                - protocol: "protocol"
                  port: 7
                  name: "name"
                macAddress: "macAddress"
                masquerade: {}
                bootOrder: 2
                name: "name"
                sriov: {}
                model: "model"
                pciAddress: "pciAddress"
                bridge: {}
                tag: "tag"
              - dhcpOptions:
                  ntpServers:
                  - "ntpServers"
                  - "ntpServers"
                  tftpServerName: "tftpServerName"
                  bootFileName: "bootFileName"
                  privateOptions:
                  - value: "value"
                    option: 4
                  - value: "value"
                    option: 4
                slirp: {}
                macvtap: {}
                ports:
                - protocol: "protocol"
                  port: 7
                  name: "name"
                - protocol: "protocol"
                  port: 7
                  name: "name"
                macAddress: "macAddress"
                masquerade: {}
                bootOrder: 2
                name: "name"
                sriov: {}
                model: "model"
                pciAddress: "pciAddress"
                bridge: {}
                tag: "tag"
              disks:
              - shareable: true
                cache: "cache"
                dedicatedIOThread: true
                disk:
                  bus: "bus"
                  readonly: true
                  pciAddress: "pciAddress"
                lun:
                  bus: "bus"
                  readonly: true
                bootOrder: 3
                serial: "serial"
                io: "io"
                name: "name"
                tag: "tag"
                cdrom:
                  tray: "tray"
                  bus: "bus"
                  readonly: true
                blockSize:
                  custom:
                    physical: 9
                    logical: 7
                  matchVolume:
                    enabled: true
              - shareable: true
                cache: "cache"
                dedicatedIOThread: true
                disk:
                  bus: "bus"
                  readonly: true
                  pciAddress: "pciAddress"
                lun:
                  bus: "bus"
                  readonly: true
                bootOrder: 3
                serial: "serial"
                io: "io"
                name: "name"
                tag: "tag"
                cdrom:
                  tray: "tray"
                  bus: "bus"
                  readonly: true
                blockSize:
                  custom:
                    physical: 9
                    logical: 7
                  matchVolume:
                    enabled: true
              inputs:
              - bus: "bus"
                name: "name"
                type: "type"
              - bus: "bus"
                name: "name"
                type: "type"
              sound:
                name: "name"
                model: "model"
              useVirtioTransitional: true
              rng: {}
              autoattachSerialConsole: true
              filesystems:
              - name: "name"
                virtiofs: {}
              - name: "name"
                virtiofs: {}
              hostDevices:
              - name: "name"
                tag: "tag"
                deviceName: "deviceName"
              - name: "name"
                tag: "tag"
                deviceName: "deviceName"
              networkInterfaceMultiqueue: true
              autoattachMemBalloon: true
              tpm: {}
              clientPassthrough: {}
              watchdog:
                i6300esb:
                  action: "action"
                name: "name"
              blockMultiQueue: true
              gpus:
              - name: "name"
                tag: "tag"
                virtualGPUOptions:
                  display:
                    enabled: true
                    ramFB:
                      enabled: true
                deviceName: "deviceName"
              - name: "name"
                tag: "tag"
                virtualGPUOptions:
                  display:
                    enabled: true
                    ramFB:
                      enabled: true
                deviceName: "deviceName"
              disableHotplug: true
              autoattachGraphicsDevice: true
            machine:
              type: "type"
            cpu:
              features:
              - name: "name"
                policy: "policy"
              - name: "name"
                policy: "policy"
              realtime:
                mask: "mask"
              cores: 5
              dedicatedCpuPlacement: true
              numa:
                guestMappingPassthrough: {}
              threads: 2
              model: "model"
              sockets: 5
              isolateEmulatorThread: true
            resources:
              overcommitGuestOverhead: true
              requests: {}
              limits: {}
            chassis:
              serial: "serial"
              asset: "asset"
              sku: "sku"
              version: "version"
              manufacturer: "manufacturer"
            clock:
              timer:
                rtc:
                  tickPolicy: "tickPolicy"
                  present: true
                  track: "track"
                kvm:
                  present: true
                hpet:
                  tickPolicy: "tickPolicy"
                  present: true
                pit:
                  tickPolicy: "tickPolicy"
                  present: true
                hyperv:
                  present: true
              utc:
                offsetSeconds: 1
              timezone: "timezone"
            firmware:
              serial: "serial"
              bootloader:
                bios:
                  useSerial: true
                efi:
                  secureBoot: true
              uuid: "uuid"
              kernelBoot:
                container:
                  image: "image"
                  imagePullPolicy: "Always"
                  imagePullSecret: "imagePullSecret"
                  initrdPath: "initrdPath"
                  kernelPath: "kernelPath"
                kernelArgs: "kernelArgs"
            launchSecurity:
              sev: {}
          readinessProbe:
            failureThreshold: 1
            periodSeconds: 6
            tcpSocket:
              host: "host"
            timeoutSeconds: 1
            guestAgentPing: {}
            successThreshold: 7
            initialDelaySeconds: 1
            exec:
              command:
              - "command"
              - "command"
            httpGet:
              path: "path"
              scheme: "HTTP"
              port: {}
              host: "host"
              httpHeaders:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
          subdomain: "subdomain"
          evictionStrategy: "evictionStrategy"
          schedulerName: "schedulerName"
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  matchFields:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                - matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  matchFields:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
              preferredDuringSchedulingIgnoredDuringExecution:
              - preference:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  matchFields:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                weight: 0
              - preference:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  matchFields:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                weight: 0
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              - labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                weight: 6
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                weight: 6
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              - labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                weight: 6
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                weight: 6
        status:
          nodeName: "nodeName"
          phase: "phase"
          reason: "reason"
          interfaces:
          - ipAddress: "ipAddress"
            name: "name"
            ipAddresses:
            - "ipAddresses"
            - "ipAddresses"
            interfaceName: "interfaceName"
            infoSource: "infoSource"
            mac: "mac"
          - ipAddress: "ipAddress"
            name: "name"
            ipAddresses:
            - "ipAddresses"
            - "ipAddresses"
            interfaceName: "interfaceName"
            infoSource: "infoSource"
            mac: "mac"
          fsFreezeStatus: "fsFreezeStatus"
          activePods:
            key: "activePods"
          topologyHints:
            tscFrequency: 9
          evacuationNodeName: "evacuationNodeName"
          virtualMachineRevisionName: "virtualMachineRevisionName"
          phaseTransitionTimestamps:
          - phase: "phase"
          - phase: "phase"
          migrationTransport: "migrationTransport"
          volumeStatus:
          - phase: "phase"
            reason: "reason"
            size: 3
            hotplugVolume:
              attachPodUID: "attachPodUID"
              attachPodName: "attachPodName"
            name: "name"
            message: "message"
            persistentVolumeClaimInfo:
              filesystemOverhead: "filesystemOverhead"
              preallocated: true
              accessModes:
              - "accessModes"
              - "accessModes"
              requests: {}
              capacity: {}
              volumeMode: "volumeMode"
            target: "target"
          - phase: "phase"
            reason: "reason"
            size: 3
            hotplugVolume:
              attachPodUID: "attachPodUID"
              attachPodName: "attachPodName"
            name: "name"
            message: "message"
            persistentVolumeClaimInfo:
              filesystemOverhead: "filesystemOverhead"
              preallocated: true
              accessModes:
              - "accessModes"
              - "accessModes"
              requests: {}
              capacity: {}
              volumeMode: "volumeMode"
            target: "target"
          guestOSInfo:
            kernelRelease: "kernelRelease"
            versionId: "versionId"
            prettyName: "prettyName"
            machine: "machine"
            kernelVersion: "kernelVersion"
            name: "name"
            id: "id"
            version: "version"
          launcherContainerImageVersion: "launcherContainerImageVersion"
          qosClass: "qosClass"
          conditions:
          - reason: "reason"
            message: "message"
            type: "type"
            lastProbeTime: {}
            status: "status"
          - reason: "reason"
            message: "message"
            type: "type"
            lastProbeTime: {}
            status: "status"
          migrationState:
            sourceNode: "sourceNode"
            targetDirectMigrationNodePorts:
              key: 2
            targetNodeAddress: "targetNodeAddress"
            completed: true
            failed: true
            targetNode: "targetNode"
            migrationPolicyName: "migrationPolicyName"
            targetAttachmentPodUID: "targetAttachmentPodUID"
            mode: "mode"
            targetNodeTopology: "targetNodeTopology"
            migrationUid: "migrationUid"
            targetNodeDomainDetected: true
            migrationConfiguration:
              completionTimeoutPerGiB: 0
              unsafeMigrationOverride: true
              allowPostCopy: true
              disableTLS: true
              parallelMigrationsPerCluster: 6
              allowAutoConverge: true
              bandwidthPerMigration: {}
              parallelOutboundMigrationsPerNode: 1
              nodeDrainTaintKey: "nodeDrainTaintKey"
              progressTimeout: 5
              network: "network"
            targetPod: "targetPod"
            abortRequested: true
            targetCPUSet:
            - 5
            - 5
            abortStatus: "abortStatus"
          migrationMethod: "migrationMethod"
          runtimeUser: 7
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          dnsPolicy: "ClusterFirst"
          livenessProbe:
            failureThreshold: 1
            periodSeconds: 6
            tcpSocket:
              host: "host"
            timeoutSeconds: 1
            guestAgentPing: {}
            successThreshold: 7
            initialDelaySeconds: 1
            exec:
              command:
              - "command"
              - "command"
            httpGet:
              path: "path"
              scheme: "HTTP"
              port: {}
              host: "host"
              httpHeaders:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
          terminationGracePeriodSeconds: 4
          dnsConfig:
            searches:
            - "searches"
            - "searches"
            nameservers:
            - "nameservers"
            - "nameservers"
            options:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          priorityClassName: "priorityClassName"
          volumes:
          - downwardAPI:
              volumeLabel: "volumeLabel"
              fields:
              - mode: 9
                path: "path"
                resourceFieldRef:
                  resource: "resource"
                  containerName: "containerName"
                fieldRef:
                  apiVersion: "apiVersion"
                  fieldPath: "fieldPath"
              - mode: 9
                path: "path"
                resourceFieldRef:
                  resource: "resource"
                  containerName: "containerName"
                fieldRef:
                  apiVersion: "apiVersion"
                  fieldPath: "fieldPath"
            cloudInitConfigDrive:
              networkDataSecretRef:
                name: "name"
              userData: "userData"
              networkData: "networkData"
              networkDataBase64: "networkDataBase64"
              secretRef:
                name: "name"
              userDataBase64: "userDataBase64"
            downwardMetrics: {}
            ephemeral:
              persistentVolumeClaim:
                claimName: "claimName"
                readOnly: true
            serviceAccount:
              serviceAccountName: "serviceAccountName"
            sysprep:
              configMap:
                name: "name"
              secret:
                name: "name"
            containerDisk:
              image: "image"
              imagePullPolicy: "Always"
              imagePullSecret: "imagePullSecret"
              path: "path"
            hostDisk:
              path: "path"
              shared: true
              type: "type"
            secret:
              secretName: "secretName"
              volumeLabel: "volumeLabel"
              optional: true
            cloudInitNoCloud:
              networkDataSecretRef:
                name: "name"
              userData: "userData"
              networkData: "networkData"
              networkDataBase64: "networkDataBase64"
              secretRef:
                name: "name"
              userDataBase64: "userDataBase64"
            configMap:
              volumeLabel: "volumeLabel"
              name: "name"
              optional: true
            dataVolume:
              hotpluggable: true
              name: "name"
            name: "name"
            persistentVolumeClaim:
              claimName: "claimName"
              hotpluggable: true
              readOnly: true
            emptyDisk: {}
          - downwardAPI:
              volumeLabel: "volumeLabel"
              fields:
              - mode: 9
                path: "path"
                resourceFieldRef:
                  resource: "resource"
                  containerName: "containerName"
                fieldRef:
                  apiVersion: "apiVersion"
                  fieldPath: "fieldPath"
              - mode: 9
                path: "path"
                resourceFieldRef:
                  resource: "resource"
                  containerName: "containerName"
                fieldRef:
                  apiVersion: "apiVersion"
                  fieldPath: "fieldPath"
            cloudInitConfigDrive:
              networkDataSecretRef:
                name: "name"
              userData: "userData"
              networkData: "networkData"
              networkDataBase64: "networkDataBase64"
              secretRef:
                name: "name"
              userDataBase64: "userDataBase64"
            downwardMetrics: {}
            ephemeral:
              persistentVolumeClaim:
                claimName: "claimName"
                readOnly: true
            serviceAccount:
              serviceAccountName: "serviceAccountName"
            sysprep:
              configMap:
                name: "name"
              secret:
                name: "name"
            containerDisk:
              image: "image"
              imagePullPolicy: "Always"
              imagePullSecret: "imagePullSecret"
              path: "path"
            hostDisk:
              path: "path"
              shared: true
              type: "type"
            secret:
              secretName: "secretName"
              volumeLabel: "volumeLabel"
              optional: true
            cloudInitNoCloud:
              networkDataSecretRef:
                name: "name"
              userData: "userData"
              networkData: "networkData"
              networkDataBase64: "networkDataBase64"
              secretRef:
                name: "name"
              userDataBase64: "userDataBase64"
            configMap:
              volumeLabel: "volumeLabel"
              name: "name"
              optional: true
            dataVolume:
              hotpluggable: true
              name: "name"
            name: "name"
            persistentVolumeClaim:
              claimName: "claimName"
              hotpluggable: true
              readOnly: true
            emptyDisk: {}
          networks:
          - pod:
              vmNetworkCIDR: "vmNetworkCIDR"
              vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
            name: "name"
            multus:
              default: true
              networkName: "networkName"
          - pod:
              vmNetworkCIDR: "vmNetworkCIDR"
              vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
            name: "name"
            multus:
              default: true
              networkName: "networkName"
          nodeSelector:
            key: "nodeSelector"
          hostname: "hostname"
          tolerations:
          - effect: "NoExecute"
            tolerationSeconds: 5
            value: "value"
            key: "key"
            operator: "Equal"
          - effect: "NoExecute"
            tolerationSeconds: 5
            value: "value"
            key: "key"
            operator: "Equal"
          accessCredentials:
          - sshPublicKey:
              propagationMethod:
                configDrive: {}
                qemuGuestAgent:
                  users:
                  - "users"
                  - "users"
              source:
                secret:
                  secretName: "secretName"
            userPassword:
              propagationMethod:
                qemuGuestAgent: {}
              source:
                secret:
                  secretName: "secretName"
          - sshPublicKey:
              propagationMethod:
                configDrive: {}
                qemuGuestAgent:
                  users:
                  - "users"
                  - "users"
              source:
                secret:
                  secretName: "secretName"
            userPassword:
              propagationMethod:
                qemuGuestAgent: {}
              source:
                secret:
                  secretName: "secretName"
          startStrategy: "startStrategy"
          domain:
            features:
              smm:
                enabled: true
              kvm:
                hidden: true
              apic:
                endOfInterrupt: true
                enabled: true
              acpi:
                enabled: true
              pvspinlock:
                enabled: true
              hyperv:
                vpindex:
                  enabled: true
                ipi:
                  enabled: true
                reenlightenment:
                  enabled: true
                runtime:
                  enabled: true
                vendorid:
                  vendorid: "vendorid"
                  enabled: true
                evmcs:
                  enabled: true
                synictimer:
                  direct:
                    enabled: true
                  enabled: true
                spinlocks:
                  spinlocks: 1
                  enabled: true
                tlbflush:
                  enabled: true
                synic:
                  enabled: true
                relaxed:
                  enabled: true
                vapic:
                  enabled: true
                reset:
                  enabled: true
                frequencies:
                  enabled: true
            ioThreadsPolicy: "ioThreadsPolicy"
            memory:
              hugepages:
                pageSize: "pageSize"
              guest: {}
            devices:
              autoattachPodInterface: true
              interfaces:
              - dhcpOptions:
                  ntpServers:
                  - "ntpServers"
                  - "ntpServers"
                  tftpServerName: "tftpServerName"
                  bootFileName: "bootFileName"
                  privateOptions:
                  - value: "value"
                    option: 4
                  - value: "value"
                    option: 4
                slirp: {}
                macvtap: {}
                ports:
                - protocol: "protocol"
                  port: 7
                  name: "name"
                - protocol: "protocol"
                  port: 7
                  name: "name"
                macAddress: "macAddress"
                masquerade: {}
                bootOrder: 2
                name: "name"
                sriov: {}
                model: "model"
                pciAddress: "pciAddress"
                bridge: {}
                tag: "tag"
              - dhcpOptions:
                  ntpServers:
                  - "ntpServers"
                  - "ntpServers"
                  tftpServerName: "tftpServerName"
                  bootFileName: "bootFileName"
                  privateOptions:
                  - value: "value"
                    option: 4
                  - value: "value"
                    option: 4
                slirp: {}
                macvtap: {}
                ports:
                - protocol: "protocol"
                  port: 7
                  name: "name"
                - protocol: "protocol"
                  port: 7
                  name: "name"
                macAddress: "macAddress"
                masquerade: {}
                bootOrder: 2
                name: "name"
                sriov: {}
                model: "model"
                pciAddress: "pciAddress"
                bridge: {}
                tag: "tag"
              disks:
              - shareable: true
                cache: "cache"
                dedicatedIOThread: true
                disk:
                  bus: "bus"
                  readonly: true
                  pciAddress: "pciAddress"
                lun:
                  bus: "bus"
                  readonly: true
                bootOrder: 3
                serial: "serial"
                io: "io"
                name: "name"
                tag: "tag"
                cdrom:
                  tray: "tray"
                  bus: "bus"
                  readonly: true
                blockSize:
                  custom:
                    physical: 9
                    logical: 7
                  matchVolume:
                    enabled: true
              - shareable: true
                cache: "cache"
                dedicatedIOThread: true
                disk:
                  bus: "bus"
                  readonly: true
                  pciAddress: "pciAddress"
                lun:
                  bus: "bus"
                  readonly: true
                bootOrder: 3
                serial: "serial"
                io: "io"
                name: "name"
                tag: "tag"
                cdrom:
                  tray: "tray"
                  bus: "bus"
                  readonly: true
                blockSize:
                  custom:
                    physical: 9
                    logical: 7
                  matchVolume:
                    enabled: true
              inputs:
              - bus: "bus"
                name: "name"
                type: "type"
              - bus: "bus"
                name: "name"
                type: "type"
              sound:
                name: "name"
                model: "model"
              useVirtioTransitional: true
              rng: {}
              autoattachSerialConsole: true
              filesystems:
              - name: "name"
                virtiofs: {}
              - name: "name"
                virtiofs: {}
              hostDevices:
              - name: "name"
                tag: "tag"
                deviceName: "deviceName"
              - name: "name"
                tag: "tag"
                deviceName: "deviceName"
              networkInterfaceMultiqueue: true
              autoattachMemBalloon: true
              tpm: {}
              clientPassthrough: {}
              watchdog:
                i6300esb:
                  action: "action"
                name: "name"
              blockMultiQueue: true
              gpus:
              - name: "name"
                tag: "tag"
                virtualGPUOptions:
                  display:
                    enabled: true
                    ramFB:
                      enabled: true
                deviceName: "deviceName"
              - name: "name"
                tag: "tag"
                virtualGPUOptions:
                  display:
                    enabled: true
                    ramFB:
                      enabled: true
                deviceName: "deviceName"
              disableHotplug: true
              autoattachGraphicsDevice: true
            machine:
              type: "type"
            cpu:
              features:
              - name: "name"
                policy: "policy"
              - name: "name"
                policy: "policy"
              realtime:
                mask: "mask"
              cores: 5
              dedicatedCpuPlacement: true
              numa:
                guestMappingPassthrough: {}
              threads: 2
              model: "model"
              sockets: 5
              isolateEmulatorThread: true
            resources:
              overcommitGuestOverhead: true
              requests: {}
              limits: {}
            chassis:
              serial: "serial"
              asset: "asset"
              sku: "sku"
              version: "version"
              manufacturer: "manufacturer"
            clock:
              timer:
                rtc:
                  tickPolicy: "tickPolicy"
                  present: true
                  track: "track"
                kvm:
                  present: true
                hpet:
                  tickPolicy: "tickPolicy"
                  present: true
                pit:
                  tickPolicy: "tickPolicy"
                  present: true
                hyperv:
                  present: true
              utc:
                offsetSeconds: 1
              timezone: "timezone"
            firmware:
              serial: "serial"
              bootloader:
                bios:
                  useSerial: true
                efi:
                  secureBoot: true
              uuid: "uuid"
              kernelBoot:
                container:
                  image: "image"
                  imagePullPolicy: "Always"
                  imagePullSecret: "imagePullSecret"
                  initrdPath: "initrdPath"
                  kernelPath: "kernelPath"
                kernelArgs: "kernelArgs"
            launchSecurity:
              sev: {}
          readinessProbe:
            failureThreshold: 1
            periodSeconds: 6
            tcpSocket:
              host: "host"
            timeoutSeconds: 1
            guestAgentPing: {}
            successThreshold: 7
            initialDelaySeconds: 1
            exec:
              command:
              - "command"
              - "command"
            httpGet:
              path: "path"
              scheme: "HTTP"
              port: {}
              host: "host"
              httpHeaders:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
          subdomain: "subdomain"
          evictionStrategy: "evictionStrategy"
          schedulerName: "schedulerName"
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  matchFields:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                - matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  matchFields:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
              preferredDuringSchedulingIgnoredDuringExecution:
              - preference:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  matchFields:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                weight: 0
              - preference:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  matchFields:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                weight: 0
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              - labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                weight: 6
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                weight: 6
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              - labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                weight: 6
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                weight: 6
        status:
          nodeName: "nodeName"
          phase: "phase"
          reason: "reason"
          interfaces:
          - ipAddress: "ipAddress"
            name: "name"
            ipAddresses:
            - "ipAddresses"
            - "ipAddresses"
            interfaceName: "interfaceName"
            infoSource: "infoSource"
            mac: "mac"
          - ipAddress: "ipAddress"
            name: "name"
            ipAddresses:
            - "ipAddresses"
            - "ipAddresses"
            interfaceName: "interfaceName"
            infoSource: "infoSource"
            mac: "mac"
          fsFreezeStatus: "fsFreezeStatus"
          activePods:
            key: "activePods"
          topologyHints:
            tscFrequency: 9
          evacuationNodeName: "evacuationNodeName"
          virtualMachineRevisionName: "virtualMachineRevisionName"
          phaseTransitionTimestamps:
          - phase: "phase"
          - phase: "phase"
          migrationTransport: "migrationTransport"
          volumeStatus:
          - phase: "phase"
            reason: "reason"
            size: 3
            hotplugVolume:
              attachPodUID: "attachPodUID"
              attachPodName: "attachPodName"
            name: "name"
            message: "message"
            persistentVolumeClaimInfo:
              filesystemOverhead: "filesystemOverhead"
              preallocated: true
              accessModes:
              - "accessModes"
              - "accessModes"
              requests: {}
              capacity: {}
              volumeMode: "volumeMode"
            target: "target"
          - phase: "phase"
            reason: "reason"
            size: 3
            hotplugVolume:
              attachPodUID: "attachPodUID"
              attachPodName: "attachPodName"
            name: "name"
            message: "message"
            persistentVolumeClaimInfo:
              filesystemOverhead: "filesystemOverhead"
              preallocated: true
              accessModes:
              - "accessModes"
              - "accessModes"
              requests: {}
              capacity: {}
              volumeMode: "volumeMode"
            target: "target"
          guestOSInfo:
            kernelRelease: "kernelRelease"
            versionId: "versionId"
            prettyName: "prettyName"
            machine: "machine"
            kernelVersion: "kernelVersion"
            name: "name"
            id: "id"
            version: "version"
          launcherContainerImageVersion: "launcherContainerImageVersion"
          qosClass: "qosClass"
          conditions:
          - reason: "reason"
            message: "message"
            type: "type"
            lastProbeTime: {}
            status: "status"
          - reason: "reason"
            message: "message"
            type: "type"
            lastProbeTime: {}
            status: "status"
          migrationState:
            sourceNode: "sourceNode"
            targetDirectMigrationNodePorts:
              key: 2
            targetNodeAddress: "targetNodeAddress"
            completed: true
            failed: true
            targetNode: "targetNode"
            migrationPolicyName: "migrationPolicyName"
            targetAttachmentPodUID: "targetAttachmentPodUID"
            mode: "mode"
            targetNodeTopology: "targetNodeTopology"
            migrationUid: "migrationUid"
            targetNodeDomainDetected: true
            migrationConfiguration:
              completionTimeoutPerGiB: 0
              unsafeMigrationOverride: true
              allowPostCopy: true
              disableTLS: true
              parallelMigrationsPerCluster: 6
              allowAutoConverge: true
              bandwidthPerMigration: {}
              parallelOutboundMigrationsPerNode: 1
              nodeDrainTaintKey: "nodeDrainTaintKey"
              progressTimeout: 5
              network: "network"
            targetPod: "targetPod"
            abortRequested: true
            targetCPUSet:
            - 5
            - 5
            abortStatus: "abortStatus"
          migrationMethod: "migrationMethod"
          runtimeUser: 7
  kubevirt.io.api.core.v1.VirtualMachineInstanceMigration:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    - "spec"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigrationSpec"
      status:
        $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigrationStatus"
    description: "VirtualMachineInstanceMigration represents the object tracking a\
      \ VMI's migration to another host in the cluster"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        vmiName: "vmiName"
      status:
        phase: "phase"
        conditions:
        - reason: "reason"
          message: "message"
          type: "type"
          lastProbeTime: {}
          status: "status"
        - reason: "reason"
          message: "message"
          type: "type"
          lastProbeTime: {}
          status: "status"
  kubevirt.io.api.core.v1.VirtualMachineInstanceMigrationCondition:
    type: "object"
    required:
    - "status"
    - "type"
    properties:
      lastProbeTime:
        $ref: "#/definitions/k8s.io.v1.Time"
      lastTransitionTime:
        $ref: "#/definitions/k8s.io.v1.Time"
      message:
        type: "string"
      reason:
        type: "string"
      status:
        type: "string"
        default: ""
      type:
        type: "string"
        default: ""
    example:
      reason: "reason"
      message: "message"
      type: "type"
      lastProbeTime: {}
      status: "status"
  kubevirt.io.api.core.v1.VirtualMachineInstanceMigrationList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigration"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "VirtualMachineInstanceMigrationList is a list of VirtualMachineMigrations"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          vmiName: "vmiName"
        status:
          phase: "phase"
          conditions:
          - reason: "reason"
            message: "message"
            type: "type"
            lastProbeTime: {}
            status: "status"
          - reason: "reason"
            message: "message"
            type: "type"
            lastProbeTime: {}
            status: "status"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          vmiName: "vmiName"
        status:
          phase: "phase"
          conditions:
          - reason: "reason"
            message: "message"
            type: "type"
            lastProbeTime: {}
            status: "status"
          - reason: "reason"
            message: "message"
            type: "type"
            lastProbeTime: {}
            status: "status"
  kubevirt.io.api.core.v1.VirtualMachineInstanceMigrationSpec:
    type: "object"
    properties:
      vmiName:
        type: "string"
        description: "The name of the VMI to perform the migration on. VMI must exist\
          \ in the migration objects namespace"
    example:
      vmiName: "vmiName"
  kubevirt.io.api.core.v1.VirtualMachineInstanceMigrationState:
    type: "object"
    properties:
      abortRequested:
        type: "boolean"
        description: "Indicates that the migration has been requested to abort"
      abortStatus:
        type: "string"
        description: "Indicates the final status of the live migration abortion"
      completed:
        type: "boolean"
        description: "Indicates the migration completed"
      endTimestamp:
        description: "The time the migration action ended"
        $ref: "#/definitions/k8s.io.v1.Time"
      failed:
        type: "boolean"
        description: "Indicates that the migration failed"
      migrationConfiguration:
        description: "Migration configurations to apply"
        $ref: "#/definitions/kubevirt.io.api.core.v1.MigrationConfiguration"
      migrationPolicyName:
        type: "string"
        description: "Name of the migration policy. If string is empty, no policy\
          \ is matched"
      migrationUid:
        type: "string"
        description: "The VirtualMachineInstanceMigration object associated with this\
          \ migration"
      mode:
        type: "string"
        description: "Lets us know if the vmi is currently running pre or post copy\
          \ migration"
      sourceNode:
        type: "string"
        description: "The source node that the VMI originated on"
      startTimestamp:
        description: "The time the migration action began"
        $ref: "#/definitions/k8s.io.v1.Time"
      targetAttachmentPodUID:
        type: "string"
        description: "The UID of the target attachment pod for hotplug volumes"
      targetCPUSet:
        type: "array"
        description: "If the VMI requires dedicated CPUs, this field will hold the\
          \ dedicated CPU set on the target node"
        items:
          type: "integer"
          format: "int32"
          default: 0
        x-kubernetes-list-type: "atomic"
      targetDirectMigrationNodePorts:
        type: "object"
        description: "The list of ports opened for live migration on the destination\
          \ node"
        additionalProperties:
          type: "integer"
          format: "int32"
          default: 0
      targetNode:
        type: "string"
        description: "The target node that the VMI is moving to"
      targetNodeAddress:
        type: "string"
        description: "The address of the target node to use for the migration"
      targetNodeDomainDetected:
        type: "boolean"
        description: "The Target Node has seen the Domain Start Event"
      targetNodeTopology:
        type: "string"
        description: "If the VMI requires dedicated CPUs, this field will hold the\
          \ numa topology on the target node"
      targetPod:
        type: "string"
        description: "The target pod that the VMI is moving to"
    example:
      sourceNode: "sourceNode"
      targetDirectMigrationNodePorts:
        key: 2
      targetNodeAddress: "targetNodeAddress"
      completed: true
      failed: true
      targetNode: "targetNode"
      migrationPolicyName: "migrationPolicyName"
      targetAttachmentPodUID: "targetAttachmentPodUID"
      mode: "mode"
      targetNodeTopology: "targetNodeTopology"
      migrationUid: "migrationUid"
      targetNodeDomainDetected: true
      migrationConfiguration:
        completionTimeoutPerGiB: 0
        unsafeMigrationOverride: true
        allowPostCopy: true
        disableTLS: true
        parallelMigrationsPerCluster: 6
        allowAutoConverge: true
        bandwidthPerMigration: {}
        parallelOutboundMigrationsPerNode: 1
        nodeDrainTaintKey: "nodeDrainTaintKey"
        progressTimeout: 5
        network: "network"
      targetPod: "targetPod"
      abortRequested: true
      targetCPUSet:
      - 5
      - 5
      abortStatus: "abortStatus"
  kubevirt.io.api.core.v1.VirtualMachineInstanceMigrationStatus:
    type: "object"
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigrationCondition"
      phase:
        type: "string"
    description: "VirtualMachineInstanceMigration reprents information pertaining\
      \ to a VMI's migration."
    example:
      phase: "phase"
      conditions:
      - reason: "reason"
        message: "message"
        type: "type"
        lastProbeTime: {}
        status: "status"
      - reason: "reason"
        message: "message"
        type: "type"
        lastProbeTime: {}
        status: "status"
  kubevirt.io.api.core.v1.VirtualMachineInstanceNetworkInterface:
    type: "object"
    properties:
      infoSource:
        type: "string"
        description: "Specifies the origin of the interface data collected. values:\
          \ domain, guest-agent, or both"
      interfaceName:
        type: "string"
        description: "The interface name inside the Virtual Machine"
      ipAddress:
        type: "string"
        description: "IP address of a Virtual Machine interface. It is always the\
          \ first item of IPs"
      ipAddresses:
        type: "array"
        description: "List of all IP addresses of a Virtual Machine interface"
        items:
          type: "string"
          default: ""
      mac:
        type: "string"
        description: "Hardware address of a Virtual Machine interface"
      name:
        type: "string"
        description: "Name of the interface, corresponds to name of the network assigned\
          \ to the interface"
    example:
      ipAddress: "ipAddress"
      name: "name"
      ipAddresses:
      - "ipAddresses"
      - "ipAddresses"
      interfaceName: "interfaceName"
      infoSource: "infoSource"
      mac: "mac"
  kubevirt.io.api.core.v1.VirtualMachineInstancePhaseTransitionTimestamp:
    type: "object"
    properties:
      phase:
        type: "string"
        description: "Phase is the status of the VirtualMachineInstance in kubernetes\
          \ world. It is not the VirtualMachineInstance status, but partially correlates\
          \ to it."
      phaseTransitionTimestamp:
        description: "PhaseTransitionTimestamp is the timestamp of when the phase\
          \ change occurred"
        $ref: "#/definitions/k8s.io.v1.Time"
    description: "VirtualMachineInstancePhaseTransitionTimestamp gives a timestamp\
      \ in relation to when a phase is set on a vmi"
    example:
      phase: "phase"
  kubevirt.io.api.core.v1.VirtualMachineInstanceSpec:
    type: "object"
    required:
    - "domain"
    properties:
      accessCredentials:
        type: "array"
        description: "Specifies a set of public keys to inject into the vm guest"
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.AccessCredential"
        x-kubernetes-list-type: "atomic"
      affinity:
        description: "If affinity is specifies, obey all the affinity rules"
        $ref: "#/definitions/k8s.io.v1.Affinity"
      dnsConfig:
        description: "Specifies the DNS parameters of a pod. Parameters specified\
          \ here will be merged to the generated DNS configuration based on DNSPolicy."
        $ref: "#/definitions/k8s.io.v1.PodDNSConfig"
      dnsPolicy:
        type: "string"
        description: "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid\
          \ values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.\
          \ DNS parameters given in DNSConfig will be merged with the policy selected\
          \ with DNSPolicy. To have DNS options set along with hostNetwork, you have\
          \ to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n\nPossible\
          \ enum values:\n - `\"ClusterFirst\"` indicates that the pod should use\
          \ cluster DNS first unless hostNetwork is true, if it is available, then\
          \ fall back on the default (as determined by kubelet) DNS settings.\n -\
          \ `\"ClusterFirstWithHostNet\"` indicates that the pod should use cluster\
          \ DNS first, if it is available, then fall back on the default (as determined\
          \ by kubelet) DNS settings.\n - `\"Default\"` indicates that the pod should\
          \ use the default (as determined by kubelet) DNS settings.\n - `\"None\"\
          ` indicates that the pod should use empty DNS settings. DNS parameters such\
          \ as nameservers and search paths should be defined via DNSConfig."
        enum:
        - "ClusterFirst"
        - "ClusterFirstWithHostNet"
        - "Default"
        - "None"
      domain:
        description: "Specification of the desired behavior of the VirtualMachineInstance\
          \ on the host."
        $ref: "#/definitions/kubevirt.io.api.core.v1.DomainSpec"
      evictionStrategy:
        type: "string"
        description: "EvictionStrategy can be set to \"LiveMigrate\" if the VirtualMachineInstance\
          \ should be migrated instead of shut-off in case of a node drain."
      hostname:
        type: "string"
        description: "Specifies the hostname of the vmi If not specified, the hostname\
          \ will be set to the name of the vmi, if dhcp or cloud-init is configured\
          \ properly."
      livenessProbe:
        description: "Periodic probe of VirtualMachineInstance liveness. VirtualmachineInstances\
          \ will be stopped if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        $ref: "#/definitions/kubevirt.io.api.core.v1.Probe"
      networks:
        type: "array"
        description: "List of networks that can be attached to a vm's virtual interface."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.Network"
      nodeSelector:
        type: "object"
        description: "NodeSelector is a selector which must be true for the vmi to\
          \ fit on a node. Selector which must match a node's labels for the vmi to\
          \ be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/"
        additionalProperties:
          type: "string"
          default: ""
      priorityClassName:
        type: "string"
        description: "If specified, indicates the pod's priority. If not specified,\
          \ the pod priority will be default or zero if there is no default."
      readinessProbe:
        description: "Periodic probe of VirtualMachineInstance service readiness.\
          \ VirtualmachineInstances will be removed from service endpoints if the\
          \ probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        $ref: "#/definitions/kubevirt.io.api.core.v1.Probe"
      schedulerName:
        type: "string"
        description: "If specified, the VMI will be dispatched by specified scheduler.\
          \ If not specified, the VMI will be dispatched by default scheduler."
      startStrategy:
        type: "string"
        description: "StartStrategy can be set to \"Paused\" if Virtual Machine should\
          \ be started in paused state."
      subdomain:
        type: "string"
        description: "If specified, the fully qualified vmi hostname will be \"<hostname>.<subdomain>.<pod\
          \ namespace>.svc.<cluster domain>\". If not specified, the vmi will not\
          \ have a domainname at all. The DNS entry will resolve to the vmi, no matter\
          \ if the vmi itself can pick up a hostname."
      terminationGracePeriodSeconds:
        type: "integer"
        format: "int64"
        description: "Grace period observed after signalling a VirtualMachineInstance\
          \ to stop after which the VirtualMachineInstance is force terminated."
      tolerations:
        type: "array"
        description: "If toleration is specified, obey all the toleration rules."
        items:
          $ref: "#/definitions/k8s.io.v1.Toleration"
      volumes:
        type: "array"
        description: "List of volumes that can be mounted by disks belonging to the\
          \ vmi."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.Volume"
    description: "VirtualMachineInstanceSpec is a description of a VirtualMachineInstance."
    example:
      dnsPolicy: "ClusterFirst"
      livenessProbe:
        failureThreshold: 1
        periodSeconds: 6
        tcpSocket:
          host: "host"
        timeoutSeconds: 1
        guestAgentPing: {}
        successThreshold: 7
        initialDelaySeconds: 1
        exec:
          command:
          - "command"
          - "command"
        httpGet:
          path: "path"
          scheme: "HTTP"
          port: {}
          host: "host"
          httpHeaders:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
      terminationGracePeriodSeconds: 4
      dnsConfig:
        searches:
        - "searches"
        - "searches"
        nameservers:
        - "nameservers"
        - "nameservers"
        options:
        - name: "name"
          value: "value"
        - name: "name"
          value: "value"
      priorityClassName: "priorityClassName"
      volumes:
      - downwardAPI:
          volumeLabel: "volumeLabel"
          fields:
          - mode: 9
            path: "path"
            resourceFieldRef:
              resource: "resource"
              containerName: "containerName"
            fieldRef:
              apiVersion: "apiVersion"
              fieldPath: "fieldPath"
          - mode: 9
            path: "path"
            resourceFieldRef:
              resource: "resource"
              containerName: "containerName"
            fieldRef:
              apiVersion: "apiVersion"
              fieldPath: "fieldPath"
        cloudInitConfigDrive:
          networkDataSecretRef:
            name: "name"
          userData: "userData"
          networkData: "networkData"
          networkDataBase64: "networkDataBase64"
          secretRef:
            name: "name"
          userDataBase64: "userDataBase64"
        downwardMetrics: {}
        ephemeral:
          persistentVolumeClaim:
            claimName: "claimName"
            readOnly: true
        serviceAccount:
          serviceAccountName: "serviceAccountName"
        sysprep:
          configMap:
            name: "name"
          secret:
            name: "name"
        containerDisk:
          image: "image"
          imagePullPolicy: "Always"
          imagePullSecret: "imagePullSecret"
          path: "path"
        hostDisk:
          path: "path"
          shared: true
          type: "type"
        secret:
          secretName: "secretName"
          volumeLabel: "volumeLabel"
          optional: true
        cloudInitNoCloud:
          networkDataSecretRef:
            name: "name"
          userData: "userData"
          networkData: "networkData"
          networkDataBase64: "networkDataBase64"
          secretRef:
            name: "name"
          userDataBase64: "userDataBase64"
        configMap:
          volumeLabel: "volumeLabel"
          name: "name"
          optional: true
        dataVolume:
          hotpluggable: true
          name: "name"
        name: "name"
        persistentVolumeClaim:
          claimName: "claimName"
          hotpluggable: true
          readOnly: true
        emptyDisk: {}
      - downwardAPI:
          volumeLabel: "volumeLabel"
          fields:
          - mode: 9
            path: "path"
            resourceFieldRef:
              resource: "resource"
              containerName: "containerName"
            fieldRef:
              apiVersion: "apiVersion"
              fieldPath: "fieldPath"
          - mode: 9
            path: "path"
            resourceFieldRef:
              resource: "resource"
              containerName: "containerName"
            fieldRef:
              apiVersion: "apiVersion"
              fieldPath: "fieldPath"
        cloudInitConfigDrive:
          networkDataSecretRef:
            name: "name"
          userData: "userData"
          networkData: "networkData"
          networkDataBase64: "networkDataBase64"
          secretRef:
            name: "name"
          userDataBase64: "userDataBase64"
        downwardMetrics: {}
        ephemeral:
          persistentVolumeClaim:
            claimName: "claimName"
            readOnly: true
        serviceAccount:
          serviceAccountName: "serviceAccountName"
        sysprep:
          configMap:
            name: "name"
          secret:
            name: "name"
        containerDisk:
          image: "image"
          imagePullPolicy: "Always"
          imagePullSecret: "imagePullSecret"
          path: "path"
        hostDisk:
          path: "path"
          shared: true
          type: "type"
        secret:
          secretName: "secretName"
          volumeLabel: "volumeLabel"
          optional: true
        cloudInitNoCloud:
          networkDataSecretRef:
            name: "name"
          userData: "userData"
          networkData: "networkData"
          networkDataBase64: "networkDataBase64"
          secretRef:
            name: "name"
          userDataBase64: "userDataBase64"
        configMap:
          volumeLabel: "volumeLabel"
          name: "name"
          optional: true
        dataVolume:
          hotpluggable: true
          name: "name"
        name: "name"
        persistentVolumeClaim:
          claimName: "claimName"
          hotpluggable: true
          readOnly: true
        emptyDisk: {}
      networks:
      - pod:
          vmNetworkCIDR: "vmNetworkCIDR"
          vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
        name: "name"
        multus:
          default: true
          networkName: "networkName"
      - pod:
          vmNetworkCIDR: "vmNetworkCIDR"
          vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
        name: "name"
        multus:
          default: true
          networkName: "networkName"
      nodeSelector:
        key: "nodeSelector"
      hostname: "hostname"
      tolerations:
      - effect: "NoExecute"
        tolerationSeconds: 5
        value: "value"
        key: "key"
        operator: "Equal"
      - effect: "NoExecute"
        tolerationSeconds: 5
        value: "value"
        key: "key"
        operator: "Equal"
      accessCredentials:
      - sshPublicKey:
          propagationMethod:
            configDrive: {}
            qemuGuestAgent:
              users:
              - "users"
              - "users"
          source:
            secret:
              secretName: "secretName"
        userPassword:
          propagationMethod:
            qemuGuestAgent: {}
          source:
            secret:
              secretName: "secretName"
      - sshPublicKey:
          propagationMethod:
            configDrive: {}
            qemuGuestAgent:
              users:
              - "users"
              - "users"
          source:
            secret:
              secretName: "secretName"
        userPassword:
          propagationMethod:
            qemuGuestAgent: {}
          source:
            secret:
              secretName: "secretName"
      startStrategy: "startStrategy"
      domain:
        features:
          smm:
            enabled: true
          kvm:
            hidden: true
          apic:
            endOfInterrupt: true
            enabled: true
          acpi:
            enabled: true
          pvspinlock:
            enabled: true
          hyperv:
            vpindex:
              enabled: true
            ipi:
              enabled: true
            reenlightenment:
              enabled: true
            runtime:
              enabled: true
            vendorid:
              vendorid: "vendorid"
              enabled: true
            evmcs:
              enabled: true
            synictimer:
              direct:
                enabled: true
              enabled: true
            spinlocks:
              spinlocks: 1
              enabled: true
            tlbflush:
              enabled: true
            synic:
              enabled: true
            relaxed:
              enabled: true
            vapic:
              enabled: true
            reset:
              enabled: true
            frequencies:
              enabled: true
        ioThreadsPolicy: "ioThreadsPolicy"
        memory:
          hugepages:
            pageSize: "pageSize"
          guest: {}
        devices:
          autoattachPodInterface: true
          interfaces:
          - dhcpOptions:
              ntpServers:
              - "ntpServers"
              - "ntpServers"
              tftpServerName: "tftpServerName"
              bootFileName: "bootFileName"
              privateOptions:
              - value: "value"
                option: 4
              - value: "value"
                option: 4
            slirp: {}
            macvtap: {}
            ports:
            - protocol: "protocol"
              port: 7
              name: "name"
            - protocol: "protocol"
              port: 7
              name: "name"
            macAddress: "macAddress"
            masquerade: {}
            bootOrder: 2
            name: "name"
            sriov: {}
            model: "model"
            pciAddress: "pciAddress"
            bridge: {}
            tag: "tag"
          - dhcpOptions:
              ntpServers:
              - "ntpServers"
              - "ntpServers"
              tftpServerName: "tftpServerName"
              bootFileName: "bootFileName"
              privateOptions:
              - value: "value"
                option: 4
              - value: "value"
                option: 4
            slirp: {}
            macvtap: {}
            ports:
            - protocol: "protocol"
              port: 7
              name: "name"
            - protocol: "protocol"
              port: 7
              name: "name"
            macAddress: "macAddress"
            masquerade: {}
            bootOrder: 2
            name: "name"
            sriov: {}
            model: "model"
            pciAddress: "pciAddress"
            bridge: {}
            tag: "tag"
          disks:
          - shareable: true
            cache: "cache"
            dedicatedIOThread: true
            disk:
              bus: "bus"
              readonly: true
              pciAddress: "pciAddress"
            lun:
              bus: "bus"
              readonly: true
            bootOrder: 3
            serial: "serial"
            io: "io"
            name: "name"
            tag: "tag"
            cdrom:
              tray: "tray"
              bus: "bus"
              readonly: true
            blockSize:
              custom:
                physical: 9
                logical: 7
              matchVolume:
                enabled: true
          - shareable: true
            cache: "cache"
            dedicatedIOThread: true
            disk:
              bus: "bus"
              readonly: true
              pciAddress: "pciAddress"
            lun:
              bus: "bus"
              readonly: true
            bootOrder: 3
            serial: "serial"
            io: "io"
            name: "name"
            tag: "tag"
            cdrom:
              tray: "tray"
              bus: "bus"
              readonly: true
            blockSize:
              custom:
                physical: 9
                logical: 7
              matchVolume:
                enabled: true
          inputs:
          - bus: "bus"
            name: "name"
            type: "type"
          - bus: "bus"
            name: "name"
            type: "type"
          sound:
            name: "name"
            model: "model"
          useVirtioTransitional: true
          rng: {}
          autoattachSerialConsole: true
          filesystems:
          - name: "name"
            virtiofs: {}
          - name: "name"
            virtiofs: {}
          hostDevices:
          - name: "name"
            tag: "tag"
            deviceName: "deviceName"
          - name: "name"
            tag: "tag"
            deviceName: "deviceName"
          networkInterfaceMultiqueue: true
          autoattachMemBalloon: true
          tpm: {}
          clientPassthrough: {}
          watchdog:
            i6300esb:
              action: "action"
            name: "name"
          blockMultiQueue: true
          gpus:
          - name: "name"
            tag: "tag"
            virtualGPUOptions:
              display:
                enabled: true
                ramFB:
                  enabled: true
            deviceName: "deviceName"
          - name: "name"
            tag: "tag"
            virtualGPUOptions:
              display:
                enabled: true
                ramFB:
                  enabled: true
            deviceName: "deviceName"
          disableHotplug: true
          autoattachGraphicsDevice: true
        machine:
          type: "type"
        cpu:
          features:
          - name: "name"
            policy: "policy"
          - name: "name"
            policy: "policy"
          realtime:
            mask: "mask"
          cores: 5
          dedicatedCpuPlacement: true
          numa:
            guestMappingPassthrough: {}
          threads: 2
          model: "model"
          sockets: 5
          isolateEmulatorThread: true
        resources:
          overcommitGuestOverhead: true
          requests: {}
          limits: {}
        chassis:
          serial: "serial"
          asset: "asset"
          sku: "sku"
          version: "version"
          manufacturer: "manufacturer"
        clock:
          timer:
            rtc:
              tickPolicy: "tickPolicy"
              present: true
              track: "track"
            kvm:
              present: true
            hpet:
              tickPolicy: "tickPolicy"
              present: true
            pit:
              tickPolicy: "tickPolicy"
              present: true
            hyperv:
              present: true
          utc:
            offsetSeconds: 1
          timezone: "timezone"
        firmware:
          serial: "serial"
          bootloader:
            bios:
              useSerial: true
            efi:
              secureBoot: true
          uuid: "uuid"
          kernelBoot:
            container:
              image: "image"
              imagePullPolicy: "Always"
              imagePullSecret: "imagePullSecret"
              initrdPath: "initrdPath"
              kernelPath: "kernelPath"
            kernelArgs: "kernelArgs"
        launchSecurity:
          sev: {}
      readinessProbe:
        failureThreshold: 1
        periodSeconds: 6
        tcpSocket:
          host: "host"
        timeoutSeconds: 1
        guestAgentPing: {}
        successThreshold: 7
        initialDelaySeconds: 1
        exec:
          command:
          - "command"
          - "command"
        httpGet:
          path: "path"
          scheme: "HTTP"
          port: {}
          host: "host"
          httpHeaders:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
      subdomain: "subdomain"
      evictionStrategy: "evictionStrategy"
      schedulerName: "schedulerName"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
              matchFields:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
            - matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
              matchFields:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
              matchFields:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
            weight: 0
          - preference:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
              matchFields:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "DoesNotExist"
            weight: 0
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            namespaceSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            topologyKey: "topologyKey"
            namespaces:
            - "namespaces"
            - "namespaces"
          - labelSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            namespaceSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            topologyKey: "topologyKey"
            namespaces:
            - "namespaces"
            - "namespaces"
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              namespaceSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              topologyKey: "topologyKey"
              namespaces:
              - "namespaces"
              - "namespaces"
            weight: 6
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              namespaceSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              topologyKey: "topologyKey"
              namespaces:
              - "namespaces"
              - "namespaces"
            weight: 6
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            namespaceSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            topologyKey: "topologyKey"
            namespaces:
            - "namespaces"
            - "namespaces"
          - labelSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            namespaceSelector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            topologyKey: "topologyKey"
            namespaces:
            - "namespaces"
            - "namespaces"
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              namespaceSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              topologyKey: "topologyKey"
              namespaces:
              - "namespaces"
              - "namespaces"
            weight: 6
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              namespaceSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              topologyKey: "topologyKey"
              namespaces:
              - "namespaces"
              - "namespaces"
            weight: 6
  kubevirt.io.api.core.v1.VirtualMachineInstanceStatus:
    type: "object"
    properties:
      activePods:
        type: "object"
        description: "ActivePods is a mapping of pod UID to node name. It is possible\
          \ for multiple pods to be running for a single VMI during migration."
        additionalProperties:
          type: "string"
          default: ""
      conditions:
        type: "array"
        description: "Conditions are specific points in VirtualMachineInstance's pod\
          \ runtime."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceCondition"
      evacuationNodeName:
        type: "string"
        description: "EvacuationNodeName is used to track the eviction process of\
          \ a VMI. It stores the name of the node that we want to evacuate. It is\
          \ meant to be used by KubeVirt core components only and can't be set or\
          \ modified by users."
      fsFreezeStatus:
        type: "string"
        description: "FSFreezeStatus is the state of the fs of the guest it can be\
          \ either frozen or thawed"
      guestOSInfo:
        description: "Guest OS Information"
        $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceGuestOSInfo"
      interfaces:
        type: "array"
        description: "Interfaces represent the details of available network interfaces."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceNetworkInterface"
      launcherContainerImageVersion:
        type: "string"
        description: "LauncherContainerImageVersion indicates what container image\
          \ is currently active for the vmi."
      migrationMethod:
        type: "string"
        description: "Represents the method using which the vmi can be migrated: live\
          \ migration or block migration"
      migrationState:
        description: "Represents the status of a live migration"
        $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceMigrationState"
      migrationTransport:
        type: "string"
        description: "This represents the migration transport"
      nodeName:
        type: "string"
        description: "NodeName is the name where the VirtualMachineInstance is currently\
          \ running."
      phase:
        type: "string"
        description: "Phase is the status of the VirtualMachineInstance in kubernetes\
          \ world. It is not the VirtualMachineInstance status, but partially correlates\
          \ to it."
      phaseTransitionTimestamps:
        type: "array"
        description: "PhaseTransitionTimestamp is the timestamp of when the last phase\
          \ change occurred"
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstancePhaseTransitionTimestamp"
        x-kubernetes-list-type: "atomic"
      qosClass:
        type: "string"
        description: "The Quality of Service (QOS) classification assigned to the\
          \ virtual machine instance based on resource requirements See PodQOSClass\
          \ type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md"
      reason:
        type: "string"
        description: "A brief CamelCase message indicating details about why the VMI\
          \ is in this state. e.g. 'NodeUnresponsive'"
      runtimeUser:
        type: "integer"
        format: "int64"
        description: "RuntimeUser is used to determine what user will be used in launcher"
        default: 0
      topologyHints:
        $ref: "#/definitions/kubevirt.io.api.core.v1.TopologyHints"
      virtualMachineRevisionName:
        type: "string"
        description: "VirtualMachineRevisionName is used to get the vm revision of\
          \ the vmi when doing an online vm snapshot"
      volumeStatus:
        type: "array"
        description: "VolumeStatus contains the statuses of all the volumes"
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VolumeStatus"
        x-kubernetes-list-type: "atomic"
    description: "VirtualMachineInstanceStatus represents information about the status\
      \ of a VirtualMachineInstance. Status may trail the actual state of a system."
    example:
      nodeName: "nodeName"
      phase: "phase"
      reason: "reason"
      interfaces:
      - ipAddress: "ipAddress"
        name: "name"
        ipAddresses:
        - "ipAddresses"
        - "ipAddresses"
        interfaceName: "interfaceName"
        infoSource: "infoSource"
        mac: "mac"
      - ipAddress: "ipAddress"
        name: "name"
        ipAddresses:
        - "ipAddresses"
        - "ipAddresses"
        interfaceName: "interfaceName"
        infoSource: "infoSource"
        mac: "mac"
      fsFreezeStatus: "fsFreezeStatus"
      activePods:
        key: "activePods"
      topologyHints:
        tscFrequency: 9
      evacuationNodeName: "evacuationNodeName"
      virtualMachineRevisionName: "virtualMachineRevisionName"
      phaseTransitionTimestamps:
      - phase: "phase"
      - phase: "phase"
      migrationTransport: "migrationTransport"
      volumeStatus:
      - phase: "phase"
        reason: "reason"
        size: 3
        hotplugVolume:
          attachPodUID: "attachPodUID"
          attachPodName: "attachPodName"
        name: "name"
        message: "message"
        persistentVolumeClaimInfo:
          filesystemOverhead: "filesystemOverhead"
          preallocated: true
          accessModes:
          - "accessModes"
          - "accessModes"
          requests: {}
          capacity: {}
          volumeMode: "volumeMode"
        target: "target"
      - phase: "phase"
        reason: "reason"
        size: 3
        hotplugVolume:
          attachPodUID: "attachPodUID"
          attachPodName: "attachPodName"
        name: "name"
        message: "message"
        persistentVolumeClaimInfo:
          filesystemOverhead: "filesystemOverhead"
          preallocated: true
          accessModes:
          - "accessModes"
          - "accessModes"
          requests: {}
          capacity: {}
          volumeMode: "volumeMode"
        target: "target"
      guestOSInfo:
        kernelRelease: "kernelRelease"
        versionId: "versionId"
        prettyName: "prettyName"
        machine: "machine"
        kernelVersion: "kernelVersion"
        name: "name"
        id: "id"
        version: "version"
      launcherContainerImageVersion: "launcherContainerImageVersion"
      qosClass: "qosClass"
      conditions:
      - reason: "reason"
        message: "message"
        type: "type"
        lastProbeTime: {}
        status: "status"
      - reason: "reason"
        message: "message"
        type: "type"
        lastProbeTime: {}
        status: "status"
      migrationState:
        sourceNode: "sourceNode"
        targetDirectMigrationNodePorts:
          key: 2
        targetNodeAddress: "targetNodeAddress"
        completed: true
        failed: true
        targetNode: "targetNode"
        migrationPolicyName: "migrationPolicyName"
        targetAttachmentPodUID: "targetAttachmentPodUID"
        mode: "mode"
        targetNodeTopology: "targetNodeTopology"
        migrationUid: "migrationUid"
        targetNodeDomainDetected: true
        migrationConfiguration:
          completionTimeoutPerGiB: 0
          unsafeMigrationOverride: true
          allowPostCopy: true
          disableTLS: true
          parallelMigrationsPerCluster: 6
          allowAutoConverge: true
          bandwidthPerMigration: {}
          parallelOutboundMigrationsPerNode: 1
          nodeDrainTaintKey: "nodeDrainTaintKey"
          progressTimeout: 5
          network: "network"
        targetPod: "targetPod"
        abortRequested: true
        targetCPUSet:
        - 5
        - 5
        abortStatus: "abortStatus"
      migrationMethod: "migrationMethod"
      runtimeUser: 7
  kubevirt.io.api.core.v1.VirtualMachineInstanceTemplateSpec:
    type: "object"
    properties:
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        description: "VirtualMachineInstance Spec contains the VirtualMachineInstance\
          \ specification."
        $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceSpec"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      spec:
        dnsPolicy: "ClusterFirst"
        livenessProbe:
          failureThreshold: 1
          periodSeconds: 6
          tcpSocket:
            host: "host"
          timeoutSeconds: 1
          guestAgentPing: {}
          successThreshold: 7
          initialDelaySeconds: 1
          exec:
            command:
            - "command"
            - "command"
          httpGet:
            path: "path"
            scheme: "HTTP"
            port: {}
            host: "host"
            httpHeaders:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
        terminationGracePeriodSeconds: 4
        dnsConfig:
          searches:
          - "searches"
          - "searches"
          nameservers:
          - "nameservers"
          - "nameservers"
          options:
          - name: "name"
            value: "value"
          - name: "name"
            value: "value"
        priorityClassName: "priorityClassName"
        volumes:
        - downwardAPI:
            volumeLabel: "volumeLabel"
            fields:
            - mode: 9
              path: "path"
              resourceFieldRef:
                resource: "resource"
                containerName: "containerName"
              fieldRef:
                apiVersion: "apiVersion"
                fieldPath: "fieldPath"
            - mode: 9
              path: "path"
              resourceFieldRef:
                resource: "resource"
                containerName: "containerName"
              fieldRef:
                apiVersion: "apiVersion"
                fieldPath: "fieldPath"
          cloudInitConfigDrive:
            networkDataSecretRef:
              name: "name"
            userData: "userData"
            networkData: "networkData"
            networkDataBase64: "networkDataBase64"
            secretRef:
              name: "name"
            userDataBase64: "userDataBase64"
          downwardMetrics: {}
          ephemeral:
            persistentVolumeClaim:
              claimName: "claimName"
              readOnly: true
          serviceAccount:
            serviceAccountName: "serviceAccountName"
          sysprep:
            configMap:
              name: "name"
            secret:
              name: "name"
          containerDisk:
            image: "image"
            imagePullPolicy: "Always"
            imagePullSecret: "imagePullSecret"
            path: "path"
          hostDisk:
            path: "path"
            shared: true
            type: "type"
          secret:
            secretName: "secretName"
            volumeLabel: "volumeLabel"
            optional: true
          cloudInitNoCloud:
            networkDataSecretRef:
              name: "name"
            userData: "userData"
            networkData: "networkData"
            networkDataBase64: "networkDataBase64"
            secretRef:
              name: "name"
            userDataBase64: "userDataBase64"
          configMap:
            volumeLabel: "volumeLabel"
            name: "name"
            optional: true
          dataVolume:
            hotpluggable: true
            name: "name"
          name: "name"
          persistentVolumeClaim:
            claimName: "claimName"
            hotpluggable: true
            readOnly: true
          emptyDisk: {}
        - downwardAPI:
            volumeLabel: "volumeLabel"
            fields:
            - mode: 9
              path: "path"
              resourceFieldRef:
                resource: "resource"
                containerName: "containerName"
              fieldRef:
                apiVersion: "apiVersion"
                fieldPath: "fieldPath"
            - mode: 9
              path: "path"
              resourceFieldRef:
                resource: "resource"
                containerName: "containerName"
              fieldRef:
                apiVersion: "apiVersion"
                fieldPath: "fieldPath"
          cloudInitConfigDrive:
            networkDataSecretRef:
              name: "name"
            userData: "userData"
            networkData: "networkData"
            networkDataBase64: "networkDataBase64"
            secretRef:
              name: "name"
            userDataBase64: "userDataBase64"
          downwardMetrics: {}
          ephemeral:
            persistentVolumeClaim:
              claimName: "claimName"
              readOnly: true
          serviceAccount:
            serviceAccountName: "serviceAccountName"
          sysprep:
            configMap:
              name: "name"
            secret:
              name: "name"
          containerDisk:
            image: "image"
            imagePullPolicy: "Always"
            imagePullSecret: "imagePullSecret"
            path: "path"
          hostDisk:
            path: "path"
            shared: true
            type: "type"
          secret:
            secretName: "secretName"
            volumeLabel: "volumeLabel"
            optional: true
          cloudInitNoCloud:
            networkDataSecretRef:
              name: "name"
            userData: "userData"
            networkData: "networkData"
            networkDataBase64: "networkDataBase64"
            secretRef:
              name: "name"
            userDataBase64: "userDataBase64"
          configMap:
            volumeLabel: "volumeLabel"
            name: "name"
            optional: true
          dataVolume:
            hotpluggable: true
            name: "name"
          name: "name"
          persistentVolumeClaim:
            claimName: "claimName"
            hotpluggable: true
            readOnly: true
          emptyDisk: {}
        networks:
        - pod:
            vmNetworkCIDR: "vmNetworkCIDR"
            vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
          name: "name"
          multus:
            default: true
            networkName: "networkName"
        - pod:
            vmNetworkCIDR: "vmNetworkCIDR"
            vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
          name: "name"
          multus:
            default: true
            networkName: "networkName"
        nodeSelector:
          key: "nodeSelector"
        hostname: "hostname"
        tolerations:
        - effect: "NoExecute"
          tolerationSeconds: 5
          value: "value"
          key: "key"
          operator: "Equal"
        - effect: "NoExecute"
          tolerationSeconds: 5
          value: "value"
          key: "key"
          operator: "Equal"
        accessCredentials:
        - sshPublicKey:
            propagationMethod:
              configDrive: {}
              qemuGuestAgent:
                users:
                - "users"
                - "users"
            source:
              secret:
                secretName: "secretName"
          userPassword:
            propagationMethod:
              qemuGuestAgent: {}
            source:
              secret:
                secretName: "secretName"
        - sshPublicKey:
            propagationMethod:
              configDrive: {}
              qemuGuestAgent:
                users:
                - "users"
                - "users"
            source:
              secret:
                secretName: "secretName"
          userPassword:
            propagationMethod:
              qemuGuestAgent: {}
            source:
              secret:
                secretName: "secretName"
        startStrategy: "startStrategy"
        domain:
          features:
            smm:
              enabled: true
            kvm:
              hidden: true
            apic:
              endOfInterrupt: true
              enabled: true
            acpi:
              enabled: true
            pvspinlock:
              enabled: true
            hyperv:
              vpindex:
                enabled: true
              ipi:
                enabled: true
              reenlightenment:
                enabled: true
              runtime:
                enabled: true
              vendorid:
                vendorid: "vendorid"
                enabled: true
              evmcs:
                enabled: true
              synictimer:
                direct:
                  enabled: true
                enabled: true
              spinlocks:
                spinlocks: 1
                enabled: true
              tlbflush:
                enabled: true
              synic:
                enabled: true
              relaxed:
                enabled: true
              vapic:
                enabled: true
              reset:
                enabled: true
              frequencies:
                enabled: true
          ioThreadsPolicy: "ioThreadsPolicy"
          memory:
            hugepages:
              pageSize: "pageSize"
            guest: {}
          devices:
            autoattachPodInterface: true
            interfaces:
            - dhcpOptions:
                ntpServers:
                - "ntpServers"
                - "ntpServers"
                tftpServerName: "tftpServerName"
                bootFileName: "bootFileName"
                privateOptions:
                - value: "value"
                  option: 4
                - value: "value"
                  option: 4
              slirp: {}
              macvtap: {}
              ports:
              - protocol: "protocol"
                port: 7
                name: "name"
              - protocol: "protocol"
                port: 7
                name: "name"
              macAddress: "macAddress"
              masquerade: {}
              bootOrder: 2
              name: "name"
              sriov: {}
              model: "model"
              pciAddress: "pciAddress"
              bridge: {}
              tag: "tag"
            - dhcpOptions:
                ntpServers:
                - "ntpServers"
                - "ntpServers"
                tftpServerName: "tftpServerName"
                bootFileName: "bootFileName"
                privateOptions:
                - value: "value"
                  option: 4
                - value: "value"
                  option: 4
              slirp: {}
              macvtap: {}
              ports:
              - protocol: "protocol"
                port: 7
                name: "name"
              - protocol: "protocol"
                port: 7
                name: "name"
              macAddress: "macAddress"
              masquerade: {}
              bootOrder: 2
              name: "name"
              sriov: {}
              model: "model"
              pciAddress: "pciAddress"
              bridge: {}
              tag: "tag"
            disks:
            - shareable: true
              cache: "cache"
              dedicatedIOThread: true
              disk:
                bus: "bus"
                readonly: true
                pciAddress: "pciAddress"
              lun:
                bus: "bus"
                readonly: true
              bootOrder: 3
              serial: "serial"
              io: "io"
              name: "name"
              tag: "tag"
              cdrom:
                tray: "tray"
                bus: "bus"
                readonly: true
              blockSize:
                custom:
                  physical: 9
                  logical: 7
                matchVolume:
                  enabled: true
            - shareable: true
              cache: "cache"
              dedicatedIOThread: true
              disk:
                bus: "bus"
                readonly: true
                pciAddress: "pciAddress"
              lun:
                bus: "bus"
                readonly: true
              bootOrder: 3
              serial: "serial"
              io: "io"
              name: "name"
              tag: "tag"
              cdrom:
                tray: "tray"
                bus: "bus"
                readonly: true
              blockSize:
                custom:
                  physical: 9
                  logical: 7
                matchVolume:
                  enabled: true
            inputs:
            - bus: "bus"
              name: "name"
              type: "type"
            - bus: "bus"
              name: "name"
              type: "type"
            sound:
              name: "name"
              model: "model"
            useVirtioTransitional: true
            rng: {}
            autoattachSerialConsole: true
            filesystems:
            - name: "name"
              virtiofs: {}
            - name: "name"
              virtiofs: {}
            hostDevices:
            - name: "name"
              tag: "tag"
              deviceName: "deviceName"
            - name: "name"
              tag: "tag"
              deviceName: "deviceName"
            networkInterfaceMultiqueue: true
            autoattachMemBalloon: true
            tpm: {}
            clientPassthrough: {}
            watchdog:
              i6300esb:
                action: "action"
              name: "name"
            blockMultiQueue: true
            gpus:
            - name: "name"
              tag: "tag"
              virtualGPUOptions:
                display:
                  enabled: true
                  ramFB:
                    enabled: true
              deviceName: "deviceName"
            - name: "name"
              tag: "tag"
              virtualGPUOptions:
                display:
                  enabled: true
                  ramFB:
                    enabled: true
              deviceName: "deviceName"
            disableHotplug: true
            autoattachGraphicsDevice: true
          machine:
            type: "type"
          cpu:
            features:
            - name: "name"
              policy: "policy"
            - name: "name"
              policy: "policy"
            realtime:
              mask: "mask"
            cores: 5
            dedicatedCpuPlacement: true
            numa:
              guestMappingPassthrough: {}
            threads: 2
            model: "model"
            sockets: 5
            isolateEmulatorThread: true
          resources:
            overcommitGuestOverhead: true
            requests: {}
            limits: {}
          chassis:
            serial: "serial"
            asset: "asset"
            sku: "sku"
            version: "version"
            manufacturer: "manufacturer"
          clock:
            timer:
              rtc:
                tickPolicy: "tickPolicy"
                present: true
                track: "track"
              kvm:
                present: true
              hpet:
                tickPolicy: "tickPolicy"
                present: true
              pit:
                tickPolicy: "tickPolicy"
                present: true
              hyperv:
                present: true
            utc:
              offsetSeconds: 1
            timezone: "timezone"
          firmware:
            serial: "serial"
            bootloader:
              bios:
                useSerial: true
              efi:
                secureBoot: true
            uuid: "uuid"
            kernelBoot:
              container:
                image: "image"
                imagePullPolicy: "Always"
                imagePullSecret: "imagePullSecret"
                initrdPath: "initrdPath"
                kernelPath: "kernelPath"
              kernelArgs: "kernelArgs"
          launchSecurity:
            sev: {}
        readinessProbe:
          failureThreshold: 1
          periodSeconds: 6
          tcpSocket:
            host: "host"
          timeoutSeconds: 1
          guestAgentPing: {}
          successThreshold: 7
          initialDelaySeconds: 1
          exec:
            command:
            - "command"
            - "command"
          httpGet:
            path: "path"
            scheme: "HTTP"
            port: {}
            host: "host"
            httpHeaders:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
        subdomain: "subdomain"
        evictionStrategy: "evictionStrategy"
        schedulerName: "schedulerName"
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                matchFields:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
              - matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                matchFields:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                matchFields:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
              weight: 0
            - preference:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                matchFields:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "DoesNotExist"
              weight: 0
          podAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              namespaceSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              topologyKey: "topologyKey"
              namespaces:
              - "namespaces"
              - "namespaces"
            - labelSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              namespaceSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              topologyKey: "topologyKey"
              namespaces:
              - "namespaces"
              - "namespaces"
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              weight: 6
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              weight: 6
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              namespaceSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              topologyKey: "topologyKey"
              namespaces:
              - "namespaces"
              - "namespaces"
            - labelSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              namespaceSelector:
                matchExpressions:
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                - values:
                  - "values"
                  - "values"
                  key: "key"
                  operator: "operator"
                matchLabels:
                  key: "matchLabels"
              topologyKey: "topologyKey"
              namespaces:
              - "namespaces"
              - "namespaces"
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              weight: 6
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              weight: 6
  kubevirt.io.api.core.v1.VirtualMachineList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachine"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "VirtualMachineList is a list of virtualmachines"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          flavor:
            kind: "kind"
            name: "name"
          running: true
          template:
            metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            spec:
              dnsPolicy: "ClusterFirst"
              livenessProbe:
                failureThreshold: 1
                periodSeconds: 6
                tcpSocket:
                  host: "host"
                timeoutSeconds: 1
                guestAgentPing: {}
                successThreshold: 7
                initialDelaySeconds: 1
                exec:
                  command:
                  - "command"
                  - "command"
                httpGet:
                  path: "path"
                  scheme: "HTTP"
                  port: {}
                  host: "host"
                  httpHeaders:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
              terminationGracePeriodSeconds: 4
              dnsConfig:
                searches:
                - "searches"
                - "searches"
                nameservers:
                - "nameservers"
                - "nameservers"
                options:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              priorityClassName: "priorityClassName"
              volumes:
              - downwardAPI:
                  volumeLabel: "volumeLabel"
                  fields:
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                cloudInitConfigDrive:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                downwardMetrics: {}
                ephemeral:
                  persistentVolumeClaim:
                    claimName: "claimName"
                    readOnly: true
                serviceAccount:
                  serviceAccountName: "serviceAccountName"
                sysprep:
                  configMap:
                    name: "name"
                  secret:
                    name: "name"
                containerDisk:
                  image: "image"
                  imagePullPolicy: "Always"
                  imagePullSecret: "imagePullSecret"
                  path: "path"
                hostDisk:
                  path: "path"
                  shared: true
                  type: "type"
                secret:
                  secretName: "secretName"
                  volumeLabel: "volumeLabel"
                  optional: true
                cloudInitNoCloud:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                configMap:
                  volumeLabel: "volumeLabel"
                  name: "name"
                  optional: true
                dataVolume:
                  hotpluggable: true
                  name: "name"
                name: "name"
                persistentVolumeClaim:
                  claimName: "claimName"
                  hotpluggable: true
                  readOnly: true
                emptyDisk: {}
              - downwardAPI:
                  volumeLabel: "volumeLabel"
                  fields:
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                cloudInitConfigDrive:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                downwardMetrics: {}
                ephemeral:
                  persistentVolumeClaim:
                    claimName: "claimName"
                    readOnly: true
                serviceAccount:
                  serviceAccountName: "serviceAccountName"
                sysprep:
                  configMap:
                    name: "name"
                  secret:
                    name: "name"
                containerDisk:
                  image: "image"
                  imagePullPolicy: "Always"
                  imagePullSecret: "imagePullSecret"
                  path: "path"
                hostDisk:
                  path: "path"
                  shared: true
                  type: "type"
                secret:
                  secretName: "secretName"
                  volumeLabel: "volumeLabel"
                  optional: true
                cloudInitNoCloud:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                configMap:
                  volumeLabel: "volumeLabel"
                  name: "name"
                  optional: true
                dataVolume:
                  hotpluggable: true
                  name: "name"
                name: "name"
                persistentVolumeClaim:
                  claimName: "claimName"
                  hotpluggable: true
                  readOnly: true
                emptyDisk: {}
              networks:
              - pod:
                  vmNetworkCIDR: "vmNetworkCIDR"
                  vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                name: "name"
                multus:
                  default: true
                  networkName: "networkName"
              - pod:
                  vmNetworkCIDR: "vmNetworkCIDR"
                  vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                name: "name"
                multus:
                  default: true
                  networkName: "networkName"
              nodeSelector:
                key: "nodeSelector"
              hostname: "hostname"
              tolerations:
              - effect: "NoExecute"
                tolerationSeconds: 5
                value: "value"
                key: "key"
                operator: "Equal"
              - effect: "NoExecute"
                tolerationSeconds: 5
                value: "value"
                key: "key"
                operator: "Equal"
              accessCredentials:
              - sshPublicKey:
                  propagationMethod:
                    configDrive: {}
                    qemuGuestAgent:
                      users:
                      - "users"
                      - "users"
                  source:
                    secret:
                      secretName: "secretName"
                userPassword:
                  propagationMethod:
                    qemuGuestAgent: {}
                  source:
                    secret:
                      secretName: "secretName"
              - sshPublicKey:
                  propagationMethod:
                    configDrive: {}
                    qemuGuestAgent:
                      users:
                      - "users"
                      - "users"
                  source:
                    secret:
                      secretName: "secretName"
                userPassword:
                  propagationMethod:
                    qemuGuestAgent: {}
                  source:
                    secret:
                      secretName: "secretName"
              startStrategy: "startStrategy"
              domain:
                features:
                  smm:
                    enabled: true
                  kvm:
                    hidden: true
                  apic:
                    endOfInterrupt: true
                    enabled: true
                  acpi:
                    enabled: true
                  pvspinlock:
                    enabled: true
                  hyperv:
                    vpindex:
                      enabled: true
                    ipi:
                      enabled: true
                    reenlightenment:
                      enabled: true
                    runtime:
                      enabled: true
                    vendorid:
                      vendorid: "vendorid"
                      enabled: true
                    evmcs:
                      enabled: true
                    synictimer:
                      direct:
                        enabled: true
                      enabled: true
                    spinlocks:
                      spinlocks: 1
                      enabled: true
                    tlbflush:
                      enabled: true
                    synic:
                      enabled: true
                    relaxed:
                      enabled: true
                    vapic:
                      enabled: true
                    reset:
                      enabled: true
                    frequencies:
                      enabled: true
                ioThreadsPolicy: "ioThreadsPolicy"
                memory:
                  hugepages:
                    pageSize: "pageSize"
                  guest: {}
                devices:
                  autoattachPodInterface: true
                  interfaces:
                  - dhcpOptions:
                      ntpServers:
                      - "ntpServers"
                      - "ntpServers"
                      tftpServerName: "tftpServerName"
                      bootFileName: "bootFileName"
                      privateOptions:
                      - value: "value"
                        option: 4
                      - value: "value"
                        option: 4
                    slirp: {}
                    macvtap: {}
                    ports:
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    macAddress: "macAddress"
                    masquerade: {}
                    bootOrder: 2
                    name: "name"
                    sriov: {}
                    model: "model"
                    pciAddress: "pciAddress"
                    bridge: {}
                    tag: "tag"
                  - dhcpOptions:
                      ntpServers:
                      - "ntpServers"
                      - "ntpServers"
                      tftpServerName: "tftpServerName"
                      bootFileName: "bootFileName"
                      privateOptions:
                      - value: "value"
                        option: 4
                      - value: "value"
                        option: 4
                    slirp: {}
                    macvtap: {}
                    ports:
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    macAddress: "macAddress"
                    masquerade: {}
                    bootOrder: 2
                    name: "name"
                    sriov: {}
                    model: "model"
                    pciAddress: "pciAddress"
                    bridge: {}
                    tag: "tag"
                  disks:
                  - shareable: true
                    cache: "cache"
                    dedicatedIOThread: true
                    disk:
                      bus: "bus"
                      readonly: true
                      pciAddress: "pciAddress"
                    lun:
                      bus: "bus"
                      readonly: true
                    bootOrder: 3
                    serial: "serial"
                    io: "io"
                    name: "name"
                    tag: "tag"
                    cdrom:
                      tray: "tray"
                      bus: "bus"
                      readonly: true
                    blockSize:
                      custom:
                        physical: 9
                        logical: 7
                      matchVolume:
                        enabled: true
                  - shareable: true
                    cache: "cache"
                    dedicatedIOThread: true
                    disk:
                      bus: "bus"
                      readonly: true
                      pciAddress: "pciAddress"
                    lun:
                      bus: "bus"
                      readonly: true
                    bootOrder: 3
                    serial: "serial"
                    io: "io"
                    name: "name"
                    tag: "tag"
                    cdrom:
                      tray: "tray"
                      bus: "bus"
                      readonly: true
                    blockSize:
                      custom:
                        physical: 9
                        logical: 7
                      matchVolume:
                        enabled: true
                  inputs:
                  - bus: "bus"
                    name: "name"
                    type: "type"
                  - bus: "bus"
                    name: "name"
                    type: "type"
                  sound:
                    name: "name"
                    model: "model"
                  useVirtioTransitional: true
                  rng: {}
                  autoattachSerialConsole: true
                  filesystems:
                  - name: "name"
                    virtiofs: {}
                  - name: "name"
                    virtiofs: {}
                  hostDevices:
                  - name: "name"
                    tag: "tag"
                    deviceName: "deviceName"
                  - name: "name"
                    tag: "tag"
                    deviceName: "deviceName"
                  networkInterfaceMultiqueue: true
                  autoattachMemBalloon: true
                  tpm: {}
                  clientPassthrough: {}
                  watchdog:
                    i6300esb:
                      action: "action"
                    name: "name"
                  blockMultiQueue: true
                  gpus:
                  - name: "name"
                    tag: "tag"
                    virtualGPUOptions:
                      display:
                        enabled: true
                        ramFB:
                          enabled: true
                    deviceName: "deviceName"
                  - name: "name"
                    tag: "tag"
                    virtualGPUOptions:
                      display:
                        enabled: true
                        ramFB:
                          enabled: true
                    deviceName: "deviceName"
                  disableHotplug: true
                  autoattachGraphicsDevice: true
                machine:
                  type: "type"
                cpu:
                  features:
                  - name: "name"
                    policy: "policy"
                  - name: "name"
                    policy: "policy"
                  realtime:
                    mask: "mask"
                  cores: 5
                  dedicatedCpuPlacement: true
                  numa:
                    guestMappingPassthrough: {}
                  threads: 2
                  model: "model"
                  sockets: 5
                  isolateEmulatorThread: true
                resources:
                  overcommitGuestOverhead: true
                  requests: {}
                  limits: {}
                chassis:
                  serial: "serial"
                  asset: "asset"
                  sku: "sku"
                  version: "version"
                  manufacturer: "manufacturer"
                clock:
                  timer:
                    rtc:
                      tickPolicy: "tickPolicy"
                      present: true
                      track: "track"
                    kvm:
                      present: true
                    hpet:
                      tickPolicy: "tickPolicy"
                      present: true
                    pit:
                      tickPolicy: "tickPolicy"
                      present: true
                    hyperv:
                      present: true
                  utc:
                    offsetSeconds: 1
                  timezone: "timezone"
                firmware:
                  serial: "serial"
                  bootloader:
                    bios:
                      useSerial: true
                    efi:
                      secureBoot: true
                  uuid: "uuid"
                  kernelBoot:
                    container:
                      image: "image"
                      imagePullPolicy: "Always"
                      imagePullSecret: "imagePullSecret"
                      initrdPath: "initrdPath"
                      kernelPath: "kernelPath"
                    kernelArgs: "kernelArgs"
                launchSecurity:
                  sev: {}
              readinessProbe:
                failureThreshold: 1
                periodSeconds: 6
                tcpSocket:
                  host: "host"
                timeoutSeconds: 1
                guestAgentPing: {}
                successThreshold: 7
                initialDelaySeconds: 1
                exec:
                  command:
                  - "command"
                  - "command"
                httpGet:
                  path: "path"
                  scheme: "HTTP"
                  port: {}
                  host: "host"
                  httpHeaders:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
              subdomain: "subdomain"
              evictionStrategy: "evictionStrategy"
              schedulerName: "schedulerName"
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                    - matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                    - matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - preference:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                    weight: 0
                  - preference:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                    weight: 0
                podAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
                podAntiAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
          dataVolumeTemplates:
          - metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            apiVersion: "apiVersion"
            kind: "kind"
            spec:
              finalCheckpoint: true
              preallocation: true
              priorityClassName: "priorityClassName"
              checkpoints:
              - current: "current"
                previous: "previous"
              - current: "current"
                previous: "previous"
              source:
                s3:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                registry:
                  imageStream: "imageStream"
                  pullMethod: "pullMethod"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                vddk:
                  backingFile: "backingFile"
                  initImageURL: "initImageURL"
                  secretRef: "secretRef"
                  thumbprint: "thumbprint"
                  uuid: "uuid"
                  url: "url"
                blank: {}
                imageio:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  diskId: "diskId"
                  url: "url"
                upload: {}
                http:
                  secretExtraHeaders:
                  - "secretExtraHeaders"
                  - "secretExtraHeaders"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  extraHeaders:
                  - "extraHeaders"
                  - "extraHeaders"
                  url: "url"
                pvc:
                  name: "name"
                  namespace: "namespace"
              storage:
                storageClassName: "storageClassName"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              pvc:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              sourceRef:
                kind: "kind"
                name: "name"
                namespace: "namespace"
              contentType: "contentType"
            status: {}
          - metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            apiVersion: "apiVersion"
            kind: "kind"
            spec:
              finalCheckpoint: true
              preallocation: true
              priorityClassName: "priorityClassName"
              checkpoints:
              - current: "current"
                previous: "previous"
              - current: "current"
                previous: "previous"
              source:
                s3:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                registry:
                  imageStream: "imageStream"
                  pullMethod: "pullMethod"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                vddk:
                  backingFile: "backingFile"
                  initImageURL: "initImageURL"
                  secretRef: "secretRef"
                  thumbprint: "thumbprint"
                  uuid: "uuid"
                  url: "url"
                blank: {}
                imageio:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  diskId: "diskId"
                  url: "url"
                upload: {}
                http:
                  secretExtraHeaders:
                  - "secretExtraHeaders"
                  - "secretExtraHeaders"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  extraHeaders:
                  - "extraHeaders"
                  - "extraHeaders"
                  url: "url"
                pvc:
                  name: "name"
                  namespace: "namespace"
              storage:
                storageClassName: "storageClassName"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              pvc:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              sourceRef:
                kind: "kind"
                name: "name"
                namespace: "namespace"
              contentType: "contentType"
            status: {}
          runStrategy: "runStrategy"
        status:
          startFailure:
            consecutiveFailCount: 0
            lastFailedVMIUID: "lastFailedVMIUID"
          snapshotInProgress: "snapshotInProgress"
          created: true
          ready: true
          printableStatus: "printableStatus"
          conditions:
          - reason: "reason"
            message: "message"
            type: "type"
            lastProbeTime: {}
            status: "status"
          - reason: "reason"
            message: "message"
            type: "type"
            lastProbeTime: {}
            status: "status"
          stateChangeRequests:
          - uid: "uid"
            data:
              key: "data"
            action: "action"
          - uid: "uid"
            data:
              key: "data"
            action: "action"
          volumeRequests:
          - removeVolumeOptions:
              dryRun:
              - "dryRun"
              - "dryRun"
              name: "name"
            addVolumeOptions:
              disk:
                shareable: true
                cache: "cache"
                dedicatedIOThread: true
                disk:
                  bus: "bus"
                  readonly: true
                  pciAddress: "pciAddress"
                lun:
                  bus: "bus"
                  readonly: true
                bootOrder: 3
                serial: "serial"
                io: "io"
                name: "name"
                tag: "tag"
                cdrom:
                  tray: "tray"
                  bus: "bus"
                  readonly: true
                blockSize:
                  custom:
                    physical: 9
                    logical: 7
                  matchVolume:
                    enabled: true
              dryRun:
              - "dryRun"
              - "dryRun"
              name: "name"
              volumeSource:
                dataVolume:
                  hotpluggable: true
                  name: "name"
                persistentVolumeClaim:
                  claimName: "claimName"
                  hotpluggable: true
                  readOnly: true
          - removeVolumeOptions:
              dryRun:
              - "dryRun"
              - "dryRun"
              name: "name"
            addVolumeOptions:
              disk:
                shareable: true
                cache: "cache"
                dedicatedIOThread: true
                disk:
                  bus: "bus"
                  readonly: true
                  pciAddress: "pciAddress"
                lun:
                  bus: "bus"
                  readonly: true
                bootOrder: 3
                serial: "serial"
                io: "io"
                name: "name"
                tag: "tag"
                cdrom:
                  tray: "tray"
                  bus: "bus"
                  readonly: true
                blockSize:
                  custom:
                    physical: 9
                    logical: 7
                  matchVolume:
                    enabled: true
              dryRun:
              - "dryRun"
              - "dryRun"
              name: "name"
              volumeSource:
                dataVolume:
                  hotpluggable: true
                  name: "name"
                persistentVolumeClaim:
                  claimName: "claimName"
                  hotpluggable: true
                  readOnly: true
          volumeSnapshotStatuses:
          - reason: "reason"
            name: "name"
            enabled: false
          - reason: "reason"
            name: "name"
            enabled: false
          restoreInProgress: "restoreInProgress"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          flavor:
            kind: "kind"
            name: "name"
          running: true
          template:
            metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            spec:
              dnsPolicy: "ClusterFirst"
              livenessProbe:
                failureThreshold: 1
                periodSeconds: 6
                tcpSocket:
                  host: "host"
                timeoutSeconds: 1
                guestAgentPing: {}
                successThreshold: 7
                initialDelaySeconds: 1
                exec:
                  command:
                  - "command"
                  - "command"
                httpGet:
                  path: "path"
                  scheme: "HTTP"
                  port: {}
                  host: "host"
                  httpHeaders:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
              terminationGracePeriodSeconds: 4
              dnsConfig:
                searches:
                - "searches"
                - "searches"
                nameservers:
                - "nameservers"
                - "nameservers"
                options:
                - name: "name"
                  value: "value"
                - name: "name"
                  value: "value"
              priorityClassName: "priorityClassName"
              volumes:
              - downwardAPI:
                  volumeLabel: "volumeLabel"
                  fields:
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                cloudInitConfigDrive:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                downwardMetrics: {}
                ephemeral:
                  persistentVolumeClaim:
                    claimName: "claimName"
                    readOnly: true
                serviceAccount:
                  serviceAccountName: "serviceAccountName"
                sysprep:
                  configMap:
                    name: "name"
                  secret:
                    name: "name"
                containerDisk:
                  image: "image"
                  imagePullPolicy: "Always"
                  imagePullSecret: "imagePullSecret"
                  path: "path"
                hostDisk:
                  path: "path"
                  shared: true
                  type: "type"
                secret:
                  secretName: "secretName"
                  volumeLabel: "volumeLabel"
                  optional: true
                cloudInitNoCloud:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                configMap:
                  volumeLabel: "volumeLabel"
                  name: "name"
                  optional: true
                dataVolume:
                  hotpluggable: true
                  name: "name"
                name: "name"
                persistentVolumeClaim:
                  claimName: "claimName"
                  hotpluggable: true
                  readOnly: true
                emptyDisk: {}
              - downwardAPI:
                  volumeLabel: "volumeLabel"
                  fields:
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                  - mode: 9
                    path: "path"
                    resourceFieldRef:
                      resource: "resource"
                      containerName: "containerName"
                    fieldRef:
                      apiVersion: "apiVersion"
                      fieldPath: "fieldPath"
                cloudInitConfigDrive:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                downwardMetrics: {}
                ephemeral:
                  persistentVolumeClaim:
                    claimName: "claimName"
                    readOnly: true
                serviceAccount:
                  serviceAccountName: "serviceAccountName"
                sysprep:
                  configMap:
                    name: "name"
                  secret:
                    name: "name"
                containerDisk:
                  image: "image"
                  imagePullPolicy: "Always"
                  imagePullSecret: "imagePullSecret"
                  path: "path"
                hostDisk:
                  path: "path"
                  shared: true
                  type: "type"
                secret:
                  secretName: "secretName"
                  volumeLabel: "volumeLabel"
                  optional: true
                cloudInitNoCloud:
                  networkDataSecretRef:
                    name: "name"
                  userData: "userData"
                  networkData: "networkData"
                  networkDataBase64: "networkDataBase64"
                  secretRef:
                    name: "name"
                  userDataBase64: "userDataBase64"
                configMap:
                  volumeLabel: "volumeLabel"
                  name: "name"
                  optional: true
                dataVolume:
                  hotpluggable: true
                  name: "name"
                name: "name"
                persistentVolumeClaim:
                  claimName: "claimName"
                  hotpluggable: true
                  readOnly: true
                emptyDisk: {}
              networks:
              - pod:
                  vmNetworkCIDR: "vmNetworkCIDR"
                  vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                name: "name"
                multus:
                  default: true
                  networkName: "networkName"
              - pod:
                  vmNetworkCIDR: "vmNetworkCIDR"
                  vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
                name: "name"
                multus:
                  default: true
                  networkName: "networkName"
              nodeSelector:
                key: "nodeSelector"
              hostname: "hostname"
              tolerations:
              - effect: "NoExecute"
                tolerationSeconds: 5
                value: "value"
                key: "key"
                operator: "Equal"
              - effect: "NoExecute"
                tolerationSeconds: 5
                value: "value"
                key: "key"
                operator: "Equal"
              accessCredentials:
              - sshPublicKey:
                  propagationMethod:
                    configDrive: {}
                    qemuGuestAgent:
                      users:
                      - "users"
                      - "users"
                  source:
                    secret:
                      secretName: "secretName"
                userPassword:
                  propagationMethod:
                    qemuGuestAgent: {}
                  source:
                    secret:
                      secretName: "secretName"
              - sshPublicKey:
                  propagationMethod:
                    configDrive: {}
                    qemuGuestAgent:
                      users:
                      - "users"
                      - "users"
                  source:
                    secret:
                      secretName: "secretName"
                userPassword:
                  propagationMethod:
                    qemuGuestAgent: {}
                  source:
                    secret:
                      secretName: "secretName"
              startStrategy: "startStrategy"
              domain:
                features:
                  smm:
                    enabled: true
                  kvm:
                    hidden: true
                  apic:
                    endOfInterrupt: true
                    enabled: true
                  acpi:
                    enabled: true
                  pvspinlock:
                    enabled: true
                  hyperv:
                    vpindex:
                      enabled: true
                    ipi:
                      enabled: true
                    reenlightenment:
                      enabled: true
                    runtime:
                      enabled: true
                    vendorid:
                      vendorid: "vendorid"
                      enabled: true
                    evmcs:
                      enabled: true
                    synictimer:
                      direct:
                        enabled: true
                      enabled: true
                    spinlocks:
                      spinlocks: 1
                      enabled: true
                    tlbflush:
                      enabled: true
                    synic:
                      enabled: true
                    relaxed:
                      enabled: true
                    vapic:
                      enabled: true
                    reset:
                      enabled: true
                    frequencies:
                      enabled: true
                ioThreadsPolicy: "ioThreadsPolicy"
                memory:
                  hugepages:
                    pageSize: "pageSize"
                  guest: {}
                devices:
                  autoattachPodInterface: true
                  interfaces:
                  - dhcpOptions:
                      ntpServers:
                      - "ntpServers"
                      - "ntpServers"
                      tftpServerName: "tftpServerName"
                      bootFileName: "bootFileName"
                      privateOptions:
                      - value: "value"
                        option: 4
                      - value: "value"
                        option: 4
                    slirp: {}
                    macvtap: {}
                    ports:
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    macAddress: "macAddress"
                    masquerade: {}
                    bootOrder: 2
                    name: "name"
                    sriov: {}
                    model: "model"
                    pciAddress: "pciAddress"
                    bridge: {}
                    tag: "tag"
                  - dhcpOptions:
                      ntpServers:
                      - "ntpServers"
                      - "ntpServers"
                      tftpServerName: "tftpServerName"
                      bootFileName: "bootFileName"
                      privateOptions:
                      - value: "value"
                        option: 4
                      - value: "value"
                        option: 4
                    slirp: {}
                    macvtap: {}
                    ports:
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    - protocol: "protocol"
                      port: 7
                      name: "name"
                    macAddress: "macAddress"
                    masquerade: {}
                    bootOrder: 2
                    name: "name"
                    sriov: {}
                    model: "model"
                    pciAddress: "pciAddress"
                    bridge: {}
                    tag: "tag"
                  disks:
                  - shareable: true
                    cache: "cache"
                    dedicatedIOThread: true
                    disk:
                      bus: "bus"
                      readonly: true
                      pciAddress: "pciAddress"
                    lun:
                      bus: "bus"
                      readonly: true
                    bootOrder: 3
                    serial: "serial"
                    io: "io"
                    name: "name"
                    tag: "tag"
                    cdrom:
                      tray: "tray"
                      bus: "bus"
                      readonly: true
                    blockSize:
                      custom:
                        physical: 9
                        logical: 7
                      matchVolume:
                        enabled: true
                  - shareable: true
                    cache: "cache"
                    dedicatedIOThread: true
                    disk:
                      bus: "bus"
                      readonly: true
                      pciAddress: "pciAddress"
                    lun:
                      bus: "bus"
                      readonly: true
                    bootOrder: 3
                    serial: "serial"
                    io: "io"
                    name: "name"
                    tag: "tag"
                    cdrom:
                      tray: "tray"
                      bus: "bus"
                      readonly: true
                    blockSize:
                      custom:
                        physical: 9
                        logical: 7
                      matchVolume:
                        enabled: true
                  inputs:
                  - bus: "bus"
                    name: "name"
                    type: "type"
                  - bus: "bus"
                    name: "name"
                    type: "type"
                  sound:
                    name: "name"
                    model: "model"
                  useVirtioTransitional: true
                  rng: {}
                  autoattachSerialConsole: true
                  filesystems:
                  - name: "name"
                    virtiofs: {}
                  - name: "name"
                    virtiofs: {}
                  hostDevices:
                  - name: "name"
                    tag: "tag"
                    deviceName: "deviceName"
                  - name: "name"
                    tag: "tag"
                    deviceName: "deviceName"
                  networkInterfaceMultiqueue: true
                  autoattachMemBalloon: true
                  tpm: {}
                  clientPassthrough: {}
                  watchdog:
                    i6300esb:
                      action: "action"
                    name: "name"
                  blockMultiQueue: true
                  gpus:
                  - name: "name"
                    tag: "tag"
                    virtualGPUOptions:
                      display:
                        enabled: true
                        ramFB:
                          enabled: true
                    deviceName: "deviceName"
                  - name: "name"
                    tag: "tag"
                    virtualGPUOptions:
                      display:
                        enabled: true
                        ramFB:
                          enabled: true
                    deviceName: "deviceName"
                  disableHotplug: true
                  autoattachGraphicsDevice: true
                machine:
                  type: "type"
                cpu:
                  features:
                  - name: "name"
                    policy: "policy"
                  - name: "name"
                    policy: "policy"
                  realtime:
                    mask: "mask"
                  cores: 5
                  dedicatedCpuPlacement: true
                  numa:
                    guestMappingPassthrough: {}
                  threads: 2
                  model: "model"
                  sockets: 5
                  isolateEmulatorThread: true
                resources:
                  overcommitGuestOverhead: true
                  requests: {}
                  limits: {}
                chassis:
                  serial: "serial"
                  asset: "asset"
                  sku: "sku"
                  version: "version"
                  manufacturer: "manufacturer"
                clock:
                  timer:
                    rtc:
                      tickPolicy: "tickPolicy"
                      present: true
                      track: "track"
                    kvm:
                      present: true
                    hpet:
                      tickPolicy: "tickPolicy"
                      present: true
                    pit:
                      tickPolicy: "tickPolicy"
                      present: true
                    hyperv:
                      present: true
                  utc:
                    offsetSeconds: 1
                  timezone: "timezone"
                firmware:
                  serial: "serial"
                  bootloader:
                    bios:
                      useSerial: true
                    efi:
                      secureBoot: true
                  uuid: "uuid"
                  kernelBoot:
                    container:
                      image: "image"
                      imagePullPolicy: "Always"
                      imagePullSecret: "imagePullSecret"
                      initrdPath: "initrdPath"
                      kernelPath: "kernelPath"
                    kernelArgs: "kernelArgs"
                launchSecurity:
                  sev: {}
              readinessProbe:
                failureThreshold: 1
                periodSeconds: 6
                tcpSocket:
                  host: "host"
                timeoutSeconds: 1
                guestAgentPing: {}
                successThreshold: 7
                initialDelaySeconds: 1
                exec:
                  command:
                  - "command"
                  - "command"
                httpGet:
                  path: "path"
                  scheme: "HTTP"
                  port: {}
                  host: "host"
                  httpHeaders:
                  - name: "name"
                    value: "value"
                  - name: "name"
                    value: "value"
              subdomain: "subdomain"
              evictionStrategy: "evictionStrategy"
              schedulerName: "schedulerName"
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                    - matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                    - matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - preference:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                    weight: 0
                  - preference:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      matchFields:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "DoesNotExist"
                    weight: 0
                podAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
                podAntiAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  - labelSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    namespaceSelector:
                      matchExpressions:
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      - values:
                        - "values"
                        - "values"
                        key: "key"
                        operator: "operator"
                      matchLabels:
                        key: "matchLabels"
                    topologyKey: "topologyKey"
                    namespaces:
                    - "namespaces"
                    - "namespaces"
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
                  - podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      namespaceSelector:
                        matchExpressions:
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        - values:
                          - "values"
                          - "values"
                          key: "key"
                          operator: "operator"
                        matchLabels:
                          key: "matchLabels"
                      topologyKey: "topologyKey"
                      namespaces:
                      - "namespaces"
                      - "namespaces"
                    weight: 6
          dataVolumeTemplates:
          - metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            apiVersion: "apiVersion"
            kind: "kind"
            spec:
              finalCheckpoint: true
              preallocation: true
              priorityClassName: "priorityClassName"
              checkpoints:
              - current: "current"
                previous: "previous"
              - current: "current"
                previous: "previous"
              source:
                s3:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                registry:
                  imageStream: "imageStream"
                  pullMethod: "pullMethod"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                vddk:
                  backingFile: "backingFile"
                  initImageURL: "initImageURL"
                  secretRef: "secretRef"
                  thumbprint: "thumbprint"
                  uuid: "uuid"
                  url: "url"
                blank: {}
                imageio:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  diskId: "diskId"
                  url: "url"
                upload: {}
                http:
                  secretExtraHeaders:
                  - "secretExtraHeaders"
                  - "secretExtraHeaders"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  extraHeaders:
                  - "extraHeaders"
                  - "extraHeaders"
                  url: "url"
                pvc:
                  name: "name"
                  namespace: "namespace"
              storage:
                storageClassName: "storageClassName"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              pvc:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              sourceRef:
                kind: "kind"
                name: "name"
                namespace: "namespace"
              contentType: "contentType"
            status: {}
          - metadata:
              generation: 6
              finalizers:
              - "finalizers"
              - "finalizers"
              resourceVersion: "resourceVersion"
              annotations:
                key: "annotations"
              generateName: "generateName"
              labels:
                key: "labels"
              ownerReferences:
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              - uid: "uid"
                controller: true
                apiVersion: "apiVersion"
                kind: "kind"
                name: "name"
                blockOwnerDeletion: true
              selfLink: "selfLink"
              deletionGracePeriodSeconds: 0
              uid: "uid"
              managedFields:
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              - apiVersion: "apiVersion"
                fieldsV1: {}
                manager: "manager"
                subresource: "subresource"
                operation: "operation"
                fieldsType: "fieldsType"
              clusterName: "clusterName"
              creationTimestamp: {}
              name: "name"
              namespace: "namespace"
            apiVersion: "apiVersion"
            kind: "kind"
            spec:
              finalCheckpoint: true
              preallocation: true
              priorityClassName: "priorityClassName"
              checkpoints:
              - current: "current"
                previous: "previous"
              - current: "current"
                previous: "previous"
              source:
                s3:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                registry:
                  imageStream: "imageStream"
                  pullMethod: "pullMethod"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  url: "url"
                vddk:
                  backingFile: "backingFile"
                  initImageURL: "initImageURL"
                  secretRef: "secretRef"
                  thumbprint: "thumbprint"
                  uuid: "uuid"
                  url: "url"
                blank: {}
                imageio:
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  diskId: "diskId"
                  url: "url"
                upload: {}
                http:
                  secretExtraHeaders:
                  - "secretExtraHeaders"
                  - "secretExtraHeaders"
                  secretRef: "secretRef"
                  certConfigMap: "certConfigMap"
                  extraHeaders:
                  - "extraHeaders"
                  - "extraHeaders"
                  url: "url"
                pvc:
                  name: "name"
                  namespace: "namespace"
              storage:
                storageClassName: "storageClassName"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              pvc:
                storageClassName: "storageClassName"
                dataSourceRef:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeName: "volumeName"
                resources:
                  requests: {}
                  limits:
                    key: {}
                selector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                accessModes:
                - "accessModes"
                - "accessModes"
                dataSource:
                  apiGroup: "apiGroup"
                  kind: "kind"
                  name: "name"
                volumeMode: "volumeMode"
              sourceRef:
                kind: "kind"
                name: "name"
                namespace: "namespace"
              contentType: "contentType"
            status: {}
          runStrategy: "runStrategy"
        status:
          startFailure:
            consecutiveFailCount: 0
            lastFailedVMIUID: "lastFailedVMIUID"
          snapshotInProgress: "snapshotInProgress"
          created: true
          ready: true
          printableStatus: "printableStatus"
          conditions:
          - reason: "reason"
            message: "message"
            type: "type"
            lastProbeTime: {}
            status: "status"
          - reason: "reason"
            message: "message"
            type: "type"
            lastProbeTime: {}
            status: "status"
          stateChangeRequests:
          - uid: "uid"
            data:
              key: "data"
            action: "action"
          - uid: "uid"
            data:
              key: "data"
            action: "action"
          volumeRequests:
          - removeVolumeOptions:
              dryRun:
              - "dryRun"
              - "dryRun"
              name: "name"
            addVolumeOptions:
              disk:
                shareable: true
                cache: "cache"
                dedicatedIOThread: true
                disk:
                  bus: "bus"
                  readonly: true
                  pciAddress: "pciAddress"
                lun:
                  bus: "bus"
                  readonly: true
                bootOrder: 3
                serial: "serial"
                io: "io"
                name: "name"
                tag: "tag"
                cdrom:
                  tray: "tray"
                  bus: "bus"
                  readonly: true
                blockSize:
                  custom:
                    physical: 9
                    logical: 7
                  matchVolume:
                    enabled: true
              dryRun:
              - "dryRun"
              - "dryRun"
              name: "name"
              volumeSource:
                dataVolume:
                  hotpluggable: true
                  name: "name"
                persistentVolumeClaim:
                  claimName: "claimName"
                  hotpluggable: true
                  readOnly: true
          - removeVolumeOptions:
              dryRun:
              - "dryRun"
              - "dryRun"
              name: "name"
            addVolumeOptions:
              disk:
                shareable: true
                cache: "cache"
                dedicatedIOThread: true
                disk:
                  bus: "bus"
                  readonly: true
                  pciAddress: "pciAddress"
                lun:
                  bus: "bus"
                  readonly: true
                bootOrder: 3
                serial: "serial"
                io: "io"
                name: "name"
                tag: "tag"
                cdrom:
                  tray: "tray"
                  bus: "bus"
                  readonly: true
                blockSize:
                  custom:
                    physical: 9
                    logical: 7
                  matchVolume:
                    enabled: true
              dryRun:
              - "dryRun"
              - "dryRun"
              name: "name"
              volumeSource:
                dataVolume:
                  hotpluggable: true
                  name: "name"
                persistentVolumeClaim:
                  claimName: "claimName"
                  hotpluggable: true
                  readOnly: true
          volumeSnapshotStatuses:
          - reason: "reason"
            name: "name"
            enabled: false
          - reason: "reason"
            name: "name"
            enabled: false
          restoreInProgress: "restoreInProgress"
  kubevirt.io.api.core.v1.VirtualMachineSpec:
    type: "object"
    required:
    - "template"
    properties:
      dataVolumeTemplates:
        type: "array"
        description: "dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance\
          \ template can reference. DataVolumes in this list are dynamically created\
          \ for the VirtualMachine and are tied to the VirtualMachine's life-cycle."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.DataVolumeTemplateSpec"
      flavor:
        description: "FlavorMatcher references a flavor that is used to fill fields\
          \ in Template"
        $ref: "#/definitions/kubevirt.io.api.core.v1.FlavorMatcher"
      runStrategy:
        type: "string"
        description: "Running state indicates the requested running state of the VirtualMachineInstance\
          \ mutually exclusive with Running"
      running:
        type: "boolean"
        description: "Running controls whether the associatied VirtualMachineInstance\
          \ is created or not Mutually exclusive with RunStrategy"
      template:
        description: "Template is the direct specification of VirtualMachineInstance"
        $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineInstanceTemplateSpec"
    description: "VirtualMachineSpec describes how the proper VirtualMachine should\
      \ look like"
    example:
      flavor:
        kind: "kind"
        name: "name"
      running: true
      template:
        metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        spec:
          dnsPolicy: "ClusterFirst"
          livenessProbe:
            failureThreshold: 1
            periodSeconds: 6
            tcpSocket:
              host: "host"
            timeoutSeconds: 1
            guestAgentPing: {}
            successThreshold: 7
            initialDelaySeconds: 1
            exec:
              command:
              - "command"
              - "command"
            httpGet:
              path: "path"
              scheme: "HTTP"
              port: {}
              host: "host"
              httpHeaders:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
          terminationGracePeriodSeconds: 4
          dnsConfig:
            searches:
            - "searches"
            - "searches"
            nameservers:
            - "nameservers"
            - "nameservers"
            options:
            - name: "name"
              value: "value"
            - name: "name"
              value: "value"
          priorityClassName: "priorityClassName"
          volumes:
          - downwardAPI:
              volumeLabel: "volumeLabel"
              fields:
              - mode: 9
                path: "path"
                resourceFieldRef:
                  resource: "resource"
                  containerName: "containerName"
                fieldRef:
                  apiVersion: "apiVersion"
                  fieldPath: "fieldPath"
              - mode: 9
                path: "path"
                resourceFieldRef:
                  resource: "resource"
                  containerName: "containerName"
                fieldRef:
                  apiVersion: "apiVersion"
                  fieldPath: "fieldPath"
            cloudInitConfigDrive:
              networkDataSecretRef:
                name: "name"
              userData: "userData"
              networkData: "networkData"
              networkDataBase64: "networkDataBase64"
              secretRef:
                name: "name"
              userDataBase64: "userDataBase64"
            downwardMetrics: {}
            ephemeral:
              persistentVolumeClaim:
                claimName: "claimName"
                readOnly: true
            serviceAccount:
              serviceAccountName: "serviceAccountName"
            sysprep:
              configMap:
                name: "name"
              secret:
                name: "name"
            containerDisk:
              image: "image"
              imagePullPolicy: "Always"
              imagePullSecret: "imagePullSecret"
              path: "path"
            hostDisk:
              path: "path"
              shared: true
              type: "type"
            secret:
              secretName: "secretName"
              volumeLabel: "volumeLabel"
              optional: true
            cloudInitNoCloud:
              networkDataSecretRef:
                name: "name"
              userData: "userData"
              networkData: "networkData"
              networkDataBase64: "networkDataBase64"
              secretRef:
                name: "name"
              userDataBase64: "userDataBase64"
            configMap:
              volumeLabel: "volumeLabel"
              name: "name"
              optional: true
            dataVolume:
              hotpluggable: true
              name: "name"
            name: "name"
            persistentVolumeClaim:
              claimName: "claimName"
              hotpluggable: true
              readOnly: true
            emptyDisk: {}
          - downwardAPI:
              volumeLabel: "volumeLabel"
              fields:
              - mode: 9
                path: "path"
                resourceFieldRef:
                  resource: "resource"
                  containerName: "containerName"
                fieldRef:
                  apiVersion: "apiVersion"
                  fieldPath: "fieldPath"
              - mode: 9
                path: "path"
                resourceFieldRef:
                  resource: "resource"
                  containerName: "containerName"
                fieldRef:
                  apiVersion: "apiVersion"
                  fieldPath: "fieldPath"
            cloudInitConfigDrive:
              networkDataSecretRef:
                name: "name"
              userData: "userData"
              networkData: "networkData"
              networkDataBase64: "networkDataBase64"
              secretRef:
                name: "name"
              userDataBase64: "userDataBase64"
            downwardMetrics: {}
            ephemeral:
              persistentVolumeClaim:
                claimName: "claimName"
                readOnly: true
            serviceAccount:
              serviceAccountName: "serviceAccountName"
            sysprep:
              configMap:
                name: "name"
              secret:
                name: "name"
            containerDisk:
              image: "image"
              imagePullPolicy: "Always"
              imagePullSecret: "imagePullSecret"
              path: "path"
            hostDisk:
              path: "path"
              shared: true
              type: "type"
            secret:
              secretName: "secretName"
              volumeLabel: "volumeLabel"
              optional: true
            cloudInitNoCloud:
              networkDataSecretRef:
                name: "name"
              userData: "userData"
              networkData: "networkData"
              networkDataBase64: "networkDataBase64"
              secretRef:
                name: "name"
              userDataBase64: "userDataBase64"
            configMap:
              volumeLabel: "volumeLabel"
              name: "name"
              optional: true
            dataVolume:
              hotpluggable: true
              name: "name"
            name: "name"
            persistentVolumeClaim:
              claimName: "claimName"
              hotpluggable: true
              readOnly: true
            emptyDisk: {}
          networks:
          - pod:
              vmNetworkCIDR: "vmNetworkCIDR"
              vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
            name: "name"
            multus:
              default: true
              networkName: "networkName"
          - pod:
              vmNetworkCIDR: "vmNetworkCIDR"
              vmIPv6NetworkCIDR: "vmIPv6NetworkCIDR"
            name: "name"
            multus:
              default: true
              networkName: "networkName"
          nodeSelector:
            key: "nodeSelector"
          hostname: "hostname"
          tolerations:
          - effect: "NoExecute"
            tolerationSeconds: 5
            value: "value"
            key: "key"
            operator: "Equal"
          - effect: "NoExecute"
            tolerationSeconds: 5
            value: "value"
            key: "key"
            operator: "Equal"
          accessCredentials:
          - sshPublicKey:
              propagationMethod:
                configDrive: {}
                qemuGuestAgent:
                  users:
                  - "users"
                  - "users"
              source:
                secret:
                  secretName: "secretName"
            userPassword:
              propagationMethod:
                qemuGuestAgent: {}
              source:
                secret:
                  secretName: "secretName"
          - sshPublicKey:
              propagationMethod:
                configDrive: {}
                qemuGuestAgent:
                  users:
                  - "users"
                  - "users"
              source:
                secret:
                  secretName: "secretName"
            userPassword:
              propagationMethod:
                qemuGuestAgent: {}
              source:
                secret:
                  secretName: "secretName"
          startStrategy: "startStrategy"
          domain:
            features:
              smm:
                enabled: true
              kvm:
                hidden: true
              apic:
                endOfInterrupt: true
                enabled: true
              acpi:
                enabled: true
              pvspinlock:
                enabled: true
              hyperv:
                vpindex:
                  enabled: true
                ipi:
                  enabled: true
                reenlightenment:
                  enabled: true
                runtime:
                  enabled: true
                vendorid:
                  vendorid: "vendorid"
                  enabled: true
                evmcs:
                  enabled: true
                synictimer:
                  direct:
                    enabled: true
                  enabled: true
                spinlocks:
                  spinlocks: 1
                  enabled: true
                tlbflush:
                  enabled: true
                synic:
                  enabled: true
                relaxed:
                  enabled: true
                vapic:
                  enabled: true
                reset:
                  enabled: true
                frequencies:
                  enabled: true
            ioThreadsPolicy: "ioThreadsPolicy"
            memory:
              hugepages:
                pageSize: "pageSize"
              guest: {}
            devices:
              autoattachPodInterface: true
              interfaces:
              - dhcpOptions:
                  ntpServers:
                  - "ntpServers"
                  - "ntpServers"
                  tftpServerName: "tftpServerName"
                  bootFileName: "bootFileName"
                  privateOptions:
                  - value: "value"
                    option: 4
                  - value: "value"
                    option: 4
                slirp: {}
                macvtap: {}
                ports:
                - protocol: "protocol"
                  port: 7
                  name: "name"
                - protocol: "protocol"
                  port: 7
                  name: "name"
                macAddress: "macAddress"
                masquerade: {}
                bootOrder: 2
                name: "name"
                sriov: {}
                model: "model"
                pciAddress: "pciAddress"
                bridge: {}
                tag: "tag"
              - dhcpOptions:
                  ntpServers:
                  - "ntpServers"
                  - "ntpServers"
                  tftpServerName: "tftpServerName"
                  bootFileName: "bootFileName"
                  privateOptions:
                  - value: "value"
                    option: 4
                  - value: "value"
                    option: 4
                slirp: {}
                macvtap: {}
                ports:
                - protocol: "protocol"
                  port: 7
                  name: "name"
                - protocol: "protocol"
                  port: 7
                  name: "name"
                macAddress: "macAddress"
                masquerade: {}
                bootOrder: 2
                name: "name"
                sriov: {}
                model: "model"
                pciAddress: "pciAddress"
                bridge: {}
                tag: "tag"
              disks:
              - shareable: true
                cache: "cache"
                dedicatedIOThread: true
                disk:
                  bus: "bus"
                  readonly: true
                  pciAddress: "pciAddress"
                lun:
                  bus: "bus"
                  readonly: true
                bootOrder: 3
                serial: "serial"
                io: "io"
                name: "name"
                tag: "tag"
                cdrom:
                  tray: "tray"
                  bus: "bus"
                  readonly: true
                blockSize:
                  custom:
                    physical: 9
                    logical: 7
                  matchVolume:
                    enabled: true
              - shareable: true
                cache: "cache"
                dedicatedIOThread: true
                disk:
                  bus: "bus"
                  readonly: true
                  pciAddress: "pciAddress"
                lun:
                  bus: "bus"
                  readonly: true
                bootOrder: 3
                serial: "serial"
                io: "io"
                name: "name"
                tag: "tag"
                cdrom:
                  tray: "tray"
                  bus: "bus"
                  readonly: true
                blockSize:
                  custom:
                    physical: 9
                    logical: 7
                  matchVolume:
                    enabled: true
              inputs:
              - bus: "bus"
                name: "name"
                type: "type"
              - bus: "bus"
                name: "name"
                type: "type"
              sound:
                name: "name"
                model: "model"
              useVirtioTransitional: true
              rng: {}
              autoattachSerialConsole: true
              filesystems:
              - name: "name"
                virtiofs: {}
              - name: "name"
                virtiofs: {}
              hostDevices:
              - name: "name"
                tag: "tag"
                deviceName: "deviceName"
              - name: "name"
                tag: "tag"
                deviceName: "deviceName"
              networkInterfaceMultiqueue: true
              autoattachMemBalloon: true
              tpm: {}
              clientPassthrough: {}
              watchdog:
                i6300esb:
                  action: "action"
                name: "name"
              blockMultiQueue: true
              gpus:
              - name: "name"
                tag: "tag"
                virtualGPUOptions:
                  display:
                    enabled: true
                    ramFB:
                      enabled: true
                deviceName: "deviceName"
              - name: "name"
                tag: "tag"
                virtualGPUOptions:
                  display:
                    enabled: true
                    ramFB:
                      enabled: true
                deviceName: "deviceName"
              disableHotplug: true
              autoattachGraphicsDevice: true
            machine:
              type: "type"
            cpu:
              features:
              - name: "name"
                policy: "policy"
              - name: "name"
                policy: "policy"
              realtime:
                mask: "mask"
              cores: 5
              dedicatedCpuPlacement: true
              numa:
                guestMappingPassthrough: {}
              threads: 2
              model: "model"
              sockets: 5
              isolateEmulatorThread: true
            resources:
              overcommitGuestOverhead: true
              requests: {}
              limits: {}
            chassis:
              serial: "serial"
              asset: "asset"
              sku: "sku"
              version: "version"
              manufacturer: "manufacturer"
            clock:
              timer:
                rtc:
                  tickPolicy: "tickPolicy"
                  present: true
                  track: "track"
                kvm:
                  present: true
                hpet:
                  tickPolicy: "tickPolicy"
                  present: true
                pit:
                  tickPolicy: "tickPolicy"
                  present: true
                hyperv:
                  present: true
              utc:
                offsetSeconds: 1
              timezone: "timezone"
            firmware:
              serial: "serial"
              bootloader:
                bios:
                  useSerial: true
                efi:
                  secureBoot: true
              uuid: "uuid"
              kernelBoot:
                container:
                  image: "image"
                  imagePullPolicy: "Always"
                  imagePullSecret: "imagePullSecret"
                  initrdPath: "initrdPath"
                  kernelPath: "kernelPath"
                kernelArgs: "kernelArgs"
            launchSecurity:
              sev: {}
          readinessProbe:
            failureThreshold: 1
            periodSeconds: 6
            tcpSocket:
              host: "host"
            timeoutSeconds: 1
            guestAgentPing: {}
            successThreshold: 7
            initialDelaySeconds: 1
            exec:
              command:
              - "command"
              - "command"
            httpGet:
              path: "path"
              scheme: "HTTP"
              port: {}
              host: "host"
              httpHeaders:
              - name: "name"
                value: "value"
              - name: "name"
                value: "value"
          subdomain: "subdomain"
          evictionStrategy: "evictionStrategy"
          schedulerName: "schedulerName"
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  matchFields:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                - matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  matchFields:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
              preferredDuringSchedulingIgnoredDuringExecution:
              - preference:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  matchFields:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                weight: 0
              - preference:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  matchFields:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "DoesNotExist"
                weight: 0
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              - labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                weight: 6
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                weight: 6
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              - labelSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                namespaceSelector:
                  matchExpressions:
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  - values:
                    - "values"
                    - "values"
                    key: "key"
                    operator: "operator"
                  matchLabels:
                    key: "matchLabels"
                topologyKey: "topologyKey"
                namespaces:
                - "namespaces"
                - "namespaces"
              preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                weight: 6
              - podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  namespaceSelector:
                    matchExpressions:
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    - values:
                      - "values"
                      - "values"
                      key: "key"
                      operator: "operator"
                    matchLabels:
                      key: "matchLabels"
                  topologyKey: "topologyKey"
                  namespaces:
                  - "namespaces"
                  - "namespaces"
                weight: 6
      dataVolumeTemplates:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          finalCheckpoint: true
          preallocation: true
          priorityClassName: "priorityClassName"
          checkpoints:
          - current: "current"
            previous: "previous"
          - current: "current"
            previous: "previous"
          source:
            s3:
              secretRef: "secretRef"
              certConfigMap: "certConfigMap"
              url: "url"
            registry:
              imageStream: "imageStream"
              pullMethod: "pullMethod"
              secretRef: "secretRef"
              certConfigMap: "certConfigMap"
              url: "url"
            vddk:
              backingFile: "backingFile"
              initImageURL: "initImageURL"
              secretRef: "secretRef"
              thumbprint: "thumbprint"
              uuid: "uuid"
              url: "url"
            blank: {}
            imageio:
              secretRef: "secretRef"
              certConfigMap: "certConfigMap"
              diskId: "diskId"
              url: "url"
            upload: {}
            http:
              secretExtraHeaders:
              - "secretExtraHeaders"
              - "secretExtraHeaders"
              secretRef: "secretRef"
              certConfigMap: "certConfigMap"
              extraHeaders:
              - "extraHeaders"
              - "extraHeaders"
              url: "url"
            pvc:
              name: "name"
              namespace: "namespace"
          storage:
            storageClassName: "storageClassName"
            volumeName: "volumeName"
            resources:
              requests: {}
              limits:
                key: {}
            selector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            accessModes:
            - "accessModes"
            - "accessModes"
            dataSource:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeMode: "volumeMode"
          pvc:
            storageClassName: "storageClassName"
            dataSourceRef:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeName: "volumeName"
            resources:
              requests: {}
              limits:
                key: {}
            selector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            accessModes:
            - "accessModes"
            - "accessModes"
            dataSource:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeMode: "volumeMode"
          sourceRef:
            kind: "kind"
            name: "name"
            namespace: "namespace"
          contentType: "contentType"
        status: {}
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          finalCheckpoint: true
          preallocation: true
          priorityClassName: "priorityClassName"
          checkpoints:
          - current: "current"
            previous: "previous"
          - current: "current"
            previous: "previous"
          source:
            s3:
              secretRef: "secretRef"
              certConfigMap: "certConfigMap"
              url: "url"
            registry:
              imageStream: "imageStream"
              pullMethod: "pullMethod"
              secretRef: "secretRef"
              certConfigMap: "certConfigMap"
              url: "url"
            vddk:
              backingFile: "backingFile"
              initImageURL: "initImageURL"
              secretRef: "secretRef"
              thumbprint: "thumbprint"
              uuid: "uuid"
              url: "url"
            blank: {}
            imageio:
              secretRef: "secretRef"
              certConfigMap: "certConfigMap"
              diskId: "diskId"
              url: "url"
            upload: {}
            http:
              secretExtraHeaders:
              - "secretExtraHeaders"
              - "secretExtraHeaders"
              secretRef: "secretRef"
              certConfigMap: "certConfigMap"
              extraHeaders:
              - "extraHeaders"
              - "extraHeaders"
              url: "url"
            pvc:
              name: "name"
              namespace: "namespace"
          storage:
            storageClassName: "storageClassName"
            volumeName: "volumeName"
            resources:
              requests: {}
              limits:
                key: {}
            selector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            accessModes:
            - "accessModes"
            - "accessModes"
            dataSource:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeMode: "volumeMode"
          pvc:
            storageClassName: "storageClassName"
            dataSourceRef:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeName: "volumeName"
            resources:
              requests: {}
              limits:
                key: {}
            selector:
              matchExpressions:
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              - values:
                - "values"
                - "values"
                key: "key"
                operator: "operator"
              matchLabels:
                key: "matchLabels"
            accessModes:
            - "accessModes"
            - "accessModes"
            dataSource:
              apiGroup: "apiGroup"
              kind: "kind"
              name: "name"
            volumeMode: "volumeMode"
          sourceRef:
            kind: "kind"
            name: "name"
            namespace: "namespace"
          contentType: "contentType"
        status: {}
      runStrategy: "runStrategy"
  kubevirt.io.api.core.v1.VirtualMachineStartFailure:
    type: "object"
    properties:
      consecutiveFailCount:
        type: "integer"
        format: "int32"
      lastFailedVMIUID:
        type: "string"
      retryAfterTimestamp:
        $ref: "#/definitions/k8s.io.v1.Time"
    description: "VirtualMachineStartFailure tracks VMIs which failed to transition\
      \ successfully to running using the VM status"
    example:
      consecutiveFailCount: 0
      lastFailedVMIUID: "lastFailedVMIUID"
  kubevirt.io.api.core.v1.VirtualMachineStateChangeRequest:
    type: "object"
    required:
    - "action"
    properties:
      action:
        type: "string"
        description: "Indicates the type of action that is requested. e.g. Start or\
          \ Stop"
        default: ""
      data:
        type: "object"
        description: "Provides additional data in order to perform the Action"
        additionalProperties:
          type: "string"
          default: ""
      uid:
        type: "string"
        description: "Indicates the UUID of an existing Virtual Machine Instance that\
          \ this change request applies to -- if applicable"
    example:
      uid: "uid"
      data:
        key: "data"
      action: "action"
  kubevirt.io.api.core.v1.VirtualMachineStatus:
    type: "object"
    properties:
      conditions:
        type: "array"
        description: "Hold the state information of the VirtualMachine and its VirtualMachineInstance"
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineCondition"
      created:
        type: "boolean"
        description: "Created indicates if the virtual machine is created in the cluster"
      printableStatus:
        type: "string"
        description: "PrintableStatus is a human readable, high-level representation\
          \ of the status of the virtual machine"
      ready:
        type: "boolean"
        description: "Ready indicates if the virtual machine is running and ready"
      restoreInProgress:
        type: "string"
        description: "RestoreInProgress is the name of the VirtualMachineRestore currently\
          \ executing"
      snapshotInProgress:
        type: "string"
        description: "SnapshotInProgress is the name of the VirtualMachineSnapshot\
          \ currently executing"
      startFailure:
        description: "StartFailure tracks consecutive VMI startup failures for the\
          \ purposes of crash loop backoffs"
        $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineStartFailure"
      stateChangeRequests:
        type: "array"
        description: "StateChangeRequests indicates a list of actions that should\
          \ be taken on a VMI e.g. stop a specific VMI then start a new one."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineStateChangeRequest"
      volumeRequests:
        type: "array"
        description: "VolumeRequests indicates a list of volumes add or remove from\
          \ the VMI template and hotplug on an active running VMI."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VirtualMachineVolumeRequest"
        x-kubernetes-list-type: "atomic"
      volumeSnapshotStatuses:
        type: "array"
        description: "VolumeSnapshotStatuses indicates a list of statuses whether\
          \ snapshotting is supported by each volume."
        items:
          $ref: "#/definitions/kubevirt.io.api.core.v1.VolumeSnapshotStatus"
    description: "VirtualMachineStatus represents the status returned by the controller\
      \ to describe how the VirtualMachine is doing"
    example:
      startFailure:
        consecutiveFailCount: 0
        lastFailedVMIUID: "lastFailedVMIUID"
      snapshotInProgress: "snapshotInProgress"
      created: true
      ready: true
      printableStatus: "printableStatus"
      conditions:
      - reason: "reason"
        message: "message"
        type: "type"
        lastProbeTime: {}
        status: "status"
      - reason: "reason"
        message: "message"
        type: "type"
        lastProbeTime: {}
        status: "status"
      stateChangeRequests:
      - uid: "uid"
        data:
          key: "data"
        action: "action"
      - uid: "uid"
        data:
          key: "data"
        action: "action"
      volumeRequests:
      - removeVolumeOptions:
          dryRun:
          - "dryRun"
          - "dryRun"
          name: "name"
        addVolumeOptions:
          disk:
            shareable: true
            cache: "cache"
            dedicatedIOThread: true
            disk:
              bus: "bus"
              readonly: true
              pciAddress: "pciAddress"
            lun:
              bus: "bus"
              readonly: true
            bootOrder: 3
            serial: "serial"
            io: "io"
            name: "name"
            tag: "tag"
            cdrom:
              tray: "tray"
              bus: "bus"
              readonly: true
            blockSize:
              custom:
                physical: 9
                logical: 7
              matchVolume:
                enabled: true
          dryRun:
          - "dryRun"
          - "dryRun"
          name: "name"
          volumeSource:
            dataVolume:
              hotpluggable: true
              name: "name"
            persistentVolumeClaim:
              claimName: "claimName"
              hotpluggable: true
              readOnly: true
      - removeVolumeOptions:
          dryRun:
          - "dryRun"
          - "dryRun"
          name: "name"
        addVolumeOptions:
          disk:
            shareable: true
            cache: "cache"
            dedicatedIOThread: true
            disk:
              bus: "bus"
              readonly: true
              pciAddress: "pciAddress"
            lun:
              bus: "bus"
              readonly: true
            bootOrder: 3
            serial: "serial"
            io: "io"
            name: "name"
            tag: "tag"
            cdrom:
              tray: "tray"
              bus: "bus"
              readonly: true
            blockSize:
              custom:
                physical: 9
                logical: 7
              matchVolume:
                enabled: true
          dryRun:
          - "dryRun"
          - "dryRun"
          name: "name"
          volumeSource:
            dataVolume:
              hotpluggable: true
              name: "name"
            persistentVolumeClaim:
              claimName: "claimName"
              hotpluggable: true
              readOnly: true
      volumeSnapshotStatuses:
      - reason: "reason"
        name: "name"
        enabled: false
      - reason: "reason"
        name: "name"
        enabled: false
      restoreInProgress: "restoreInProgress"
  kubevirt.io.api.core.v1.VirtualMachineVolumeRequest:
    type: "object"
    properties:
      addVolumeOptions:
        description: "AddVolumeOptions when set indicates a volume should be added.\
          \ The details within this field specify how to add the volume"
        $ref: "#/definitions/kubevirt.io.api.core.v1.AddVolumeOptions"
      removeVolumeOptions:
        description: "RemoveVolumeOptions when set indicates a volume should be removed.\
          \ The details within this field specify how to add the volume"
        $ref: "#/definitions/kubevirt.io.api.core.v1.RemoveVolumeOptions"
    example:
      removeVolumeOptions:
        dryRun:
        - "dryRun"
        - "dryRun"
        name: "name"
      addVolumeOptions:
        disk:
          shareable: true
          cache: "cache"
          dedicatedIOThread: true
          disk:
            bus: "bus"
            readonly: true
            pciAddress: "pciAddress"
          lun:
            bus: "bus"
            readonly: true
          bootOrder: 3
          serial: "serial"
          io: "io"
          name: "name"
          tag: "tag"
          cdrom:
            tray: "tray"
            bus: "bus"
            readonly: true
          blockSize:
            custom:
              physical: 9
              logical: 7
            matchVolume:
              enabled: true
        dryRun:
        - "dryRun"
        - "dryRun"
        name: "name"
        volumeSource:
          dataVolume:
            hotpluggable: true
            name: "name"
          persistentVolumeClaim:
            claimName: "claimName"
            hotpluggable: true
            readOnly: true
  kubevirt.io.api.core.v1.Volume:
    type: "object"
    required:
    - "name"
    properties:
      cloudInitConfigDrive:
        description: "CloudInitConfigDrive represents a cloud-init Config Drive user-data\
          \ source. The Config Drive data will be added as a disk to the vmi. A proper\
          \ cloud-init installation is required inside the guest. More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html"
        $ref: "#/definitions/kubevirt.io.api.core.v1.CloudInitConfigDriveSource"
      cloudInitNoCloud:
        description: "CloudInitNoCloud represents a cloud-init NoCloud user-data source.\
          \ The NoCloud data will be added as a disk to the vmi. A proper cloud-init\
          \ installation is required inside the guest. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html"
        $ref: "#/definitions/kubevirt.io.api.core.v1.CloudInitNoCloudSource"
      configMap:
        description: "ConfigMapSource represents a reference to a ConfigMap in the\
          \ same namespace. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/"
        $ref: "#/definitions/kubevirt.io.api.core.v1.ConfigMapVolumeSource"
      containerDisk:
        description: "ContainerDisk references a docker image, embedding a qcow or\
          \ raw disk. More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html"
        $ref: "#/definitions/kubevirt.io.api.core.v1.ContainerDiskSource"
      dataVolume:
        description: "DataVolume represents the dynamic creation a PVC for this volume\
          \ as well as the process of populating that PVC with a disk image."
        $ref: "#/definitions/kubevirt.io.api.core.v1.DataVolumeSource"
      downwardAPI:
        description: "DownwardAPI represents downward API about the pod that should\
          \ populate this volume"
        $ref: "#/definitions/kubevirt.io.api.core.v1.DownwardAPIVolumeSource"
      downwardMetrics:
        description: "DownwardMetrics adds a very small disk to VMIs which contains\
          \ a limited view of host and guest metrics. The disk content is compatible\
          \ with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics."
        $ref: "#/definitions/kubevirt.io.api.core.v1.DownwardMetricsVolumeSource"
      emptyDisk:
        description: "EmptyDisk represents a temporary disk which shares the vmis\
          \ lifecycle. More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html"
        $ref: "#/definitions/kubevirt.io.api.core.v1.EmptyDiskSource"
      ephemeral:
        description: "Ephemeral is a special volume source that \"wraps\" specified\
          \ source and provides copy-on-write image on top of it."
        $ref: "#/definitions/kubevirt.io.api.core.v1.EphemeralVolumeSource"
      hostDisk:
        description: "HostDisk represents a disk created on the cluster level"
        $ref: "#/definitions/kubevirt.io.api.core.v1.HostDisk"
      name:
        type: "string"
        description: "Volume's name. Must be a DNS_LABEL and unique within the vmi.\
          \ More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        default: ""
      persistentVolumeClaim:
        description: "PersistentVolumeClaimVolumeSource represents a reference to\
          \ a PersistentVolumeClaim in the same namespace. Directly attached to the\
          \ vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        $ref: "#/definitions/kubevirt.io.api.core.v1.PersistentVolumeClaimVolumeSource"
      secret:
        description: "SecretVolumeSource represents a reference to a secret data in\
          \ the same namespace. More info: https://kubernetes.io/docs/concepts/configuration/secret/"
        $ref: "#/definitions/kubevirt.io.api.core.v1.SecretVolumeSource"
      serviceAccount:
        description: "ServiceAccountVolumeSource represents a reference to a service\
          \ account. There can only be one volume of this type! More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
        $ref: "#/definitions/kubevirt.io.api.core.v1.ServiceAccountVolumeSource"
      sysprep:
        description: "Represents a Sysprep volume source."
        $ref: "#/definitions/kubevirt.io.api.core.v1.SysprepSource"
    description: "Volume represents a named volume in a vmi."
    example:
      downwardAPI:
        volumeLabel: "volumeLabel"
        fields:
        - mode: 9
          path: "path"
          resourceFieldRef:
            resource: "resource"
            containerName: "containerName"
          fieldRef:
            apiVersion: "apiVersion"
            fieldPath: "fieldPath"
        - mode: 9
          path: "path"
          resourceFieldRef:
            resource: "resource"
            containerName: "containerName"
          fieldRef:
            apiVersion: "apiVersion"
            fieldPath: "fieldPath"
      cloudInitConfigDrive:
        networkDataSecretRef:
          name: "name"
        userData: "userData"
        networkData: "networkData"
        networkDataBase64: "networkDataBase64"
        secretRef:
          name: "name"
        userDataBase64: "userDataBase64"
      downwardMetrics: {}
      ephemeral:
        persistentVolumeClaim:
          claimName: "claimName"
          readOnly: true
      serviceAccount:
        serviceAccountName: "serviceAccountName"
      sysprep:
        configMap:
          name: "name"
        secret:
          name: "name"
      containerDisk:
        image: "image"
        imagePullPolicy: "Always"
        imagePullSecret: "imagePullSecret"
        path: "path"
      hostDisk:
        path: "path"
        shared: true
        type: "type"
      secret:
        secretName: "secretName"
        volumeLabel: "volumeLabel"
        optional: true
      cloudInitNoCloud:
        networkDataSecretRef:
          name: "name"
        userData: "userData"
        networkData: "networkData"
        networkDataBase64: "networkDataBase64"
        secretRef:
          name: "name"
        userDataBase64: "userDataBase64"
      configMap:
        volumeLabel: "volumeLabel"
        name: "name"
        optional: true
      dataVolume:
        hotpluggable: true
        name: "name"
      name: "name"
      persistentVolumeClaim:
        claimName: "claimName"
        hotpluggable: true
        readOnly: true
      emptyDisk: {}
  kubevirt.io.api.core.v1.VolumeSnapshotStatus:
    type: "object"
    required:
    - "enabled"
    - "name"
    properties:
      enabled:
        type: "boolean"
        description: "True if the volume supports snapshotting"
        default: false
      name:
        type: "string"
        description: "Volume name"
        default: ""
      reason:
        type: "string"
        description: "Empty if snapshotting is enabled, contains reason otherwise"
    example:
      reason: "reason"
      name: "name"
      enabled: false
  kubevirt.io.api.core.v1.VolumeStatus:
    type: "object"
    required:
    - "name"
    - "target"
    properties:
      hotplugVolume:
        description: "If the volume is hotplug, this will contain the hotplug status."
        $ref: "#/definitions/kubevirt.io.api.core.v1.HotplugVolumeStatus"
      message:
        type: "string"
        description: "Message is a detailed message about the current hotplug volume\
          \ phase"
      name:
        type: "string"
        description: "Name is the name of the volume"
        default: ""
      persistentVolumeClaimInfo:
        description: "PersistentVolumeClaimInfo is information about the PVC that\
          \ handler requires during start flow"
        $ref: "#/definitions/kubevirt.io.api.core.v1.PersistentVolumeClaimInfo"
      phase:
        type: "string"
        description: "Phase is the phase"
      reason:
        type: "string"
        description: "Reason is a brief description of why we are in the current hotplug\
          \ volume phase"
      size:
        type: "integer"
        format: "int64"
        description: "Represents the size of the volume"
      target:
        type: "string"
        description: "Target is the target name used when adding the volume to the\
          \ VM, eg: vda"
        default: ""
    description: "VolumeStatus represents information about the status of volumes\
      \ attached to the VirtualMachineInstance."
    example:
      phase: "phase"
      reason: "reason"
      size: 3
      hotplugVolume:
        attachPodUID: "attachPodUID"
        attachPodName: "attachPodName"
      name: "name"
      message: "message"
      persistentVolumeClaimInfo:
        filesystemOverhead: "filesystemOverhead"
        preallocated: true
        accessModes:
        - "accessModes"
        - "accessModes"
        requests: {}
        capacity: {}
        volumeMode: "volumeMode"
      target: "target"
  kubevirt.io.api.core.v1.Watchdog:
    type: "object"
    required:
    - "name"
    properties:
      i6300esb:
        description: "i6300esb watchdog device."
        $ref: "#/definitions/kubevirt.io.api.core.v1.I6300ESBWatchdog"
      name:
        type: "string"
        description: "Name of the watchdog."
        default: ""
    description: "Named watchdog device."
    example:
      i6300esb:
        action: "action"
      name: "name"
  kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeBlankImage:
    type: "object"
    description: "DataVolumeBlankImage provides the parameters to create a new raw\
      \ blank image for the PVC"
  kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeCheckpoint:
    type: "object"
    required:
    - "current"
    - "previous"
    properties:
      current:
        type: "string"
        description: "Current is the identifier of the snapshot created for this checkpoint."
        default: ""
      previous:
        type: "string"
        description: "Previous is the identifier of the snapshot from the previous\
          \ checkpoint."
        default: ""
    description: "DataVolumeCheckpoint defines a stage in a warm migration."
    example:
      current: "current"
      previous: "previous"
  kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSource:
    type: "object"
    properties:
      blank:
        $ref: "#/definitions/kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeBlankImage"
      http:
        $ref: "#/definitions/kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceHTTP"
      imageio:
        $ref: "#/definitions/kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceImageIO"
      pvc:
        $ref: "#/definitions/kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourcePVC"
      registry:
        $ref: "#/definitions/kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceRegistry"
      s3:
        $ref: "#/definitions/kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceS3"
      upload:
        $ref: "#/definitions/kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceUpload"
      vddk:
        $ref: "#/definitions/kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceVDDK"
    description: "DataVolumeSource represents the source for our Data Volume, this\
      \ can be HTTP, Imageio, S3, Registry or an existing PVC"
    example:
      s3:
        secretRef: "secretRef"
        certConfigMap: "certConfigMap"
        url: "url"
      registry:
        imageStream: "imageStream"
        pullMethod: "pullMethod"
        secretRef: "secretRef"
        certConfigMap: "certConfigMap"
        url: "url"
      vddk:
        backingFile: "backingFile"
        initImageURL: "initImageURL"
        secretRef: "secretRef"
        thumbprint: "thumbprint"
        uuid: "uuid"
        url: "url"
      blank: {}
      imageio:
        secretRef: "secretRef"
        certConfigMap: "certConfigMap"
        diskId: "diskId"
        url: "url"
      upload: {}
      http:
        secretExtraHeaders:
        - "secretExtraHeaders"
        - "secretExtraHeaders"
        secretRef: "secretRef"
        certConfigMap: "certConfigMap"
        extraHeaders:
        - "extraHeaders"
        - "extraHeaders"
        url: "url"
      pvc:
        name: "name"
        namespace: "namespace"
  kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceHTTP:
    type: "object"
    required:
    - "url"
    properties:
      certConfigMap:
        type: "string"
        description: "CertConfigMap is a configmap reference, containing a Certificate\
          \ Authority(CA) public key, and a base64 encoded pem certificate"
      extraHeaders:
        type: "array"
        description: "ExtraHeaders is a list of strings containing extra headers to\
          \ include with HTTP transfer requests"
        items:
          type: "string"
          default: ""
      secretExtraHeaders:
        type: "array"
        description: "SecretExtraHeaders is a list of Secret references, each containing\
          \ an extra HTTP header that may include sensitive information"
        items:
          type: "string"
          default: ""
      secretRef:
        type: "string"
        description: "SecretRef A Secret reference, the secret should contain accessKeyId\
          \ (user name) base64 encoded, and secretKey (password) also base64 encoded"
      url:
        type: "string"
        description: "URL is the URL of the http(s) endpoint"
        default: ""
    description: "DataVolumeSourceHTTP can be either an http or https endpoint, with\
      \ an optional basic auth user name and password, and an optional configmap containing\
      \ additional CAs"
    example:
      secretExtraHeaders:
      - "secretExtraHeaders"
      - "secretExtraHeaders"
      secretRef: "secretRef"
      certConfigMap: "certConfigMap"
      extraHeaders:
      - "extraHeaders"
      - "extraHeaders"
      url: "url"
  kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceImageIO:
    type: "object"
    required:
    - "diskId"
    - "url"
    properties:
      certConfigMap:
        type: "string"
        description: "CertConfigMap provides a reference to the CA cert"
      diskId:
        type: "string"
        description: "DiskID provides id of a disk to be imported"
        default: ""
      secretRef:
        type: "string"
        description: "SecretRef provides the secret reference needed to access the\
          \ ovirt-engine"
      url:
        type: "string"
        description: "URL is the URL of the ovirt-engine"
        default: ""
    description: "DataVolumeSourceImageIO provides the parameters to create a Data\
      \ Volume from an imageio source"
    example:
      secretRef: "secretRef"
      certConfigMap: "certConfigMap"
      diskId: "diskId"
      url: "url"
  kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourcePVC:
    type: "object"
    required:
    - "name"
    - "namespace"
    properties:
      name:
        type: "string"
        description: "The name of the source PVC"
        default: ""
      namespace:
        type: "string"
        description: "The namespace of the source PVC"
        default: ""
    description: "DataVolumeSourcePVC provides the parameters to create a Data Volume\
      \ from an existing PVC"
    example:
      name: "name"
      namespace: "namespace"
  kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceRef:
    type: "object"
    required:
    - "kind"
    - "name"
    properties:
      kind:
        type: "string"
        description: "The kind of the source reference, currently only \"DataSource\"\
          \ is supported"
        default: ""
      name:
        type: "string"
        description: "The name of the source reference"
        default: ""
      namespace:
        type: "string"
        description: "The namespace of the source reference, defaults to the DataVolume\
          \ namespace"
    description: "DataVolumeSourceRef defines an indirect reference to the source\
      \ of data for the DataVolume"
    example:
      kind: "kind"
      name: "name"
      namespace: "namespace"
  kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceRegistry:
    type: "object"
    properties:
      certConfigMap:
        type: "string"
        description: "CertConfigMap provides a reference to the Registry certs"
      imageStream:
        type: "string"
        description: "ImageStream is the name of image stream for import"
      pullMethod:
        type: "string"
        description: "PullMethod can be either \"pod\" (default import), or \"node\"\
          \ (node docker cache based import)"
      secretRef:
        type: "string"
        description: "SecretRef provides the secret reference needed to access the\
          \ Registry source"
      url:
        type: "string"
        description: "URL is the url of the registry source (starting with the scheme:\
          \ docker, oci-archive)"
    description: "DataVolumeSourceRegistry provides the parameters to create a Data\
      \ Volume from an registry source"
    example:
      imageStream: "imageStream"
      pullMethod: "pullMethod"
      secretRef: "secretRef"
      certConfigMap: "certConfigMap"
      url: "url"
  kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceS3:
    type: "object"
    required:
    - "url"
    properties:
      certConfigMap:
        type: "string"
        description: "CertConfigMap is a configmap reference, containing a Certificate\
          \ Authority(CA) public key, and a base64 encoded pem certificate"
      secretRef:
        type: "string"
        description: "SecretRef provides the secret reference needed to access the\
          \ S3 source"
      url:
        type: "string"
        description: "URL is the url of the S3 source"
        default: ""
    description: "DataVolumeSourceS3 provides the parameters to create a Data Volume\
      \ from an S3 source"
    example:
      secretRef: "secretRef"
      certConfigMap: "certConfigMap"
      url: "url"
  kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceUpload:
    type: "object"
    description: "DataVolumeSourceUpload provides the parameters to create a Data\
      \ Volume by uploading the source"
  kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceVDDK:
    type: "object"
    properties:
      backingFile:
        type: "string"
        description: "BackingFile is the path to the virtual hard disk to migrate\
          \ from vCenter/ESXi"
      initImageURL:
        type: "string"
        description: "InitImageURL is an optional URL to an image containing an extracted\
          \ VDDK library, overrides v2v-vmware config map"
      secretRef:
        type: "string"
        description: "SecretRef provides a reference to a secret containing the username\
          \ and password needed to access the vCenter or ESXi host"
      thumbprint:
        type: "string"
        description: "Thumbprint is the certificate thumbprint of the vCenter or ESXi\
          \ host"
      url:
        type: "string"
        description: "URL is the URL of the vCenter or ESXi host with the VM to migrate"
      uuid:
        type: "string"
        description: "UUID is the UUID of the virtual machine that the backing file\
          \ is attached to in vCenter/ESXi"
    description: "DataVolumeSourceVDDK provides the parameters to create a Data Volume\
      \ from a Vmware source"
    example:
      backingFile: "backingFile"
      initImageURL: "initImageURL"
      secretRef: "secretRef"
      thumbprint: "thumbprint"
      uuid: "uuid"
      url: "url"
  kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSpec:
    type: "object"
    properties:
      checkpoints:
        type: "array"
        description: "Checkpoints is a list of DataVolumeCheckpoints, representing\
          \ stages in a multistage import."
        items:
          $ref: "#/definitions/kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeCheckpoint"
      contentType:
        type: "string"
        description: "DataVolumeContentType options: \"kubevirt\", \"archive\""
      finalCheckpoint:
        type: "boolean"
        description: "FinalCheckpoint indicates whether the current DataVolumeCheckpoint\
          \ is the final checkpoint."
      preallocation:
        type: "boolean"
        description: "Preallocation controls whether storage for DataVolumes should\
          \ be allocated in advance."
      priorityClassName:
        type: "string"
        description: "PriorityClassName for Importer, Cloner and Uploader pod"
      pvc:
        description: "PVC is the PVC specification"
        $ref: "#/definitions/k8s.io.v1.PersistentVolumeClaimSpec"
      source:
        description: "Source is the src of the data for the requested DataVolume"
        $ref: "#/definitions/kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSource"
      sourceRef:
        description: "SourceRef is an indirect reference to the source of data for\
          \ the requested DataVolume"
        $ref: "#/definitions/kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.DataVolumeSourceRef"
      storage:
        description: "Storage is the requested storage specification"
        $ref: "#/definitions/kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.StorageSpec"
    description: "DataVolumeSpec defines the DataVolume type specification"
    example:
      finalCheckpoint: true
      preallocation: true
      priorityClassName: "priorityClassName"
      checkpoints:
      - current: "current"
        previous: "previous"
      - current: "current"
        previous: "previous"
      source:
        s3:
          secretRef: "secretRef"
          certConfigMap: "certConfigMap"
          url: "url"
        registry:
          imageStream: "imageStream"
          pullMethod: "pullMethod"
          secretRef: "secretRef"
          certConfigMap: "certConfigMap"
          url: "url"
        vddk:
          backingFile: "backingFile"
          initImageURL: "initImageURL"
          secretRef: "secretRef"
          thumbprint: "thumbprint"
          uuid: "uuid"
          url: "url"
        blank: {}
        imageio:
          secretRef: "secretRef"
          certConfigMap: "certConfigMap"
          diskId: "diskId"
          url: "url"
        upload: {}
        http:
          secretExtraHeaders:
          - "secretExtraHeaders"
          - "secretExtraHeaders"
          secretRef: "secretRef"
          certConfigMap: "certConfigMap"
          extraHeaders:
          - "extraHeaders"
          - "extraHeaders"
          url: "url"
        pvc:
          name: "name"
          namespace: "namespace"
      storage:
        storageClassName: "storageClassName"
        volumeName: "volumeName"
        resources:
          requests: {}
          limits:
            key: {}
        selector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        accessModes:
        - "accessModes"
        - "accessModes"
        dataSource:
          apiGroup: "apiGroup"
          kind: "kind"
          name: "name"
        volumeMode: "volumeMode"
      pvc:
        storageClassName: "storageClassName"
        dataSourceRef:
          apiGroup: "apiGroup"
          kind: "kind"
          name: "name"
        volumeName: "volumeName"
        resources:
          requests: {}
          limits:
            key: {}
        selector:
          matchExpressions:
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          - values:
            - "values"
            - "values"
            key: "key"
            operator: "operator"
          matchLabels:
            key: "matchLabels"
        accessModes:
        - "accessModes"
        - "accessModes"
        dataSource:
          apiGroup: "apiGroup"
          kind: "kind"
          name: "name"
        volumeMode: "volumeMode"
      sourceRef:
        kind: "kind"
        name: "name"
        namespace: "namespace"
      contentType: "contentType"
  kubevirt.io.containerized-data-importer-api.pkg.apis.core.v1beta1.StorageSpec:
    type: "object"
    properties:
      accessModes:
        type: "array"
        description: "AccessModes contains the desired access modes the volume should\
          \ have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1"
        items:
          type: "string"
          default: ""
      dataSource:
        description: "This field can be used to specify either: * An existing VolumeSnapshot\
          \ object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim)\
          \ * An existing custom resource that implements data population (Alpha)\
          \ In order to use custom resource types that implement data population,\
          \ the AnyVolumeDataSource feature gate must be enabled. If the provisioner\
          \ or an external controller can support the specified data source, it will\
          \ create a new volume based on the contents of the specified data source."
        $ref: "#/definitions/k8s.io.v1.TypedLocalObjectReference"
      resources:
        description: "Resources represents the minimum resources the volume should\
          \ have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
        $ref: "#/definitions/k8s.io.v1.ResourceRequirements"
      selector:
        description: "A label query over volumes to consider for binding."
        $ref: "#/definitions/k8s.io.v1.LabelSelector"
      storageClassName:
        type: "string"
        description: "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
      volumeMode:
        type: "string"
        description: "volumeMode defines what type of volume is required by the claim.\
          \ Value of Filesystem is implied when not included in claim spec."
      volumeName:
        type: "string"
        description: "VolumeName is the binding reference to the PersistentVolume\
          \ backing this claim."
    description: "StorageSpec defines the Storage type specification"
    example:
      storageClassName: "storageClassName"
      volumeName: "volumeName"
      resources:
        requests: {}
        limits:
          key: {}
      selector:
        matchExpressions:
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "operator"
        - values:
          - "values"
          - "values"
          key: "key"
          operator: "operator"
        matchLabels:
          key: "matchLabels"
      accessModes:
      - "accessModes"
      - "accessModes"
      dataSource:
        apiGroup: "apiGroup"
        kind: "kind"
        name: "name"
      volumeMode: "volumeMode"
  network.harvesterhci.io.v1beta1.ClusterNetwork:
    type: "object"
    required:
    - "apiVersion"
    - "enable"
    - "kind"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      config:
        type: "object"
        additionalProperties:
          type: "string"
          default: ""
      description:
        type: "string"
      enable:
        type: "boolean"
        default: false
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      enable: false
      kind: "kind"
      description: "description"
      config:
        key: "config"
  network.harvesterhci.io.v1beta1.ClusterNetworkList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    - "metadata"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/network.harvesterhci.io.v1beta1.ClusterNetwork"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "ClusterNetworkList is a list of ClusterNetwork resources"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        enable: false
        kind: "kind"
        description: "description"
        config:
          key: "config"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        enable: false
        kind: "kind"
        description: "description"
        config:
          key: "config"
  network.harvesterhci.io.v1beta1.Condition:
    type: "object"
    required:
    - "status"
    - "type"
    properties:
      lastTransitionTime:
        type: "string"
        description: "Last time the condition transitioned from one status to another."
      lastUpdateTime:
        type: "string"
        description: "The last time this condition was updated."
      message:
        type: "string"
        description: "Human-readable message indicating details about last transition"
      reason:
        type: "string"
        description: "The reason for the condition's last transition."
      status:
        type: "string"
        description: "Status of the condition, one of True, False, Unknown."
        default: ""
      type:
        type: "string"
        description: "Type of the condition."
        default: ""
    example:
      reason: "reason"
      lastTransitionTime: "lastTransitionTime"
      message: "message"
      type: "type"
      lastUpdateTime: "lastUpdateTime"
      status: "status"
  network.harvesterhci.io.v1beta1.LinkStatus:
    type: "object"
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/network.harvesterhci.io.v1beta1.Condition"
      index:
        type: "integer"
        format: "int32"
      ipv4Address:
        type: "array"
        items:
          type: "string"
          default: ""
      mac:
        type: "string"
      masterIndex:
        type: "integer"
        format: "int32"
      promiscuous:
        type: "boolean"
      routes:
        type: "array"
        items:
          type: "string"
          default: ""
      state:
        type: "string"
      type:
        type: "string"
    example:
      masterIndex: 1
      routes:
      - "routes"
      - "routes"
      promiscuous: true
      ipv4Address:
      - "ipv4Address"
      - "ipv4Address"
      index: 6
      state: "state"
      conditions:
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      type: "type"
      mac: "mac"
  network.harvesterhci.io.v1beta1.NIC:
    type: "object"
    required:
    - "index"
    - "name"
    - "state"
    - "type"
    properties:
      index:
        type: "integer"
        format: "int32"
        description: "Index of the NIC"
        default: 0
      masterIndex:
        type: "integer"
        format: "int32"
        description: "Index of the NIC's master"
      name:
        type: "string"
        description: "Name of the NIC"
        default: ""
      state:
        type: "string"
        description: "State of the NIC, up/down/unknown"
        default: ""
      type:
        type: "string"
        description: "Interface type of the NIC"
        default: ""
      usedByManagementNetwork:
        type: "boolean"
        description: "Specify whether used by management network or not"
    example:
      masterIndex: 5
      name: "name"
      usedByManagementNetwork: true
      index: 5
      state: "state"
      type: "type"
  network.harvesterhci.io.v1beta1.NodeNetwork:
    type: "object"
    required:
    - "apiVersion"
    - "kind"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ObjectMeta"
      spec:
        $ref: "#/definitions/network.harvesterhci.io.v1beta1.NodeNetworkSpec"
      status:
        $ref: "#/definitions/network.harvesterhci.io.v1beta1.NodeNetworkStatus"
    example:
      metadata:
        generation: 6
        finalizers:
        - "finalizers"
        - "finalizers"
        resourceVersion: "resourceVersion"
        annotations:
          key: "annotations"
        generateName: "generateName"
        labels:
          key: "labels"
        ownerReferences:
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        - uid: "uid"
          controller: true
          apiVersion: "apiVersion"
          kind: "kind"
          name: "name"
          blockOwnerDeletion: true
        selfLink: "selfLink"
        deletionGracePeriodSeconds: 0
        uid: "uid"
        managedFields:
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        - apiVersion: "apiVersion"
          fieldsV1: {}
          manager: "manager"
          subresource: "subresource"
          operation: "operation"
          fieldsType: "fieldsType"
        clusterName: "clusterName"
        creationTimestamp: {}
        name: "name"
        namespace: "namespace"
      apiVersion: "apiVersion"
      kind: "kind"
      spec:
        nodeName: "nodeName"
        description: "description"
        nic: "nic"
        type: "type"
      status:
        networkIDs:
        - 0
        - 0
        networkLinkStatus:
          key:
            masterIndex: 1
            routes:
            - "routes"
            - "routes"
            promiscuous: true
            ipv4Address:
            - "ipv4Address"
            - "ipv4Address"
            index: 6
            state: "state"
            conditions:
            - reason: "reason"
              lastTransitionTime: "lastTransitionTime"
              message: "message"
              type: "type"
              lastUpdateTime: "lastUpdateTime"
              status: "status"
            - reason: "reason"
              lastTransitionTime: "lastTransitionTime"
              message: "message"
              type: "type"
              lastUpdateTime: "lastUpdateTime"
              status: "status"
            type: "type"
            mac: "mac"
        nics:
        - masterIndex: 5
          name: "name"
          usedByManagementNetwork: true
          index: 5
          state: "state"
          type: "type"
        - masterIndex: 5
          name: "name"
          usedByManagementNetwork: true
          index: 5
          state: "state"
          type: "type"
        conditions:
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
        - reason: "reason"
          lastTransitionTime: "lastTransitionTime"
          message: "message"
          type: "type"
          lastUpdateTime: "lastUpdateTime"
          status: "status"
  network.harvesterhci.io.v1beta1.NodeNetworkList:
    type: "object"
    required:
    - "apiVersion"
    - "items"
    - "kind"
    - "metadata"
    properties:
      apiVersion:
        type: "string"
        description: "APIVersion defines the versioned schema of this representation\
          \ of an object. Servers should convert recognized schemas to the latest\
          \ internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
      items:
        type: "array"
        items:
          $ref: "#/definitions/network.harvesterhci.io.v1beta1.NodeNetwork"
      kind:
        type: "string"
        description: "Kind is a string value representing the REST resource this object\
          \ represents. Servers may infer this from the endpoint the client submits\
          \ requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
      metadata:
        $ref: "#/definitions/k8s.io.v1.ListMeta"
    description: "NodeNetworkList is a list of NodeNetwork resources"
    example:
      metadata:
        remainingItemCount: 1
        continue: "continue"
        resourceVersion: "resourceVersion"
        selfLink: "selfLink"
      apiVersion: "apiVersion"
      kind: "kind"
      items:
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          nodeName: "nodeName"
          description: "description"
          nic: "nic"
          type: "type"
        status:
          networkIDs:
          - 0
          - 0
          networkLinkStatus:
            key:
              masterIndex: 1
              routes:
              - "routes"
              - "routes"
              promiscuous: true
              ipv4Address:
              - "ipv4Address"
              - "ipv4Address"
              index: 6
              state: "state"
              conditions:
              - reason: "reason"
                lastTransitionTime: "lastTransitionTime"
                message: "message"
                type: "type"
                lastUpdateTime: "lastUpdateTime"
                status: "status"
              - reason: "reason"
                lastTransitionTime: "lastTransitionTime"
                message: "message"
                type: "type"
                lastUpdateTime: "lastUpdateTime"
                status: "status"
              type: "type"
              mac: "mac"
          nics:
          - masterIndex: 5
            name: "name"
            usedByManagementNetwork: true
            index: 5
            state: "state"
            type: "type"
          - masterIndex: 5
            name: "name"
            usedByManagementNetwork: true
            index: 5
            state: "state"
            type: "type"
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
      - metadata:
          generation: 6
          finalizers:
          - "finalizers"
          - "finalizers"
          resourceVersion: "resourceVersion"
          annotations:
            key: "annotations"
          generateName: "generateName"
          labels:
            key: "labels"
          ownerReferences:
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          - uid: "uid"
            controller: true
            apiVersion: "apiVersion"
            kind: "kind"
            name: "name"
            blockOwnerDeletion: true
          selfLink: "selfLink"
          deletionGracePeriodSeconds: 0
          uid: "uid"
          managedFields:
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          - apiVersion: "apiVersion"
            fieldsV1: {}
            manager: "manager"
            subresource: "subresource"
            operation: "operation"
            fieldsType: "fieldsType"
          clusterName: "clusterName"
          creationTimestamp: {}
          name: "name"
          namespace: "namespace"
        apiVersion: "apiVersion"
        kind: "kind"
        spec:
          nodeName: "nodeName"
          description: "description"
          nic: "nic"
          type: "type"
        status:
          networkIDs:
          - 0
          - 0
          networkLinkStatus:
            key:
              masterIndex: 1
              routes:
              - "routes"
              - "routes"
              promiscuous: true
              ipv4Address:
              - "ipv4Address"
              - "ipv4Address"
              index: 6
              state: "state"
              conditions:
              - reason: "reason"
                lastTransitionTime: "lastTransitionTime"
                message: "message"
                type: "type"
                lastUpdateTime: "lastUpdateTime"
                status: "status"
              - reason: "reason"
                lastTransitionTime: "lastTransitionTime"
                message: "message"
                type: "type"
                lastUpdateTime: "lastUpdateTime"
                status: "status"
              type: "type"
              mac: "mac"
          nics:
          - masterIndex: 5
            name: "name"
            usedByManagementNetwork: true
            index: 5
            state: "state"
            type: "type"
          - masterIndex: 5
            name: "name"
            usedByManagementNetwork: true
            index: 5
            state: "state"
            type: "type"
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
  network.harvesterhci.io.v1beta1.NodeNetworkSpec:
    type: "object"
    required:
    - "nodeName"
    properties:
      description:
        type: "string"
      nic:
        type: "string"
      nodeName:
        type: "string"
        default: ""
      type:
        type: "string"
    example:
      nodeName: "nodeName"
      description: "description"
      nic: "nic"
      type: "type"
  network.harvesterhci.io.v1beta1.NodeNetworkStatus:
    type: "object"
    properties:
      conditions:
        type: "array"
        items:
          $ref: "#/definitions/network.harvesterhci.io.v1beta1.Condition"
      networkIDs:
        type: "array"
        items:
          type: "integer"
          format: "int32"
          default: 0
      networkLinkStatus:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/network.harvesterhci.io.v1beta1.LinkStatus"
      nics:
        type: "array"
        items:
          $ref: "#/definitions/network.harvesterhci.io.v1beta1.NIC"
    example:
      networkIDs:
      - 0
      - 0
      networkLinkStatus:
        key:
          masterIndex: 1
          routes:
          - "routes"
          - "routes"
          promiscuous: true
          ipv4Address:
          - "ipv4Address"
          - "ipv4Address"
          index: 6
          state: "state"
          conditions:
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          - reason: "reason"
            lastTransitionTime: "lastTransitionTime"
            message: "message"
            type: "type"
            lastUpdateTime: "lastUpdateTime"
            status: "status"
          type: "type"
          mac: "mac"
      nics:
      - masterIndex: 5
        name: "name"
        usedByManagementNetwork: true
        index: 5
        state: "state"
        type: "type"
      - masterIndex: 5
        name: "name"
        usedByManagementNetwork: true
        index: 5
        state: "state"
        type: "type"
      conditions:
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
      - reason: "reason"
        lastTransitionTime: "lastTransitionTime"
        message: "message"
        type: "type"
        lastUpdateTime: "lastUpdateTime"
        status: "status"
