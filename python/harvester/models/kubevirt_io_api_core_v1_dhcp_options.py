# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class KubevirtIoApiCoreV1DHCPOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_file_name': 'str',
        'ntp_servers': 'list[str]',
        'private_options': 'list[KubevirtIoApiCoreV1DHCPPrivateOptions]',
        'tftp_server_name': 'str'
    }

    attribute_map = {
        'boot_file_name': 'bootFileName',
        'ntp_servers': 'ntpServers',
        'private_options': 'privateOptions',
        'tftp_server_name': 'tftpServerName'
    }

    def __init__(self, boot_file_name=None, ntp_servers=None, private_options=None, tftp_server_name=None, _configuration=None):  # noqa: E501
        """KubevirtIoApiCoreV1DHCPOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._boot_file_name = None
        self._ntp_servers = None
        self._private_options = None
        self._tftp_server_name = None
        self.discriminator = None

        if boot_file_name is not None:
            self.boot_file_name = boot_file_name
        if ntp_servers is not None:
            self.ntp_servers = ntp_servers
        if private_options is not None:
            self.private_options = private_options
        if tftp_server_name is not None:
            self.tftp_server_name = tftp_server_name

    @property
    def boot_file_name(self):
        """Gets the boot_file_name of this KubevirtIoApiCoreV1DHCPOptions.  # noqa: E501

        If specified will pass option 67 to interface's DHCP server  # noqa: E501

        :return: The boot_file_name of this KubevirtIoApiCoreV1DHCPOptions.  # noqa: E501
        :rtype: str
        """
        return self._boot_file_name

    @boot_file_name.setter
    def boot_file_name(self, boot_file_name):
        """Sets the boot_file_name of this KubevirtIoApiCoreV1DHCPOptions.

        If specified will pass option 67 to interface's DHCP server  # noqa: E501

        :param boot_file_name: The boot_file_name of this KubevirtIoApiCoreV1DHCPOptions.  # noqa: E501
        :type: str
        """

        self._boot_file_name = boot_file_name

    @property
    def ntp_servers(self):
        """Gets the ntp_servers of this KubevirtIoApiCoreV1DHCPOptions.  # noqa: E501

        If specified will pass the configured NTP server to the VM via DHCP option 042.  # noqa: E501

        :return: The ntp_servers of this KubevirtIoApiCoreV1DHCPOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._ntp_servers

    @ntp_servers.setter
    def ntp_servers(self, ntp_servers):
        """Sets the ntp_servers of this KubevirtIoApiCoreV1DHCPOptions.

        If specified will pass the configured NTP server to the VM via DHCP option 042.  # noqa: E501

        :param ntp_servers: The ntp_servers of this KubevirtIoApiCoreV1DHCPOptions.  # noqa: E501
        :type: list[str]
        """

        self._ntp_servers = ntp_servers

    @property
    def private_options(self):
        """Gets the private_options of this KubevirtIoApiCoreV1DHCPOptions.  # noqa: E501

        If specified will pass extra DHCP options for private use, range: 224-254  # noqa: E501

        :return: The private_options of this KubevirtIoApiCoreV1DHCPOptions.  # noqa: E501
        :rtype: list[KubevirtIoApiCoreV1DHCPPrivateOptions]
        """
        return self._private_options

    @private_options.setter
    def private_options(self, private_options):
        """Sets the private_options of this KubevirtIoApiCoreV1DHCPOptions.

        If specified will pass extra DHCP options for private use, range: 224-254  # noqa: E501

        :param private_options: The private_options of this KubevirtIoApiCoreV1DHCPOptions.  # noqa: E501
        :type: list[KubevirtIoApiCoreV1DHCPPrivateOptions]
        """

        self._private_options = private_options

    @property
    def tftp_server_name(self):
        """Gets the tftp_server_name of this KubevirtIoApiCoreV1DHCPOptions.  # noqa: E501

        If specified will pass option 66 to interface's DHCP server  # noqa: E501

        :return: The tftp_server_name of this KubevirtIoApiCoreV1DHCPOptions.  # noqa: E501
        :rtype: str
        """
        return self._tftp_server_name

    @tftp_server_name.setter
    def tftp_server_name(self, tftp_server_name):
        """Sets the tftp_server_name of this KubevirtIoApiCoreV1DHCPOptions.

        If specified will pass option 66 to interface's DHCP server  # noqa: E501

        :param tftp_server_name: The tftp_server_name of this KubevirtIoApiCoreV1DHCPOptions.  # noqa: E501
        :type: str
        """

        self._tftp_server_name = tftp_server_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubevirtIoApiCoreV1DHCPOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubevirtIoApiCoreV1DHCPOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubevirtIoApiCoreV1DHCPOptions):
            return True

        return self.to_dict() != other.to_dict()
