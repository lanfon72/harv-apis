# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class HarvesterhciIoV1beta1VirtualMachineRestoreStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'complete': 'bool',
        'conditions': 'list[HarvesterhciIoV1beta1Condition]',
        'deleted_volumes': 'list[str]',
        'restore_time': 'K8sIoV1Time',
        'restores': 'list[HarvesterhciIoV1beta1VolumeRestore]',
        'target_uid': 'str'
    }

    attribute_map = {
        'complete': 'complete',
        'conditions': 'conditions',
        'deleted_volumes': 'deletedVolumes',
        'restore_time': 'restoreTime',
        'restores': 'restores',
        'target_uid': 'targetUID'
    }

    def __init__(self, complete=None, conditions=None, deleted_volumes=None, restore_time=None, restores=None, target_uid=None, _configuration=None):  # noqa: E501
        """HarvesterhciIoV1beta1VirtualMachineRestoreStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._complete = None
        self._conditions = None
        self._deleted_volumes = None
        self._restore_time = None
        self._restores = None
        self._target_uid = None
        self.discriminator = None

        if complete is not None:
            self.complete = complete
        if conditions is not None:
            self.conditions = conditions
        if deleted_volumes is not None:
            self.deleted_volumes = deleted_volumes
        if restore_time is not None:
            self.restore_time = restore_time
        if restores is not None:
            self.restores = restores
        if target_uid is not None:
            self.target_uid = target_uid

    @property
    def complete(self):
        """Gets the complete of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501


        :return: The complete of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.


        :param complete: The complete of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501
        :type: bool
        """

        self._complete = complete

    @property
    def conditions(self):
        """Gets the conditions of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501


        :return: The conditions of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501
        :rtype: list[HarvesterhciIoV1beta1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.


        :param conditions: The conditions of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501
        :type: list[HarvesterhciIoV1beta1Condition]
        """

        self._conditions = conditions

    @property
    def deleted_volumes(self):
        """Gets the deleted_volumes of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501


        :return: The deleted_volumes of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._deleted_volumes

    @deleted_volumes.setter
    def deleted_volumes(self, deleted_volumes):
        """Sets the deleted_volumes of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.


        :param deleted_volumes: The deleted_volumes of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501
        :type: list[str]
        """

        self._deleted_volumes = deleted_volumes

    @property
    def restore_time(self):
        """Gets the restore_time of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501


        :return: The restore_time of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501
        :rtype: K8sIoV1Time
        """
        return self._restore_time

    @restore_time.setter
    def restore_time(self, restore_time):
        """Sets the restore_time of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.


        :param restore_time: The restore_time of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501
        :type: K8sIoV1Time
        """

        self._restore_time = restore_time

    @property
    def restores(self):
        """Gets the restores of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501


        :return: The restores of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501
        :rtype: list[HarvesterhciIoV1beta1VolumeRestore]
        """
        return self._restores

    @restores.setter
    def restores(self, restores):
        """Sets the restores of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.


        :param restores: The restores of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501
        :type: list[HarvesterhciIoV1beta1VolumeRestore]
        """

        self._restores = restores

    @property
    def target_uid(self):
        """Gets the target_uid of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501


        :return: The target_uid of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501
        :rtype: str
        """
        return self._target_uid

    @target_uid.setter
    def target_uid(self, target_uid):
        """Sets the target_uid of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.


        :param target_uid: The target_uid of this HarvesterhciIoV1beta1VirtualMachineRestoreStatus.  # noqa: E501
        :type: str
        """

        self._target_uid = target_uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HarvesterhciIoV1beta1VirtualMachineRestoreStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HarvesterhciIoV1beta1VirtualMachineRestoreStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HarvesterhciIoV1beta1VirtualMachineRestoreStatus):
            return True

        return self.to_dict() != other.to_dict()
