# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class KubevirtIoApiCoreV1Interface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_order': 'int',
        'bridge': 'KubevirtIoApiCoreV1InterfaceBridge',
        'dhcp_options': 'KubevirtIoApiCoreV1DHCPOptions',
        'mac_address': 'str',
        'macvtap': 'KubevirtIoApiCoreV1InterfaceMacvtap',
        'masquerade': 'KubevirtIoApiCoreV1InterfaceMasquerade',
        'model': 'str',
        'name': 'str',
        'pci_address': 'str',
        'ports': 'list[KubevirtIoApiCoreV1Port]',
        'slirp': 'KubevirtIoApiCoreV1InterfaceSlirp',
        'sriov': 'KubevirtIoApiCoreV1InterfaceSRIOV',
        'tag': 'str'
    }

    attribute_map = {
        'boot_order': 'bootOrder',
        'bridge': 'bridge',
        'dhcp_options': 'dhcpOptions',
        'mac_address': 'macAddress',
        'macvtap': 'macvtap',
        'masquerade': 'masquerade',
        'model': 'model',
        'name': 'name',
        'pci_address': 'pciAddress',
        'ports': 'ports',
        'slirp': 'slirp',
        'sriov': 'sriov',
        'tag': 'tag'
    }

    def __init__(self, boot_order=None, bridge=None, dhcp_options=None, mac_address=None, macvtap=None, masquerade=None, model=None, name='', pci_address=None, ports=None, slirp=None, sriov=None, tag=None, _configuration=None):  # noqa: E501
        """KubevirtIoApiCoreV1Interface - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._boot_order = None
        self._bridge = None
        self._dhcp_options = None
        self._mac_address = None
        self._macvtap = None
        self._masquerade = None
        self._model = None
        self._name = None
        self._pci_address = None
        self._ports = None
        self._slirp = None
        self._sriov = None
        self._tag = None
        self.discriminator = None

        if boot_order is not None:
            self.boot_order = boot_order
        if bridge is not None:
            self.bridge = bridge
        if dhcp_options is not None:
            self.dhcp_options = dhcp_options
        if mac_address is not None:
            self.mac_address = mac_address
        if macvtap is not None:
            self.macvtap = macvtap
        if masquerade is not None:
            self.masquerade = masquerade
        if model is not None:
            self.model = model
        self.name = name
        if pci_address is not None:
            self.pci_address = pci_address
        if ports is not None:
            self.ports = ports
        if slirp is not None:
            self.slirp = slirp
        if sriov is not None:
            self.sriov = sriov
        if tag is not None:
            self.tag = tag

    @property
    def boot_order(self):
        """Gets the boot_order of this KubevirtIoApiCoreV1Interface.  # noqa: E501

        BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each interface or disk that has a boot order must have a unique value. Interfaces without a boot order are not tried.  # noqa: E501

        :return: The boot_order of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :rtype: int
        """
        return self._boot_order

    @boot_order.setter
    def boot_order(self, boot_order):
        """Sets the boot_order of this KubevirtIoApiCoreV1Interface.

        BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each interface or disk that has a boot order must have a unique value. Interfaces without a boot order are not tried.  # noqa: E501

        :param boot_order: The boot_order of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :type: int
        """

        self._boot_order = boot_order

    @property
    def bridge(self):
        """Gets the bridge of this KubevirtIoApiCoreV1Interface.  # noqa: E501


        :return: The bridge of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1InterfaceBridge
        """
        return self._bridge

    @bridge.setter
    def bridge(self, bridge):
        """Sets the bridge of this KubevirtIoApiCoreV1Interface.


        :param bridge: The bridge of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :type: KubevirtIoApiCoreV1InterfaceBridge
        """

        self._bridge = bridge

    @property
    def dhcp_options(self):
        """Gets the dhcp_options of this KubevirtIoApiCoreV1Interface.  # noqa: E501

        If specified the network interface will pass additional DHCP options to the VMI  # noqa: E501

        :return: The dhcp_options of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1DHCPOptions
        """
        return self._dhcp_options

    @dhcp_options.setter
    def dhcp_options(self, dhcp_options):
        """Sets the dhcp_options of this KubevirtIoApiCoreV1Interface.

        If specified the network interface will pass additional DHCP options to the VMI  # noqa: E501

        :param dhcp_options: The dhcp_options of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :type: KubevirtIoApiCoreV1DHCPOptions
        """

        self._dhcp_options = dhcp_options

    @property
    def mac_address(self):
        """Gets the mac_address of this KubevirtIoApiCoreV1Interface.  # noqa: E501

        Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.  # noqa: E501

        :return: The mac_address of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this KubevirtIoApiCoreV1Interface.

        Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.  # noqa: E501

        :param mac_address: The mac_address of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def macvtap(self):
        """Gets the macvtap of this KubevirtIoApiCoreV1Interface.  # noqa: E501


        :return: The macvtap of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1InterfaceMacvtap
        """
        return self._macvtap

    @macvtap.setter
    def macvtap(self, macvtap):
        """Sets the macvtap of this KubevirtIoApiCoreV1Interface.


        :param macvtap: The macvtap of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :type: KubevirtIoApiCoreV1InterfaceMacvtap
        """

        self._macvtap = macvtap

    @property
    def masquerade(self):
        """Gets the masquerade of this KubevirtIoApiCoreV1Interface.  # noqa: E501


        :return: The masquerade of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1InterfaceMasquerade
        """
        return self._masquerade

    @masquerade.setter
    def masquerade(self, masquerade):
        """Sets the masquerade of this KubevirtIoApiCoreV1Interface.


        :param masquerade: The masquerade of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :type: KubevirtIoApiCoreV1InterfaceMasquerade
        """

        self._masquerade = masquerade

    @property
    def model(self):
        """Gets the model of this KubevirtIoApiCoreV1Interface.  # noqa: E501

        Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio.  # noqa: E501

        :return: The model of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this KubevirtIoApiCoreV1Interface.

        Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio.  # noqa: E501

        :param model: The model of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this KubevirtIoApiCoreV1Interface.  # noqa: E501

        Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network.  # noqa: E501

        :return: The name of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KubevirtIoApiCoreV1Interface.

        Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network.  # noqa: E501

        :param name: The name of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def pci_address(self):
        """Gets the pci_address of this KubevirtIoApiCoreV1Interface.  # noqa: E501

        If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10  # noqa: E501

        :return: The pci_address of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :rtype: str
        """
        return self._pci_address

    @pci_address.setter
    def pci_address(self, pci_address):
        """Sets the pci_address of this KubevirtIoApiCoreV1Interface.

        If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10  # noqa: E501

        :param pci_address: The pci_address of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :type: str
        """

        self._pci_address = pci_address

    @property
    def ports(self):
        """Gets the ports of this KubevirtIoApiCoreV1Interface.  # noqa: E501

        List of ports to be forwarded to the virtual machine.  # noqa: E501

        :return: The ports of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :rtype: list[KubevirtIoApiCoreV1Port]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this KubevirtIoApiCoreV1Interface.

        List of ports to be forwarded to the virtual machine.  # noqa: E501

        :param ports: The ports of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :type: list[KubevirtIoApiCoreV1Port]
        """

        self._ports = ports

    @property
    def slirp(self):
        """Gets the slirp of this KubevirtIoApiCoreV1Interface.  # noqa: E501


        :return: The slirp of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1InterfaceSlirp
        """
        return self._slirp

    @slirp.setter
    def slirp(self, slirp):
        """Sets the slirp of this KubevirtIoApiCoreV1Interface.


        :param slirp: The slirp of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :type: KubevirtIoApiCoreV1InterfaceSlirp
        """

        self._slirp = slirp

    @property
    def sriov(self):
        """Gets the sriov of this KubevirtIoApiCoreV1Interface.  # noqa: E501


        :return: The sriov of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1InterfaceSRIOV
        """
        return self._sriov

    @sriov.setter
    def sriov(self, sriov):
        """Sets the sriov of this KubevirtIoApiCoreV1Interface.


        :param sriov: The sriov of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :type: KubevirtIoApiCoreV1InterfaceSRIOV
        """

        self._sriov = sriov

    @property
    def tag(self):
        """Gets the tag of this KubevirtIoApiCoreV1Interface.  # noqa: E501

        If specified, the virtual network interface address and its tag will be provided to the guest via config drive  # noqa: E501

        :return: The tag of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this KubevirtIoApiCoreV1Interface.

        If specified, the virtual network interface address and its tag will be provided to the guest via config drive  # noqa: E501

        :param tag: The tag of this KubevirtIoApiCoreV1Interface.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubevirtIoApiCoreV1Interface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubevirtIoApiCoreV1Interface):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubevirtIoApiCoreV1Interface):
            return True

        return self.to_dict() != other.to_dict()
