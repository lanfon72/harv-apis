# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class KubevirtIoApiCoreV1Input(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bus': 'str',
        'name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'bus': 'bus',
        'name': 'name',
        'type': 'type'
    }

    def __init__(self, bus=None, name='', type='', _configuration=None):  # noqa: E501
        """KubevirtIoApiCoreV1Input - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bus = None
        self._name = None
        self._type = None
        self.discriminator = None

        if bus is not None:
            self.bus = bus
        self.name = name
        self.type = type

    @property
    def bus(self):
        """Gets the bus of this KubevirtIoApiCoreV1Input.  # noqa: E501

        Bus indicates the bus of input device to emulate. Supported values: virtio, usb.  # noqa: E501

        :return: The bus of this KubevirtIoApiCoreV1Input.  # noqa: E501
        :rtype: str
        """
        return self._bus

    @bus.setter
    def bus(self, bus):
        """Sets the bus of this KubevirtIoApiCoreV1Input.

        Bus indicates the bus of input device to emulate. Supported values: virtio, usb.  # noqa: E501

        :param bus: The bus of this KubevirtIoApiCoreV1Input.  # noqa: E501
        :type: str
        """

        self._bus = bus

    @property
    def name(self):
        """Gets the name of this KubevirtIoApiCoreV1Input.  # noqa: E501

        Name is the device name  # noqa: E501

        :return: The name of this KubevirtIoApiCoreV1Input.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KubevirtIoApiCoreV1Input.

        Name is the device name  # noqa: E501

        :param name: The name of this KubevirtIoApiCoreV1Input.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this KubevirtIoApiCoreV1Input.  # noqa: E501

        Type indicated the type of input device. Supported values: tablet.  # noqa: E501

        :return: The type of this KubevirtIoApiCoreV1Input.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this KubevirtIoApiCoreV1Input.

        Type indicated the type of input device. Supported values: tablet.  # noqa: E501

        :param type: The type of this KubevirtIoApiCoreV1Input.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubevirtIoApiCoreV1Input, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubevirtIoApiCoreV1Input):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubevirtIoApiCoreV1Input):
            return True

        return self.to_dict() != other.to_dict()
