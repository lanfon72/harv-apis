# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class KubevirtIoApiCoreV1Chassis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'str',
        'manufacturer': 'str',
        'serial': 'str',
        'sku': 'str',
        'version': 'str'
    }

    attribute_map = {
        'asset': 'asset',
        'manufacturer': 'manufacturer',
        'serial': 'serial',
        'sku': 'sku',
        'version': 'version'
    }

    def __init__(self, asset=None, manufacturer=None, serial=None, sku=None, version=None, _configuration=None):  # noqa: E501
        """KubevirtIoApiCoreV1Chassis - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asset = None
        self._manufacturer = None
        self._serial = None
        self._sku = None
        self._version = None
        self.discriminator = None

        if asset is not None:
            self.asset = asset
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if serial is not None:
            self.serial = serial
        if sku is not None:
            self.sku = sku
        if version is not None:
            self.version = version

    @property
    def asset(self):
        """Gets the asset of this KubevirtIoApiCoreV1Chassis.  # noqa: E501


        :return: The asset of this KubevirtIoApiCoreV1Chassis.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this KubevirtIoApiCoreV1Chassis.


        :param asset: The asset of this KubevirtIoApiCoreV1Chassis.  # noqa: E501
        :type: str
        """

        self._asset = asset

    @property
    def manufacturer(self):
        """Gets the manufacturer of this KubevirtIoApiCoreV1Chassis.  # noqa: E501


        :return: The manufacturer of this KubevirtIoApiCoreV1Chassis.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this KubevirtIoApiCoreV1Chassis.


        :param manufacturer: The manufacturer of this KubevirtIoApiCoreV1Chassis.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def serial(self):
        """Gets the serial of this KubevirtIoApiCoreV1Chassis.  # noqa: E501


        :return: The serial of this KubevirtIoApiCoreV1Chassis.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this KubevirtIoApiCoreV1Chassis.


        :param serial: The serial of this KubevirtIoApiCoreV1Chassis.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def sku(self):
        """Gets the sku of this KubevirtIoApiCoreV1Chassis.  # noqa: E501


        :return: The sku of this KubevirtIoApiCoreV1Chassis.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this KubevirtIoApiCoreV1Chassis.


        :param sku: The sku of this KubevirtIoApiCoreV1Chassis.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def version(self):
        """Gets the version of this KubevirtIoApiCoreV1Chassis.  # noqa: E501


        :return: The version of this KubevirtIoApiCoreV1Chassis.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this KubevirtIoApiCoreV1Chassis.


        :param version: The version of this KubevirtIoApiCoreV1Chassis.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubevirtIoApiCoreV1Chassis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubevirtIoApiCoreV1Chassis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubevirtIoApiCoreV1Chassis):
            return True

        return self.to_dict() != other.to_dict()
