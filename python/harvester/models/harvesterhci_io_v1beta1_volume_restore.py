# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class HarvesterhciIoV1beta1VolumeRestore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'persistent_volume_claim_spec': 'HarvesterhciIoV1beta1PersistentVolumeClaimSourceSpec',
        'volume_backup_name': 'str',
        'volume_name': 'str'
    }

    attribute_map = {
        'persistent_volume_claim_spec': 'persistentVolumeClaimSpec',
        'volume_backup_name': 'volumeBackupName',
        'volume_name': 'volumeName'
    }

    def __init__(self, persistent_volume_claim_spec=None, volume_backup_name=None, volume_name=None, _configuration=None):  # noqa: E501
        """HarvesterhciIoV1beta1VolumeRestore - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._persistent_volume_claim_spec = None
        self._volume_backup_name = None
        self._volume_name = None
        self.discriminator = None

        if persistent_volume_claim_spec is not None:
            self.persistent_volume_claim_spec = persistent_volume_claim_spec
        if volume_backup_name is not None:
            self.volume_backup_name = volume_backup_name
        if volume_name is not None:
            self.volume_name = volume_name

    @property
    def persistent_volume_claim_spec(self):
        """Gets the persistent_volume_claim_spec of this HarvesterhciIoV1beta1VolumeRestore.  # noqa: E501


        :return: The persistent_volume_claim_spec of this HarvesterhciIoV1beta1VolumeRestore.  # noqa: E501
        :rtype: HarvesterhciIoV1beta1PersistentVolumeClaimSourceSpec
        """
        return self._persistent_volume_claim_spec

    @persistent_volume_claim_spec.setter
    def persistent_volume_claim_spec(self, persistent_volume_claim_spec):
        """Sets the persistent_volume_claim_spec of this HarvesterhciIoV1beta1VolumeRestore.


        :param persistent_volume_claim_spec: The persistent_volume_claim_spec of this HarvesterhciIoV1beta1VolumeRestore.  # noqa: E501
        :type: HarvesterhciIoV1beta1PersistentVolumeClaimSourceSpec
        """

        self._persistent_volume_claim_spec = persistent_volume_claim_spec

    @property
    def volume_backup_name(self):
        """Gets the volume_backup_name of this HarvesterhciIoV1beta1VolumeRestore.  # noqa: E501


        :return: The volume_backup_name of this HarvesterhciIoV1beta1VolumeRestore.  # noqa: E501
        :rtype: str
        """
        return self._volume_backup_name

    @volume_backup_name.setter
    def volume_backup_name(self, volume_backup_name):
        """Sets the volume_backup_name of this HarvesterhciIoV1beta1VolumeRestore.


        :param volume_backup_name: The volume_backup_name of this HarvesterhciIoV1beta1VolumeRestore.  # noqa: E501
        :type: str
        """

        self._volume_backup_name = volume_backup_name

    @property
    def volume_name(self):
        """Gets the volume_name of this HarvesterhciIoV1beta1VolumeRestore.  # noqa: E501


        :return: The volume_name of this HarvesterhciIoV1beta1VolumeRestore.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this HarvesterhciIoV1beta1VolumeRestore.


        :param volume_name: The volume_name of this HarvesterhciIoV1beta1VolumeRestore.  # noqa: E501
        :type: str
        """

        self._volume_name = volume_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HarvesterhciIoV1beta1VolumeRestore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HarvesterhciIoV1beta1VolumeRestore):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HarvesterhciIoV1beta1VolumeRestore):
            return True

        return self.to_dict() != other.to_dict()
