# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class KubevirtIoApiCoreV1Firmware(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bootloader': 'KubevirtIoApiCoreV1Bootloader',
        'kernel_boot': 'KubevirtIoApiCoreV1KernelBoot',
        'serial': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'bootloader': 'bootloader',
        'kernel_boot': 'kernelBoot',
        'serial': 'serial',
        'uuid': 'uuid'
    }

    def __init__(self, bootloader=None, kernel_boot=None, serial=None, uuid=None, _configuration=None):  # noqa: E501
        """KubevirtIoApiCoreV1Firmware - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bootloader = None
        self._kernel_boot = None
        self._serial = None
        self._uuid = None
        self.discriminator = None

        if bootloader is not None:
            self.bootloader = bootloader
        if kernel_boot is not None:
            self.kernel_boot = kernel_boot
        if serial is not None:
            self.serial = serial
        if uuid is not None:
            self.uuid = uuid

    @property
    def bootloader(self):
        """Gets the bootloader of this KubevirtIoApiCoreV1Firmware.  # noqa: E501

        Settings to control the bootloader that is used.  # noqa: E501

        :return: The bootloader of this KubevirtIoApiCoreV1Firmware.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1Bootloader
        """
        return self._bootloader

    @bootloader.setter
    def bootloader(self, bootloader):
        """Sets the bootloader of this KubevirtIoApiCoreV1Firmware.

        Settings to control the bootloader that is used.  # noqa: E501

        :param bootloader: The bootloader of this KubevirtIoApiCoreV1Firmware.  # noqa: E501
        :type: KubevirtIoApiCoreV1Bootloader
        """

        self._bootloader = bootloader

    @property
    def kernel_boot(self):
        """Gets the kernel_boot of this KubevirtIoApiCoreV1Firmware.  # noqa: E501

        Settings to set the kernel for booting.  # noqa: E501

        :return: The kernel_boot of this KubevirtIoApiCoreV1Firmware.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1KernelBoot
        """
        return self._kernel_boot

    @kernel_boot.setter
    def kernel_boot(self, kernel_boot):
        """Sets the kernel_boot of this KubevirtIoApiCoreV1Firmware.

        Settings to set the kernel for booting.  # noqa: E501

        :param kernel_boot: The kernel_boot of this KubevirtIoApiCoreV1Firmware.  # noqa: E501
        :type: KubevirtIoApiCoreV1KernelBoot
        """

        self._kernel_boot = kernel_boot

    @property
    def serial(self):
        """Gets the serial of this KubevirtIoApiCoreV1Firmware.  # noqa: E501

        The system-serial-number in SMBIOS  # noqa: E501

        :return: The serial of this KubevirtIoApiCoreV1Firmware.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this KubevirtIoApiCoreV1Firmware.

        The system-serial-number in SMBIOS  # noqa: E501

        :param serial: The serial of this KubevirtIoApiCoreV1Firmware.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def uuid(self):
        """Gets the uuid of this KubevirtIoApiCoreV1Firmware.  # noqa: E501

        UUID reported by the vmi bios. Defaults to a random generated uid.  # noqa: E501

        :return: The uuid of this KubevirtIoApiCoreV1Firmware.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this KubevirtIoApiCoreV1Firmware.

        UUID reported by the vmi bios. Defaults to a random generated uid.  # noqa: E501

        :param uuid: The uuid of this KubevirtIoApiCoreV1Firmware.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubevirtIoApiCoreV1Firmware, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubevirtIoApiCoreV1Firmware):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubevirtIoApiCoreV1Firmware):
            return True

        return self.to_dict() != other.to_dict()
