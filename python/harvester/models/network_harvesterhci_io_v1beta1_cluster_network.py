# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class NetworkHarvesterhciIoV1beta1ClusterNetwork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_version': 'str',
        'config': 'dict(str, str)',
        'description': 'str',
        'enable': 'bool',
        'kind': 'str',
        'metadata': 'K8sIoV1ObjectMeta'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'config': 'config',
        'description': 'description',
        'enable': 'enable',
        'kind': 'kind',
        'metadata': 'metadata'
    }

    def __init__(self, api_version=None, config=None, description=None, enable=False, kind=None, metadata=None, _configuration=None):  # noqa: E501
        """NetworkHarvesterhciIoV1beta1ClusterNetwork - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._api_version = None
        self._config = None
        self._description = None
        self._enable = None
        self._kind = None
        self._metadata = None
        self.discriminator = None

        self.api_version = api_version
        if config is not None:
            self.config = config
        if description is not None:
            self.description = description
        self.enable = enable
        self.kind = kind
        if metadata is not None:
            self.metadata = metadata

    @property
    def api_version(self):
        """Gets the api_version of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this NetworkHarvesterhciIoV1beta1ClusterNetwork.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and api_version is None:
            raise ValueError("Invalid value for `api_version`, must not be `None`")  # noqa: E501

        self._api_version = api_version

    @property
    def config(self):
        """Gets the config of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501


        :return: The config of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this NetworkHarvesterhciIoV1beta1ClusterNetwork.


        :param config: The config of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501
        :type: dict(str, str)
        """

        self._config = config

    @property
    def description(self):
        """Gets the description of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501


        :return: The description of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NetworkHarvesterhciIoV1beta1ClusterNetwork.


        :param description: The description of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enable(self):
        """Gets the enable of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501


        :return: The enable of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this NetworkHarvesterhciIoV1beta1ClusterNetwork.


        :param enable: The enable of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enable is None:
            raise ValueError("Invalid value for `enable`, must not be `None`")  # noqa: E501

        self._enable = enable

    @property
    def kind(self):
        """Gets the kind of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this NetworkHarvesterhciIoV1beta1ClusterNetwork.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def metadata(self):
        """Gets the metadata of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501


        :return: The metadata of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501
        :rtype: K8sIoV1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this NetworkHarvesterhciIoV1beta1ClusterNetwork.


        :param metadata: The metadata of this NetworkHarvesterhciIoV1beta1ClusterNetwork.  # noqa: E501
        :type: K8sIoV1ObjectMeta
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkHarvesterhciIoV1beta1ClusterNetwork, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkHarvesterhciIoV1beta1ClusterNetwork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkHarvesterhciIoV1beta1ClusterNetwork):
            return True

        return self.to_dict() != other.to_dict()
