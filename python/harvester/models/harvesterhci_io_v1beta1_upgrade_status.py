# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class HarvesterhciIoV1beta1UpgradeStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditions': 'list[HarvesterhciIoV1beta1Condition]',
        'image_id': 'str',
        'node_statuses': 'dict(str, HarvesterhciIoV1beta1NodeUpgradeStatus)',
        'previous_version': 'str',
        'repo_info': 'str',
        'single_node': 'str'
    }

    attribute_map = {
        'conditions': 'conditions',
        'image_id': 'imageID',
        'node_statuses': 'nodeStatuses',
        'previous_version': 'previousVersion',
        'repo_info': 'repoInfo',
        'single_node': 'singleNode'
    }

    def __init__(self, conditions=None, image_id=None, node_statuses=None, previous_version=None, repo_info=None, single_node=None, _configuration=None):  # noqa: E501
        """HarvesterhciIoV1beta1UpgradeStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._conditions = None
        self._image_id = None
        self._node_statuses = None
        self._previous_version = None
        self._repo_info = None
        self._single_node = None
        self.discriminator = None

        if conditions is not None:
            self.conditions = conditions
        if image_id is not None:
            self.image_id = image_id
        if node_statuses is not None:
            self.node_statuses = node_statuses
        if previous_version is not None:
            self.previous_version = previous_version
        if repo_info is not None:
            self.repo_info = repo_info
        if single_node is not None:
            self.single_node = single_node

    @property
    def conditions(self):
        """Gets the conditions of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501


        :return: The conditions of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501
        :rtype: list[HarvesterhciIoV1beta1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this HarvesterhciIoV1beta1UpgradeStatus.


        :param conditions: The conditions of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501
        :type: list[HarvesterhciIoV1beta1Condition]
        """

        self._conditions = conditions

    @property
    def image_id(self):
        """Gets the image_id of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501


        :return: The image_id of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this HarvesterhciIoV1beta1UpgradeStatus.


        :param image_id: The image_id of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def node_statuses(self):
        """Gets the node_statuses of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501


        :return: The node_statuses of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501
        :rtype: dict(str, HarvesterhciIoV1beta1NodeUpgradeStatus)
        """
        return self._node_statuses

    @node_statuses.setter
    def node_statuses(self, node_statuses):
        """Sets the node_statuses of this HarvesterhciIoV1beta1UpgradeStatus.


        :param node_statuses: The node_statuses of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501
        :type: dict(str, HarvesterhciIoV1beta1NodeUpgradeStatus)
        """

        self._node_statuses = node_statuses

    @property
    def previous_version(self):
        """Gets the previous_version of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501


        :return: The previous_version of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501
        :rtype: str
        """
        return self._previous_version

    @previous_version.setter
    def previous_version(self, previous_version):
        """Sets the previous_version of this HarvesterhciIoV1beta1UpgradeStatus.


        :param previous_version: The previous_version of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501
        :type: str
        """

        self._previous_version = previous_version

    @property
    def repo_info(self):
        """Gets the repo_info of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501


        :return: The repo_info of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501
        :rtype: str
        """
        return self._repo_info

    @repo_info.setter
    def repo_info(self, repo_info):
        """Sets the repo_info of this HarvesterhciIoV1beta1UpgradeStatus.


        :param repo_info: The repo_info of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501
        :type: str
        """

        self._repo_info = repo_info

    @property
    def single_node(self):
        """Gets the single_node of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501


        :return: The single_node of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501
        :rtype: str
        """
        return self._single_node

    @single_node.setter
    def single_node(self, single_node):
        """Sets the single_node of this HarvesterhciIoV1beta1UpgradeStatus.


        :param single_node: The single_node of this HarvesterhciIoV1beta1UpgradeStatus.  # noqa: E501
        :type: str
        """

        self._single_node = single_node

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HarvesterhciIoV1beta1UpgradeStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HarvesterhciIoV1beta1UpgradeStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HarvesterhciIoV1beta1UpgradeStatus):
            return True

        return self.to_dict() != other.to_dict()
