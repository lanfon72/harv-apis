# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'image_id': 'str',
        'key_pair_ids': 'list[str]',
        'template_id': 'str',
        'vm': 'HarvesterhciIoV1beta1VirtualMachineSourceSpec'
    }

    attribute_map = {
        'description': 'description',
        'image_id': 'imageId',
        'key_pair_ids': 'keyPairIds',
        'template_id': 'templateId',
        'vm': 'vm'
    }

    def __init__(self, description=None, image_id=None, key_pair_ids=None, template_id='', vm=None, _configuration=None):  # noqa: E501
        """HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._image_id = None
        self._key_pair_ids = None
        self._template_id = None
        self._vm = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if image_id is not None:
            self.image_id = image_id
        if key_pair_ids is not None:
            self.key_pair_ids = key_pair_ids
        self.template_id = template_id
        if vm is not None:
            self.vm = vm

    @property
    def description(self):
        """Gets the description of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501


        :return: The description of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.


        :param description: The description of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def image_id(self):
        """Gets the image_id of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501


        :return: The image_id of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.


        :param image_id: The image_id of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def key_pair_ids(self):
        """Gets the key_pair_ids of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501


        :return: The key_pair_ids of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._key_pair_ids

    @key_pair_ids.setter
    def key_pair_ids(self, key_pair_ids):
        """Sets the key_pair_ids of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.


        :param key_pair_ids: The key_pair_ids of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501
        :type: list[str]
        """

        self._key_pair_ids = key_pair_ids

    @property
    def template_id(self):
        """Gets the template_id of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501


        :return: The template_id of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.


        :param template_id: The template_id of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")  # noqa: E501

        self._template_id = template_id

    @property
    def vm(self):
        """Gets the vm of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501


        :return: The vm of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501
        :rtype: HarvesterhciIoV1beta1VirtualMachineSourceSpec
        """
        return self._vm

    @vm.setter
    def vm(self, vm):
        """Sets the vm of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.


        :param vm: The vm of this HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec.  # noqa: E501
        :type: HarvesterhciIoV1beta1VirtualMachineSourceSpec
        """

        self._vm = vm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HarvesterhciIoV1beta1VirtualMachineTemplateVersionSpec):
            return True

        return self.to_dict() != other.to_dict()
