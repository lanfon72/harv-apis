# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class KubevirtIoApiCoreV1VirtualMachineInstanceStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_pods': 'dict(str, str)',
        'conditions': 'list[KubevirtIoApiCoreV1VirtualMachineInstanceCondition]',
        'evacuation_node_name': 'str',
        'fs_freeze_status': 'str',
        'guest_os_info': 'KubevirtIoApiCoreV1VirtualMachineInstanceGuestOSInfo',
        'interfaces': 'list[KubevirtIoApiCoreV1VirtualMachineInstanceNetworkInterface]',
        'launcher_container_image_version': 'str',
        'migration_method': 'str',
        'migration_state': 'KubevirtIoApiCoreV1VirtualMachineInstanceMigrationState',
        'migration_transport': 'str',
        'node_name': 'str',
        'phase': 'str',
        'phase_transition_timestamps': 'list[KubevirtIoApiCoreV1VirtualMachineInstancePhaseTransitionTimestamp]',
        'qos_class': 'str',
        'reason': 'str',
        'runtime_user': 'int',
        'topology_hints': 'KubevirtIoApiCoreV1TopologyHints',
        'virtual_machine_revision_name': 'str',
        'volume_status': 'list[KubevirtIoApiCoreV1VolumeStatus]'
    }

    attribute_map = {
        'active_pods': 'activePods',
        'conditions': 'conditions',
        'evacuation_node_name': 'evacuationNodeName',
        'fs_freeze_status': 'fsFreezeStatus',
        'guest_os_info': 'guestOSInfo',
        'interfaces': 'interfaces',
        'launcher_container_image_version': 'launcherContainerImageVersion',
        'migration_method': 'migrationMethod',
        'migration_state': 'migrationState',
        'migration_transport': 'migrationTransport',
        'node_name': 'nodeName',
        'phase': 'phase',
        'phase_transition_timestamps': 'phaseTransitionTimestamps',
        'qos_class': 'qosClass',
        'reason': 'reason',
        'runtime_user': 'runtimeUser',
        'topology_hints': 'topologyHints',
        'virtual_machine_revision_name': 'virtualMachineRevisionName',
        'volume_status': 'volumeStatus'
    }

    def __init__(self, active_pods=None, conditions=None, evacuation_node_name=None, fs_freeze_status=None, guest_os_info=None, interfaces=None, launcher_container_image_version=None, migration_method=None, migration_state=None, migration_transport=None, node_name=None, phase=None, phase_transition_timestamps=None, qos_class=None, reason=None, runtime_user=0, topology_hints=None, virtual_machine_revision_name=None, volume_status=None, _configuration=None):  # noqa: E501
        """KubevirtIoApiCoreV1VirtualMachineInstanceStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active_pods = None
        self._conditions = None
        self._evacuation_node_name = None
        self._fs_freeze_status = None
        self._guest_os_info = None
        self._interfaces = None
        self._launcher_container_image_version = None
        self._migration_method = None
        self._migration_state = None
        self._migration_transport = None
        self._node_name = None
        self._phase = None
        self._phase_transition_timestamps = None
        self._qos_class = None
        self._reason = None
        self._runtime_user = None
        self._topology_hints = None
        self._virtual_machine_revision_name = None
        self._volume_status = None
        self.discriminator = None

        if active_pods is not None:
            self.active_pods = active_pods
        if conditions is not None:
            self.conditions = conditions
        if evacuation_node_name is not None:
            self.evacuation_node_name = evacuation_node_name
        if fs_freeze_status is not None:
            self.fs_freeze_status = fs_freeze_status
        if guest_os_info is not None:
            self.guest_os_info = guest_os_info
        if interfaces is not None:
            self.interfaces = interfaces
        if launcher_container_image_version is not None:
            self.launcher_container_image_version = launcher_container_image_version
        if migration_method is not None:
            self.migration_method = migration_method
        if migration_state is not None:
            self.migration_state = migration_state
        if migration_transport is not None:
            self.migration_transport = migration_transport
        if node_name is not None:
            self.node_name = node_name
        if phase is not None:
            self.phase = phase
        if phase_transition_timestamps is not None:
            self.phase_transition_timestamps = phase_transition_timestamps
        if qos_class is not None:
            self.qos_class = qos_class
        if reason is not None:
            self.reason = reason
        if runtime_user is not None:
            self.runtime_user = runtime_user
        if topology_hints is not None:
            self.topology_hints = topology_hints
        if virtual_machine_revision_name is not None:
            self.virtual_machine_revision_name = virtual_machine_revision_name
        if volume_status is not None:
            self.volume_status = volume_status

    @property
    def active_pods(self):
        """Gets the active_pods of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        ActivePods is a mapping of pod UID to node name. It is possible for multiple pods to be running for a single VMI during migration.  # noqa: E501

        :return: The active_pods of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._active_pods

    @active_pods.setter
    def active_pods(self, active_pods):
        """Sets the active_pods of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        ActivePods is a mapping of pod UID to node name. It is possible for multiple pods to be running for a single VMI during migration.  # noqa: E501

        :param active_pods: The active_pods of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: dict(str, str)
        """

        self._active_pods = active_pods

    @property
    def conditions(self):
        """Gets the conditions of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        Conditions are specific points in VirtualMachineInstance's pod runtime.  # noqa: E501

        :return: The conditions of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: list[KubevirtIoApiCoreV1VirtualMachineInstanceCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        Conditions are specific points in VirtualMachineInstance's pod runtime.  # noqa: E501

        :param conditions: The conditions of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: list[KubevirtIoApiCoreV1VirtualMachineInstanceCondition]
        """

        self._conditions = conditions

    @property
    def evacuation_node_name(self):
        """Gets the evacuation_node_name of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        EvacuationNodeName is used to track the eviction process of a VMI. It stores the name of the node that we want to evacuate. It is meant to be used by KubeVirt core components only and can't be set or modified by users.  # noqa: E501

        :return: The evacuation_node_name of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._evacuation_node_name

    @evacuation_node_name.setter
    def evacuation_node_name(self, evacuation_node_name):
        """Sets the evacuation_node_name of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        EvacuationNodeName is used to track the eviction process of a VMI. It stores the name of the node that we want to evacuate. It is meant to be used by KubeVirt core components only and can't be set or modified by users.  # noqa: E501

        :param evacuation_node_name: The evacuation_node_name of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: str
        """

        self._evacuation_node_name = evacuation_node_name

    @property
    def fs_freeze_status(self):
        """Gets the fs_freeze_status of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        FSFreezeStatus is the state of the fs of the guest it can be either frozen or thawed  # noqa: E501

        :return: The fs_freeze_status of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._fs_freeze_status

    @fs_freeze_status.setter
    def fs_freeze_status(self, fs_freeze_status):
        """Sets the fs_freeze_status of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        FSFreezeStatus is the state of the fs of the guest it can be either frozen or thawed  # noqa: E501

        :param fs_freeze_status: The fs_freeze_status of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: str
        """

        self._fs_freeze_status = fs_freeze_status

    @property
    def guest_os_info(self):
        """Gets the guest_os_info of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        Guest OS Information  # noqa: E501

        :return: The guest_os_info of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1VirtualMachineInstanceGuestOSInfo
        """
        return self._guest_os_info

    @guest_os_info.setter
    def guest_os_info(self, guest_os_info):
        """Sets the guest_os_info of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        Guest OS Information  # noqa: E501

        :param guest_os_info: The guest_os_info of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: KubevirtIoApiCoreV1VirtualMachineInstanceGuestOSInfo
        """

        self._guest_os_info = guest_os_info

    @property
    def interfaces(self):
        """Gets the interfaces of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        Interfaces represent the details of available network interfaces.  # noqa: E501

        :return: The interfaces of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: list[KubevirtIoApiCoreV1VirtualMachineInstanceNetworkInterface]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        Interfaces represent the details of available network interfaces.  # noqa: E501

        :param interfaces: The interfaces of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: list[KubevirtIoApiCoreV1VirtualMachineInstanceNetworkInterface]
        """

        self._interfaces = interfaces

    @property
    def launcher_container_image_version(self):
        """Gets the launcher_container_image_version of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        LauncherContainerImageVersion indicates what container image is currently active for the vmi.  # noqa: E501

        :return: The launcher_container_image_version of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._launcher_container_image_version

    @launcher_container_image_version.setter
    def launcher_container_image_version(self, launcher_container_image_version):
        """Sets the launcher_container_image_version of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        LauncherContainerImageVersion indicates what container image is currently active for the vmi.  # noqa: E501

        :param launcher_container_image_version: The launcher_container_image_version of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: str
        """

        self._launcher_container_image_version = launcher_container_image_version

    @property
    def migration_method(self):
        """Gets the migration_method of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        Represents the method using which the vmi can be migrated: live migration or block migration  # noqa: E501

        :return: The migration_method of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._migration_method

    @migration_method.setter
    def migration_method(self, migration_method):
        """Sets the migration_method of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        Represents the method using which the vmi can be migrated: live migration or block migration  # noqa: E501

        :param migration_method: The migration_method of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: str
        """

        self._migration_method = migration_method

    @property
    def migration_state(self):
        """Gets the migration_state of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        Represents the status of a live migration  # noqa: E501

        :return: The migration_state of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1VirtualMachineInstanceMigrationState
        """
        return self._migration_state

    @migration_state.setter
    def migration_state(self, migration_state):
        """Sets the migration_state of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        Represents the status of a live migration  # noqa: E501

        :param migration_state: The migration_state of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: KubevirtIoApiCoreV1VirtualMachineInstanceMigrationState
        """

        self._migration_state = migration_state

    @property
    def migration_transport(self):
        """Gets the migration_transport of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        This represents the migration transport  # noqa: E501

        :return: The migration_transport of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._migration_transport

    @migration_transport.setter
    def migration_transport(self, migration_transport):
        """Sets the migration_transport of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        This represents the migration transport  # noqa: E501

        :param migration_transport: The migration_transport of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: str
        """

        self._migration_transport = migration_transport

    @property
    def node_name(self):
        """Gets the node_name of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        NodeName is the name where the VirtualMachineInstance is currently running.  # noqa: E501

        :return: The node_name of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        NodeName is the name where the VirtualMachineInstance is currently running.  # noqa: E501

        :param node_name: The node_name of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def phase(self):
        """Gets the phase of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it.  # noqa: E501

        :return: The phase of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it.  # noqa: E501

        :param phase: The phase of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def phase_transition_timestamps(self):
        """Gets the phase_transition_timestamps of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        PhaseTransitionTimestamp is the timestamp of when the last phase change occurred  # noqa: E501

        :return: The phase_transition_timestamps of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: list[KubevirtIoApiCoreV1VirtualMachineInstancePhaseTransitionTimestamp]
        """
        return self._phase_transition_timestamps

    @phase_transition_timestamps.setter
    def phase_transition_timestamps(self, phase_transition_timestamps):
        """Sets the phase_transition_timestamps of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        PhaseTransitionTimestamp is the timestamp of when the last phase change occurred  # noqa: E501

        :param phase_transition_timestamps: The phase_transition_timestamps of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: list[KubevirtIoApiCoreV1VirtualMachineInstancePhaseTransitionTimestamp]
        """

        self._phase_transition_timestamps = phase_transition_timestamps

    @property
    def qos_class(self):
        """Gets the qos_class of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        The Quality of Service (QOS) classification assigned to the virtual machine instance based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md  # noqa: E501

        :return: The qos_class of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._qos_class

    @qos_class.setter
    def qos_class(self, qos_class):
        """Sets the qos_class of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        The Quality of Service (QOS) classification assigned to the virtual machine instance based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md  # noqa: E501

        :param qos_class: The qos_class of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: str
        """

        self._qos_class = qos_class

    @property
    def reason(self):
        """Gets the reason of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        A brief CamelCase message indicating details about why the VMI is in this state. e.g. 'NodeUnresponsive'  # noqa: E501

        :return: The reason of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        A brief CamelCase message indicating details about why the VMI is in this state. e.g. 'NodeUnresponsive'  # noqa: E501

        :param reason: The reason of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def runtime_user(self):
        """Gets the runtime_user of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        RuntimeUser is used to determine what user will be used in launcher  # noqa: E501

        :return: The runtime_user of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: int
        """
        return self._runtime_user

    @runtime_user.setter
    def runtime_user(self, runtime_user):
        """Sets the runtime_user of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        RuntimeUser is used to determine what user will be used in launcher  # noqa: E501

        :param runtime_user: The runtime_user of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: int
        """

        self._runtime_user = runtime_user

    @property
    def topology_hints(self):
        """Gets the topology_hints of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501


        :return: The topology_hints of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1TopologyHints
        """
        return self._topology_hints

    @topology_hints.setter
    def topology_hints(self, topology_hints):
        """Sets the topology_hints of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.


        :param topology_hints: The topology_hints of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: KubevirtIoApiCoreV1TopologyHints
        """

        self._topology_hints = topology_hints

    @property
    def virtual_machine_revision_name(self):
        """Gets the virtual_machine_revision_name of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        VirtualMachineRevisionName is used to get the vm revision of the vmi when doing an online vm snapshot  # noqa: E501

        :return: The virtual_machine_revision_name of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._virtual_machine_revision_name

    @virtual_machine_revision_name.setter
    def virtual_machine_revision_name(self, virtual_machine_revision_name):
        """Sets the virtual_machine_revision_name of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        VirtualMachineRevisionName is used to get the vm revision of the vmi when doing an online vm snapshot  # noqa: E501

        :param virtual_machine_revision_name: The virtual_machine_revision_name of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: str
        """

        self._virtual_machine_revision_name = virtual_machine_revision_name

    @property
    def volume_status(self):
        """Gets the volume_status of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501

        VolumeStatus contains the statuses of all the volumes  # noqa: E501

        :return: The volume_status of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :rtype: list[KubevirtIoApiCoreV1VolumeStatus]
        """
        return self._volume_status

    @volume_status.setter
    def volume_status(self, volume_status):
        """Sets the volume_status of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.

        VolumeStatus contains the statuses of all the volumes  # noqa: E501

        :param volume_status: The volume_status of this KubevirtIoApiCoreV1VirtualMachineInstanceStatus.  # noqa: E501
        :type: list[KubevirtIoApiCoreV1VolumeStatus]
        """

        self._volume_status = volume_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubevirtIoApiCoreV1VirtualMachineInstanceStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubevirtIoApiCoreV1VirtualMachineInstanceStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubevirtIoApiCoreV1VirtualMachineInstanceStatus):
            return True

        return self.to_dict() != other.to_dict()
