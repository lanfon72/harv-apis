# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class KubevirtIoApiCoreV1RemoveVolumeOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dry_run': 'list[str]',
        'name': 'str'
    }

    attribute_map = {
        'dry_run': 'dryRun',
        'name': 'name'
    }

    def __init__(self, dry_run=None, name='', _configuration=None):  # noqa: E501
        """KubevirtIoApiCoreV1RemoveVolumeOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dry_run = None
        self._name = None
        self.discriminator = None

        if dry_run is not None:
            self.dry_run = dry_run
        self.name = name

    @property
    def dry_run(self):
        """Gets the dry_run of this KubevirtIoApiCoreV1RemoveVolumeOptions.  # noqa: E501

        When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed  # noqa: E501

        :return: The dry_run of this KubevirtIoApiCoreV1RemoveVolumeOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this KubevirtIoApiCoreV1RemoveVolumeOptions.

        When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed  # noqa: E501

        :param dry_run: The dry_run of this KubevirtIoApiCoreV1RemoveVolumeOptions.  # noqa: E501
        :type: list[str]
        """

        self._dry_run = dry_run

    @property
    def name(self):
        """Gets the name of this KubevirtIoApiCoreV1RemoveVolumeOptions.  # noqa: E501

        Name represents the name that maps to both the disk and volume that should be removed  # noqa: E501

        :return: The name of this KubevirtIoApiCoreV1RemoveVolumeOptions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KubevirtIoApiCoreV1RemoveVolumeOptions.

        Name represents the name that maps to both the disk and volume that should be removed  # noqa: E501

        :param name: The name of this KubevirtIoApiCoreV1RemoveVolumeOptions.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubevirtIoApiCoreV1RemoveVolumeOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubevirtIoApiCoreV1RemoveVolumeOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubevirtIoApiCoreV1RemoveVolumeOptions):
            return True

        return self.to_dict() != other.to_dict()
