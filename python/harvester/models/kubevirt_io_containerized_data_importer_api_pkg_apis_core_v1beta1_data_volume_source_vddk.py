# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backing_file': 'str',
        'init_image_url': 'str',
        'secret_ref': 'str',
        'thumbprint': 'str',
        'url': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'backing_file': 'backingFile',
        'init_image_url': 'initImageURL',
        'secret_ref': 'secretRef',
        'thumbprint': 'thumbprint',
        'url': 'url',
        'uuid': 'uuid'
    }

    def __init__(self, backing_file=None, init_image_url=None, secret_ref=None, thumbprint=None, url=None, uuid=None, _configuration=None):  # noqa: E501
        """KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._backing_file = None
        self._init_image_url = None
        self._secret_ref = None
        self._thumbprint = None
        self._url = None
        self._uuid = None
        self.discriminator = None

        if backing_file is not None:
            self.backing_file = backing_file
        if init_image_url is not None:
            self.init_image_url = init_image_url
        if secret_ref is not None:
            self.secret_ref = secret_ref
        if thumbprint is not None:
            self.thumbprint = thumbprint
        if url is not None:
            self.url = url
        if uuid is not None:
            self.uuid = uuid

    @property
    def backing_file(self):
        """Gets the backing_file of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501

        BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi  # noqa: E501

        :return: The backing_file of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501
        :rtype: str
        """
        return self._backing_file

    @backing_file.setter
    def backing_file(self, backing_file):
        """Sets the backing_file of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.

        BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi  # noqa: E501

        :param backing_file: The backing_file of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501
        :type: str
        """

        self._backing_file = backing_file

    @property
    def init_image_url(self):
        """Gets the init_image_url of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501

        InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map  # noqa: E501

        :return: The init_image_url of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501
        :rtype: str
        """
        return self._init_image_url

    @init_image_url.setter
    def init_image_url(self, init_image_url):
        """Sets the init_image_url of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.

        InitImageURL is an optional URL to an image containing an extracted VDDK library, overrides v2v-vmware config map  # noqa: E501

        :param init_image_url: The init_image_url of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501
        :type: str
        """

        self._init_image_url = init_image_url

    @property
    def secret_ref(self):
        """Gets the secret_ref of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501

        SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host  # noqa: E501

        :return: The secret_ref of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501
        :rtype: str
        """
        return self._secret_ref

    @secret_ref.setter
    def secret_ref(self, secret_ref):
        """Sets the secret_ref of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.

        SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host  # noqa: E501

        :param secret_ref: The secret_ref of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501
        :type: str
        """

        self._secret_ref = secret_ref

    @property
    def thumbprint(self):
        """Gets the thumbprint of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501

        Thumbprint is the certificate thumbprint of the vCenter or ESXi host  # noqa: E501

        :return: The thumbprint of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.

        Thumbprint is the certificate thumbprint of the vCenter or ESXi host  # noqa: E501

        :param thumbprint: The thumbprint of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501
        :type: str
        """

        self._thumbprint = thumbprint

    @property
    def url(self):
        """Gets the url of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501

        URL is the URL of the vCenter or ESXi host with the VM to migrate  # noqa: E501

        :return: The url of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.

        URL is the URL of the vCenter or ESXi host with the VM to migrate  # noqa: E501

        :param url: The url of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def uuid(self):
        """Gets the uuid of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501

        UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi  # noqa: E501

        :return: The uuid of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.

        UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi  # noqa: E501

        :param uuid: The uuid of this KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubevirtIoContainerizedDataImporterApiPkgApisCoreV1beta1DataVolumeSourceVDDK):
            return True

        return self.to_dict() != other.to_dict()
