# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class HarvesterhciIoV1beta1VirtualMachineRestoreSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deletion_policy': 'str',
        'new_vm': 'bool',
        'target': 'K8sIoV1TypedLocalObjectReference',
        'virtual_machine_backup_name': 'str',
        'virtual_machine_backup_namespace': 'str'
    }

    attribute_map = {
        'deletion_policy': 'deletionPolicy',
        'new_vm': 'newVM',
        'target': 'target',
        'virtual_machine_backup_name': 'virtualMachineBackupName',
        'virtual_machine_backup_namespace': 'virtualMachineBackupNamespace'
    }

    def __init__(self, deletion_policy=None, new_vm=None, target=None, virtual_machine_backup_name='', virtual_machine_backup_namespace='', _configuration=None):  # noqa: E501
        """HarvesterhciIoV1beta1VirtualMachineRestoreSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._deletion_policy = None
        self._new_vm = None
        self._target = None
        self._virtual_machine_backup_name = None
        self._virtual_machine_backup_namespace = None
        self.discriminator = None

        if deletion_policy is not None:
            self.deletion_policy = deletion_policy
        if new_vm is not None:
            self.new_vm = new_vm
        self.target = target
        self.virtual_machine_backup_name = virtual_machine_backup_name
        self.virtual_machine_backup_namespace = virtual_machine_backup_namespace

    @property
    def deletion_policy(self):
        """Gets the deletion_policy of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501


        :return: The deletion_policy of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501
        :rtype: str
        """
        return self._deletion_policy

    @deletion_policy.setter
    def deletion_policy(self, deletion_policy):
        """Sets the deletion_policy of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.


        :param deletion_policy: The deletion_policy of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501
        :type: str
        """

        self._deletion_policy = deletion_policy

    @property
    def new_vm(self):
        """Gets the new_vm of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501


        :return: The new_vm of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501
        :rtype: bool
        """
        return self._new_vm

    @new_vm.setter
    def new_vm(self, new_vm):
        """Sets the new_vm of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.


        :param new_vm: The new_vm of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501
        :type: bool
        """

        self._new_vm = new_vm

    @property
    def target(self):
        """Gets the target of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501

        initially only VirtualMachine type supported  # noqa: E501

        :return: The target of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501
        :rtype: K8sIoV1TypedLocalObjectReference
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.

        initially only VirtualMachine type supported  # noqa: E501

        :param target: The target of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501
        :type: K8sIoV1TypedLocalObjectReference
        """
        if self._configuration.client_side_validation and target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def virtual_machine_backup_name(self):
        """Gets the virtual_machine_backup_name of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501


        :return: The virtual_machine_backup_name of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501
        :rtype: str
        """
        return self._virtual_machine_backup_name

    @virtual_machine_backup_name.setter
    def virtual_machine_backup_name(self, virtual_machine_backup_name):
        """Sets the virtual_machine_backup_name of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.


        :param virtual_machine_backup_name: The virtual_machine_backup_name of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and virtual_machine_backup_name is None:
            raise ValueError("Invalid value for `virtual_machine_backup_name`, must not be `None`")  # noqa: E501

        self._virtual_machine_backup_name = virtual_machine_backup_name

    @property
    def virtual_machine_backup_namespace(self):
        """Gets the virtual_machine_backup_namespace of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501


        :return: The virtual_machine_backup_namespace of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501
        :rtype: str
        """
        return self._virtual_machine_backup_namespace

    @virtual_machine_backup_namespace.setter
    def virtual_machine_backup_namespace(self, virtual_machine_backup_namespace):
        """Sets the virtual_machine_backup_namespace of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.


        :param virtual_machine_backup_namespace: The virtual_machine_backup_namespace of this HarvesterhciIoV1beta1VirtualMachineRestoreSpec.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and virtual_machine_backup_namespace is None:
            raise ValueError("Invalid value for `virtual_machine_backup_namespace`, must not be `None`")  # noqa: E501

        self._virtual_machine_backup_namespace = virtual_machine_backup_namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HarvesterhciIoV1beta1VirtualMachineRestoreSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HarvesterhciIoV1beta1VirtualMachineRestoreSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HarvesterhciIoV1beta1VirtualMachineRestoreSpec):
            return True

        return self.to_dict() != other.to_dict()
