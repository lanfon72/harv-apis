# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class KubevirtIoApiCoreV1PersistentVolumeClaimInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_modes': 'list[str]',
        'capacity': 'dict(str, K8sIoApimachineryPkgApiResourceQuantity)',
        'filesystem_overhead': 'str',
        'preallocated': 'bool',
        'requests': 'dict(str, K8sIoApimachineryPkgApiResourceQuantity)',
        'volume_mode': 'str'
    }

    attribute_map = {
        'access_modes': 'accessModes',
        'capacity': 'capacity',
        'filesystem_overhead': 'filesystemOverhead',
        'preallocated': 'preallocated',
        'requests': 'requests',
        'volume_mode': 'volumeMode'
    }

    def __init__(self, access_modes=None, capacity=None, filesystem_overhead=None, preallocated=None, requests=None, volume_mode=None, _configuration=None):  # noqa: E501
        """KubevirtIoApiCoreV1PersistentVolumeClaimInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_modes = None
        self._capacity = None
        self._filesystem_overhead = None
        self._preallocated = None
        self._requests = None
        self._volume_mode = None
        self.discriminator = None

        if access_modes is not None:
            self.access_modes = access_modes
        if capacity is not None:
            self.capacity = capacity
        if filesystem_overhead is not None:
            self.filesystem_overhead = filesystem_overhead
        if preallocated is not None:
            self.preallocated = preallocated
        if requests is not None:
            self.requests = requests
        if volume_mode is not None:
            self.volume_mode = volume_mode

    @property
    def access_modes(self):
        """Gets the access_modes of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501

        AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1  # noqa: E501

        :return: The access_modes of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_modes

    @access_modes.setter
    def access_modes(self, access_modes):
        """Sets the access_modes of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.

        AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1  # noqa: E501

        :param access_modes: The access_modes of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501
        :type: list[str]
        """

        self._access_modes = access_modes

    @property
    def capacity(self):
        """Gets the capacity of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501

        Capacity represents the capacity set on the corresponding PVC status  # noqa: E501

        :return: The capacity of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501
        :rtype: dict(str, K8sIoApimachineryPkgApiResourceQuantity)
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.

        Capacity represents the capacity set on the corresponding PVC status  # noqa: E501

        :param capacity: The capacity of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501
        :type: dict(str, K8sIoApimachineryPkgApiResourceQuantity)
        """

        self._capacity = capacity

    @property
    def filesystem_overhead(self):
        """Gets the filesystem_overhead of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501

        Percentage of filesystem's size to be reserved when resizing the PVC  # noqa: E501

        :return: The filesystem_overhead of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501
        :rtype: str
        """
        return self._filesystem_overhead

    @filesystem_overhead.setter
    def filesystem_overhead(self, filesystem_overhead):
        """Sets the filesystem_overhead of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.

        Percentage of filesystem's size to be reserved when resizing the PVC  # noqa: E501

        :param filesystem_overhead: The filesystem_overhead of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501
        :type: str
        """

        self._filesystem_overhead = filesystem_overhead

    @property
    def preallocated(self):
        """Gets the preallocated of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501

        Preallocated indicates if the PVC's storage is preallocated or not  # noqa: E501

        :return: The preallocated of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501
        :rtype: bool
        """
        return self._preallocated

    @preallocated.setter
    def preallocated(self, preallocated):
        """Sets the preallocated of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.

        Preallocated indicates if the PVC's storage is preallocated or not  # noqa: E501

        :param preallocated: The preallocated of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501
        :type: bool
        """

        self._preallocated = preallocated

    @property
    def requests(self):
        """Gets the requests of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501

        Requests represents the resources requested by the corresponding PVC spec  # noqa: E501

        :return: The requests of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501
        :rtype: dict(str, K8sIoApimachineryPkgApiResourceQuantity)
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.

        Requests represents the resources requested by the corresponding PVC spec  # noqa: E501

        :param requests: The requests of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501
        :type: dict(str, K8sIoApimachineryPkgApiResourceQuantity)
        """

        self._requests = requests

    @property
    def volume_mode(self):
        """Gets the volume_mode of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501

        VolumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.  # noqa: E501

        :return: The volume_mode of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501
        :rtype: str
        """
        return self._volume_mode

    @volume_mode.setter
    def volume_mode(self, volume_mode):
        """Sets the volume_mode of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.

        VolumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.  # noqa: E501

        :param volume_mode: The volume_mode of this KubevirtIoApiCoreV1PersistentVolumeClaimInfo.  # noqa: E501
        :type: str
        """

        self._volume_mode = volume_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubevirtIoApiCoreV1PersistentVolumeClaimInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubevirtIoApiCoreV1PersistentVolumeClaimInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubevirtIoApiCoreV1PersistentVolumeClaimInfo):
            return True

        return self.to_dict() != other.to_dict()
