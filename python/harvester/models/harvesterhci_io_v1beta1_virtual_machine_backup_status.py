# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class HarvesterhciIoV1beta1VirtualMachineBackupStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backup_target': 'HarvesterhciIoV1beta1BackupTarget',
        'conditions': 'list[HarvesterhciIoV1beta1Condition]',
        'creation_time': 'K8sIoV1Time',
        'error': 'HarvesterhciIoV1beta1Error',
        'ready_to_use': 'bool',
        'secret_backups': 'list[HarvesterhciIoV1beta1SecretBackup]',
        'source': 'HarvesterhciIoV1beta1VirtualMachineSourceSpec',
        'source_uid': 'str',
        'volume_backups': 'list[HarvesterhciIoV1beta1VolumeBackup]'
    }

    attribute_map = {
        'backup_target': 'backupTarget',
        'conditions': 'conditions',
        'creation_time': 'creationTime',
        'error': 'error',
        'ready_to_use': 'readyToUse',
        'secret_backups': 'secretBackups',
        'source': 'source',
        'source_uid': 'sourceUID',
        'volume_backups': 'volumeBackups'
    }

    def __init__(self, backup_target=None, conditions=None, creation_time=None, error=None, ready_to_use=None, secret_backups=None, source=None, source_uid=None, volume_backups=None, _configuration=None):  # noqa: E501
        """HarvesterhciIoV1beta1VirtualMachineBackupStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._backup_target = None
        self._conditions = None
        self._creation_time = None
        self._error = None
        self._ready_to_use = None
        self._secret_backups = None
        self._source = None
        self._source_uid = None
        self._volume_backups = None
        self.discriminator = None

        if backup_target is not None:
            self.backup_target = backup_target
        if conditions is not None:
            self.conditions = conditions
        if creation_time is not None:
            self.creation_time = creation_time
        if error is not None:
            self.error = error
        if ready_to_use is not None:
            self.ready_to_use = ready_to_use
        if secret_backups is not None:
            self.secret_backups = secret_backups
        if source is not None:
            self.source = source
        if source_uid is not None:
            self.source_uid = source_uid
        if volume_backups is not None:
            self.volume_backups = volume_backups

    @property
    def backup_target(self):
        """Gets the backup_target of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501


        :return: The backup_target of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :rtype: HarvesterhciIoV1beta1BackupTarget
        """
        return self._backup_target

    @backup_target.setter
    def backup_target(self, backup_target):
        """Sets the backup_target of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.


        :param backup_target: The backup_target of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :type: HarvesterhciIoV1beta1BackupTarget
        """

        self._backup_target = backup_target

    @property
    def conditions(self):
        """Gets the conditions of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501


        :return: The conditions of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :rtype: list[HarvesterhciIoV1beta1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.


        :param conditions: The conditions of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :type: list[HarvesterhciIoV1beta1Condition]
        """

        self._conditions = conditions

    @property
    def creation_time(self):
        """Gets the creation_time of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501


        :return: The creation_time of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :rtype: K8sIoV1Time
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.


        :param creation_time: The creation_time of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :type: K8sIoV1Time
        """

        self._creation_time = creation_time

    @property
    def error(self):
        """Gets the error of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501


        :return: The error of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :rtype: HarvesterhciIoV1beta1Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.


        :param error: The error of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :type: HarvesterhciIoV1beta1Error
        """

        self._error = error

    @property
    def ready_to_use(self):
        """Gets the ready_to_use of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501


        :return: The ready_to_use of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ready_to_use

    @ready_to_use.setter
    def ready_to_use(self, ready_to_use):
        """Sets the ready_to_use of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.


        :param ready_to_use: The ready_to_use of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :type: bool
        """

        self._ready_to_use = ready_to_use

    @property
    def secret_backups(self):
        """Gets the secret_backups of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501


        :return: The secret_backups of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :rtype: list[HarvesterhciIoV1beta1SecretBackup]
        """
        return self._secret_backups

    @secret_backups.setter
    def secret_backups(self, secret_backups):
        """Sets the secret_backups of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.


        :param secret_backups: The secret_backups of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :type: list[HarvesterhciIoV1beta1SecretBackup]
        """

        self._secret_backups = secret_backups

    @property
    def source(self):
        """Gets the source of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501

        SourceSpec contains the vm spec source of the backup target  # noqa: E501

        :return: The source of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :rtype: HarvesterhciIoV1beta1VirtualMachineSourceSpec
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.

        SourceSpec contains the vm spec source of the backup target  # noqa: E501

        :param source: The source of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :type: HarvesterhciIoV1beta1VirtualMachineSourceSpec
        """

        self._source = source

    @property
    def source_uid(self):
        """Gets the source_uid of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501


        :return: The source_uid of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :rtype: str
        """
        return self._source_uid

    @source_uid.setter
    def source_uid(self, source_uid):
        """Sets the source_uid of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.


        :param source_uid: The source_uid of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :type: str
        """

        self._source_uid = source_uid

    @property
    def volume_backups(self):
        """Gets the volume_backups of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501


        :return: The volume_backups of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :rtype: list[HarvesterhciIoV1beta1VolumeBackup]
        """
        return self._volume_backups

    @volume_backups.setter
    def volume_backups(self, volume_backups):
        """Sets the volume_backups of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.


        :param volume_backups: The volume_backups of this HarvesterhciIoV1beta1VirtualMachineBackupStatus.  # noqa: E501
        :type: list[HarvesterhciIoV1beta1VolumeBackup]
        """

        self._volume_backups = volume_backups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HarvesterhciIoV1beta1VirtualMachineBackupStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HarvesterhciIoV1beta1VirtualMachineBackupStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HarvesterhciIoV1beta1VirtualMachineBackupStatus):
            return True

        return self.to_dict() != other.to_dict()
