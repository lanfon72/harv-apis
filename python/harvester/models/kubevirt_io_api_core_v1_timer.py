# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class KubevirtIoApiCoreV1Timer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hpet': 'KubevirtIoApiCoreV1HPETTimer',
        'hyperv': 'KubevirtIoApiCoreV1HypervTimer',
        'kvm': 'KubevirtIoApiCoreV1KVMTimer',
        'pit': 'KubevirtIoApiCoreV1PITTimer',
        'rtc': 'KubevirtIoApiCoreV1RTCTimer'
    }

    attribute_map = {
        'hpet': 'hpet',
        'hyperv': 'hyperv',
        'kvm': 'kvm',
        'pit': 'pit',
        'rtc': 'rtc'
    }

    def __init__(self, hpet=None, hyperv=None, kvm=None, pit=None, rtc=None, _configuration=None):  # noqa: E501
        """KubevirtIoApiCoreV1Timer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._hpet = None
        self._hyperv = None
        self._kvm = None
        self._pit = None
        self._rtc = None
        self.discriminator = None

        if hpet is not None:
            self.hpet = hpet
        if hyperv is not None:
            self.hyperv = hyperv
        if kvm is not None:
            self.kvm = kvm
        if pit is not None:
            self.pit = pit
        if rtc is not None:
            self.rtc = rtc

    @property
    def hpet(self):
        """Gets the hpet of this KubevirtIoApiCoreV1Timer.  # noqa: E501

        HPET (High Precision Event Timer) - multiple timers with periodic interrupts.  # noqa: E501

        :return: The hpet of this KubevirtIoApiCoreV1Timer.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1HPETTimer
        """
        return self._hpet

    @hpet.setter
    def hpet(self, hpet):
        """Sets the hpet of this KubevirtIoApiCoreV1Timer.

        HPET (High Precision Event Timer) - multiple timers with periodic interrupts.  # noqa: E501

        :param hpet: The hpet of this KubevirtIoApiCoreV1Timer.  # noqa: E501
        :type: KubevirtIoApiCoreV1HPETTimer
        """

        self._hpet = hpet

    @property
    def hyperv(self):
        """Gets the hyperv of this KubevirtIoApiCoreV1Timer.  # noqa: E501

        Hyperv (Hypervclock) - lets guests read the host’s wall clock time (paravirtualized). For windows guests.  # noqa: E501

        :return: The hyperv of this KubevirtIoApiCoreV1Timer.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1HypervTimer
        """
        return self._hyperv

    @hyperv.setter
    def hyperv(self, hyperv):
        """Sets the hyperv of this KubevirtIoApiCoreV1Timer.

        Hyperv (Hypervclock) - lets guests read the host’s wall clock time (paravirtualized). For windows guests.  # noqa: E501

        :param hyperv: The hyperv of this KubevirtIoApiCoreV1Timer.  # noqa: E501
        :type: KubevirtIoApiCoreV1HypervTimer
        """

        self._hyperv = hyperv

    @property
    def kvm(self):
        """Gets the kvm of this KubevirtIoApiCoreV1Timer.  # noqa: E501

        KVM  (KVM clock) - lets guests read the host’s wall clock time (paravirtualized). For linux guests.  # noqa: E501

        :return: The kvm of this KubevirtIoApiCoreV1Timer.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1KVMTimer
        """
        return self._kvm

    @kvm.setter
    def kvm(self, kvm):
        """Sets the kvm of this KubevirtIoApiCoreV1Timer.

        KVM  (KVM clock) - lets guests read the host’s wall clock time (paravirtualized). For linux guests.  # noqa: E501

        :param kvm: The kvm of this KubevirtIoApiCoreV1Timer.  # noqa: E501
        :type: KubevirtIoApiCoreV1KVMTimer
        """

        self._kvm = kvm

    @property
    def pit(self):
        """Gets the pit of this KubevirtIoApiCoreV1Timer.  # noqa: E501

        PIT (Programmable Interval Timer) - a timer with periodic interrupts.  # noqa: E501

        :return: The pit of this KubevirtIoApiCoreV1Timer.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1PITTimer
        """
        return self._pit

    @pit.setter
    def pit(self, pit):
        """Sets the pit of this KubevirtIoApiCoreV1Timer.

        PIT (Programmable Interval Timer) - a timer with periodic interrupts.  # noqa: E501

        :param pit: The pit of this KubevirtIoApiCoreV1Timer.  # noqa: E501
        :type: KubevirtIoApiCoreV1PITTimer
        """

        self._pit = pit

    @property
    def rtc(self):
        """Gets the rtc of this KubevirtIoApiCoreV1Timer.  # noqa: E501

        RTC (Real Time Clock) - a continuously running timer with periodic interrupts.  # noqa: E501

        :return: The rtc of this KubevirtIoApiCoreV1Timer.  # noqa: E501
        :rtype: KubevirtIoApiCoreV1RTCTimer
        """
        return self._rtc

    @rtc.setter
    def rtc(self, rtc):
        """Sets the rtc of this KubevirtIoApiCoreV1Timer.

        RTC (Real Time Clock) - a continuously running timer with periodic interrupts.  # noqa: E501

        :param rtc: The rtc of this KubevirtIoApiCoreV1Timer.  # noqa: E501
        :type: KubevirtIoApiCoreV1RTCTimer
        """

        self._rtc = rtc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubevirtIoApiCoreV1Timer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubevirtIoApiCoreV1Timer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubevirtIoApiCoreV1Timer):
            return True

        return self.to_dict() != other.to_dict()
