# coding: utf-8

"""
    Harvester APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1beta1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from harvester.configuration import Configuration


class NetworkHarvesterhciIoV1beta1LinkStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditions': 'list[NetworkHarvesterhciIoV1beta1Condition]',
        'index': 'int',
        'ipv4_address': 'list[str]',
        'mac': 'str',
        'master_index': 'int',
        'promiscuous': 'bool',
        'routes': 'list[str]',
        'state': 'str',
        'type': 'str'
    }

    attribute_map = {
        'conditions': 'conditions',
        'index': 'index',
        'ipv4_address': 'ipv4Address',
        'mac': 'mac',
        'master_index': 'masterIndex',
        'promiscuous': 'promiscuous',
        'routes': 'routes',
        'state': 'state',
        'type': 'type'
    }

    def __init__(self, conditions=None, index=None, ipv4_address=None, mac=None, master_index=None, promiscuous=None, routes=None, state=None, type=None, _configuration=None):  # noqa: E501
        """NetworkHarvesterhciIoV1beta1LinkStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._conditions = None
        self._index = None
        self._ipv4_address = None
        self._mac = None
        self._master_index = None
        self._promiscuous = None
        self._routes = None
        self._state = None
        self._type = None
        self.discriminator = None

        if conditions is not None:
            self.conditions = conditions
        if index is not None:
            self.index = index
        if ipv4_address is not None:
            self.ipv4_address = ipv4_address
        if mac is not None:
            self.mac = mac
        if master_index is not None:
            self.master_index = master_index
        if promiscuous is not None:
            self.promiscuous = promiscuous
        if routes is not None:
            self.routes = routes
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type

    @property
    def conditions(self):
        """Gets the conditions of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501


        :return: The conditions of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :rtype: list[NetworkHarvesterhciIoV1beta1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this NetworkHarvesterhciIoV1beta1LinkStatus.


        :param conditions: The conditions of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :type: list[NetworkHarvesterhciIoV1beta1Condition]
        """

        self._conditions = conditions

    @property
    def index(self):
        """Gets the index of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501


        :return: The index of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this NetworkHarvesterhciIoV1beta1LinkStatus.


        :param index: The index of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501


        :return: The ipv4_address of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this NetworkHarvesterhciIoV1beta1LinkStatus.


        :param ipv4_address: The ipv4_address of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :type: list[str]
        """

        self._ipv4_address = ipv4_address

    @property
    def mac(self):
        """Gets the mac of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501


        :return: The mac of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this NetworkHarvesterhciIoV1beta1LinkStatus.


        :param mac: The mac of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def master_index(self):
        """Gets the master_index of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501


        :return: The master_index of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :rtype: int
        """
        return self._master_index

    @master_index.setter
    def master_index(self, master_index):
        """Sets the master_index of this NetworkHarvesterhciIoV1beta1LinkStatus.


        :param master_index: The master_index of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :type: int
        """

        self._master_index = master_index

    @property
    def promiscuous(self):
        """Gets the promiscuous of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501


        :return: The promiscuous of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :rtype: bool
        """
        return self._promiscuous

    @promiscuous.setter
    def promiscuous(self, promiscuous):
        """Sets the promiscuous of this NetworkHarvesterhciIoV1beta1LinkStatus.


        :param promiscuous: The promiscuous of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :type: bool
        """

        self._promiscuous = promiscuous

    @property
    def routes(self):
        """Gets the routes of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501


        :return: The routes of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this NetworkHarvesterhciIoV1beta1LinkStatus.


        :param routes: The routes of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :type: list[str]
        """

        self._routes = routes

    @property
    def state(self):
        """Gets the state of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501


        :return: The state of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NetworkHarvesterhciIoV1beta1LinkStatus.


        :param state: The state of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501


        :return: The type of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NetworkHarvesterhciIoV1beta1LinkStatus.


        :param type: The type of this NetworkHarvesterhciIoV1beta1LinkStatus.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkHarvesterhciIoV1beta1LinkStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkHarvesterhciIoV1beta1LinkStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkHarvesterhciIoV1beta1LinkStatus):
            return True

        return self.to_dict() != other.to_dict()
